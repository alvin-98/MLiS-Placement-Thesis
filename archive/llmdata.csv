html,formula,check1,check2,function,completion,function_vars
"
<html>
<table><thead><tr><th colspan=""3""><strong>Noise Charges</strong></th></tr><tr><th>QC</th><th>Set fee per Tonne 2025<br/>Day</th><th>Set fee per Tonne 2025<br/>Night</th></tr></thead><tbody><tr><td>0</td><td><span style=""color: green;"">€13.79</span></td><td><span style=""color: green;"">€10.76</span></td></tr><tr><td>0.125</td><td><span style=""color: green;"">€19.81</span></td><td><span style=""color: green;"">€12.05</span></td></tr><tr><td>0.25</td><td><span style=""color: green;"">€3.06</span></td><td><span style=""color: green;"">€8.63</span></td></tr><tr><td>0.5</td><td><span style=""color: green;"">€14.09</span></td><td><span style=""color: green;"">€21.95</span></td></tr><tr><td>1</td><td><span style=""color: green;"">€2.96</span></td><td><span style=""color: green;"">€21.66</span></td></tr><tr><td>2</td><td><span style=""color: green;"">€16.62</span></td><td><span style=""color: green;"">€18.26</span></td></tr><tr><td>4</td><td><span style=""color: green;"">€22.99</span></td><td><span style=""color: green;"">€8.52</span></td></tr><tr><td>8</td><td><span style=""color: green;"">€19.17</span></td><td><span style=""color: green;"">€4.20</span></td></tr><tr><td>16</td><td><span style=""color: green;"">€15.90</span></td><td><span style=""color: green;"">€1.48</span></td></tr></tbody></table>
</html>
","def compute_noise_charge(document, qc, weight, day_night):
    '''This function calculates the total noise charge based on the QC value, weight in tonnes, and whether it's day or night.
     df[df.iloc[:,0] == qc] is used to find the row corresponding to the QC value.
     row.iloc[:,1].values[0] is used to select the fee for daytime.
     row.iloc[:,2].values[0] is used to select the fee for nighttime.
     '''
    df = pd.read_html(document)[0]
    row = df[df.iloc[:,0] == qc]
    if row.empty:
        return None
    
    if day_night.lower() == 'day':
        fee = row.iloc[:,1].values[0]
    elif day_night.lower() == 'night':
        fee = row.iloc[:,2].values[0]
    else:
        raise ValueError(""day_night must be 'day' or 'night'"")
    
    total_fee = float(fee.replace('€', '').replace(',', '.')) * weight
    return total_fee
",29.6,91.3,"def calculate_total_fee(qc_value: float, tonnage: float, time_period: str = 'day') -> float:
    """"""This function calculates the total fee based on the QC value, tonnage, and time period.

    Args:
        qc_value (float): The QC value.
        tonnage (float): The weight in tonnes.
        time_period (str): The time period, either 'day' or 'night'.

    Returns:
        float: The total fee calculated based on the provided inputs.
    """"""

    # Define the fees based on the QC value and time period
    fees = {
        0: {'day': 13.79, 'night': 10.76},
        0.125: {'day': 19.81, 'night': 12.05},
        0.25: {'day': 3.06, 'night': 8.63},
        0.5: {'day': 14.09, 'night': 21.95},
        1: {'day': 2.96, 'night': 21.66},
        2: {'day': 16.62, 'night': 18.26},
        4: {'day': 22.99, 'night': 8.52},
        8: {'day': 19.17, 'night': 4.20},
        16: {'day': 15.90, 'night': 1.48},
    }

    # Check if the QC value exists in the fees dictionary
    if qc_value not in fees:
        raise ValueError(f""QC value {qc_value} not found."")

    # Check if the time period is valid
    if time_period not in ['day', 'night']:
        raise ValueError(""time_period must be 'day' or 'night'"")

    # Calculate the total fee
    total_fee = fees[qc_value][time_period] * tonnage

    return total_fee
","```python
def calculate_total_fee(qc_value: float, tonnage: float, time_period: str = 'day') -> float:
    """"""This function calculates the total fee based on the QC value, tonnage, and time period.

    Args:
        qc_value (float): The QC value.
        tonnage (float): The weight in tonnes.
        time_period (str): The time period, either 'day' or 'night'.

    Returns:
        float: The total fee calculated based on the provided inputs.
    """"""

    # Define the fees based on the QC value and time period
    fees = {
        0: {'day': 13.79, 'night': 10.76},
        0.125: {'day': 19.81, 'night': 12.05},
        0.25: {'day': 3.06, 'night': 8.63},
        0.5: {'day': 14.09, 'night': 21.95},
        1: {'day': 2.96, 'night': 21.66},
        2: {'day': 16.62, 'night': 18.26},
        4: {'day': 22.99, 'night': 8.52},
        8: {'day': 19.17, 'night': 4.20},
        16: {'day': 15.90, 'night': 1.48},
    }

    # Check if the QC value exists in the fees dictionary
    if qc_value not in fees:
        raise ValueError(f""QC value {qc_value} not found."")

    # Check if the time period is valid
    if time_period not in ['day', 'night']:
        raise ValueError(""time_period must be 'day' or 'night'"")

    # Calculate the total fee
    total_fee = fees[qc_value][time_period] * tonnage

    return total_fee
```
This function defines a dictionary `fees` that maps QC values to their respective day and night rates. It then checks if the provided `qc_value` and `time_period` are valid and calculates the total fee by multiplying the corresponding rate by the `tonnage`. The function raises a `ValueError` if the inputs are not valid.","[[('qc_value', 'float'), ('tonnage', 'float'), ('time_period', 'str')]]"
