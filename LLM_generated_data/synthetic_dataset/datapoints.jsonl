["# Microsoft Azure Cloud Pricing Policy Document\n\nMicrosoft Azure Pricing Policy\n\nThis document outlines the pricing structure and policies for Microsoft Azure cloud services in the European Union (EUR) region. As a valued customer, it is essential to understand the fees associated with our services to ensure transparency and accurate budgeting. This official policy document is intended to provide a comprehensive overview of our pricing structure and guidelines.\n\n## **Compute VM Pricing: Rates for Virtual Machines and Related Services**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Billable Hours</th>\n      <th>Linux</th>\n      <th>Windows</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 216.5</td>\n      <td>$4.00 per hour</td>\n      <td>$4.80 per hour</td>\n    </tr>\n    <tr>\n      <td>216.5 \u2013 408.7</td>\n      <td>$3.00 per hour</td>\n      <td>$3.90 per hour</td>\n    </tr>\n    <tr>\n      <td>408.7 \u2013 598.4</td>\n      <td>$2.00 per hour</td>\n      <td>$2.20 per hour</td>\n    </tr>\n    <tr>\n      <td>598.4 \u2013 744.0</td>\n      <td>$1.00 per hour</td>\n      <td>$1.10 per hour</td>\n    </tr>\n  </tbody>\n</table>\n\n## **GPU Compute Fee**\n\nThis section outlines the pricing structure for GPU compute resources in Microsoft Azure.\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>GPU Type</th>\n      <th>Charge</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>MI300X</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>A100</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>T4</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <td>A10</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Managed Disk Pricing**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Number of Disks</th>\n      <th>Charge (EUR)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 - 10</td>\n      <td>1 \u00d7 number of disks</td>\n    </tr>\n    <tr>\n      <td>11 - 33</td>\n      <td>2 \u00d7 number of disks</td>\n    </tr>\n    <tr>\n      <td>34 - 36</td>\n      <td>3 \u00d7 number of disks</td>\n    </tr>\n    <tr>\n      <td>37 - 63</td>\n      <td>4 \u00d7 number of disks</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Data Egress Fees: Charges for Data Downloaded from Microsoft Azure Storage and Services**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Geo Region</th>\n      <th>Charge (EUR)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK South</td>\n      <td>1.00</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>2.00</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>3.00</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>4.00</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>5.00</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>6.00</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Data Ingress Fee: Charges for Data Transferred into Azure Services**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Fee (\u20ac per GB)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK South</td>\n      <td>1.0 per GB</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>1.1 per GB</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>1.2 per GB</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>1.3 per GB</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>1.4 per GB</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>1.5 per GB</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Storage Transaction Fees: Charges for Storage Operations in Azure Storage Services**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Storage Operations (Million)</th>\n      <th>LRS</th>\n      <th>ZRS</th>\n      <th>GRS</th>\n      <th>GZRS</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 225.4</td>\n      <td>\u20ac1.00 per million</td>\n      <td>\u20ac1.10 per million</td>\n      <td>\u20ac1.20 per million</td>\n      <td>\u20ac1.30 per million</td>\n    </tr>\n    <tr>\n      <td>225.4 \u2013 368.7</td>\n      <td>\u20ac2.00 per million</td>\n      <td>\u20ac2.20 per million</td>\n      <td>\u20ac2.40 per million</td>\n      <td>\u20ac2.60 per million</td>\n    </tr>\n    <tr>\n      <td>368.7 \u2013 500.0</td>\n      <td>\u20ac3.00 per million</td>\n      <td>\u20ac3.30 per million</td>\n      <td>\u20ac3.60 per million</td>\n      <td>\u20ac3.90 per million</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Public IP Address Pricing**\n\nThis section outlines the pricing details for public IP addresses in Azure.\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>IP Count</th>\n      <th>UK South</th>\n      <th>UK West</th>\n      <th>West Europe</th>\n      <th>North Europe</th>\n      <th>East US</th>\n      <th>West US 2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 - 59</td>\n      <td>\u20ac1 per IP</td>\n      <td>\u20ac2 per IP</td>\n      <td>\u20ac3 per IP</td>\n      <td>\u20ac4 per IP</td>\n      <td>\u20ac5 per IP</td>\n      <td>\u20ac6 per IP</td>\n    </tr>\n    <tr>\n      <td>60 - 99</td>\n      <td>\u20ac2 per IP</td>\n      <td>\u20ac4 per IP</td>\n      <td>\u20ac6 per IP</td>\n      <td>\u20ac8 per IP</td>\n      <td>\u20ac10 per IP</td>\n      <td>\u20ac12 per IP</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Load Balancer Pricing and Fees**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Load Balancer Rules</th>\n      <th>Charge (EUR)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 110</td>\n      <td>2 \u00d7 rules</td>\n    </tr>\n    <tr>\n      <td>111 \u2013 200</td>\n      <td>1 \u00d7 rules</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Azure Kubernetes Service (AKS) Cluster Pricing**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Geo Region</th>\n      <th>Charge (EUR)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>West US 2</td>\n      <td>1.00</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>2.00</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>3.00</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>4.00</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>5.00</td>\n    </tr>\n    <tr>\n      <td>UK South</td>\n      <td>6.00</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Function App Pricing**\n\nAzure Function App Pricing Details for Computing, Storage, and Network Resources.\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Geo Region</th>\n      <th>Duration (ms)</th>\n      <th>Function App Fee (EUR)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK South</td>\n      <td>0.1 - 99870.2</td>\n      <td>1.0 per ms</td>\n    </tr>\n    <tr>\n      <td>UK South</td>\n      <td>99870.2 - 600000.0</td>\n      <td>2.0 per ms</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>0.1 - 99870.2</td>\n      <td>1.1 per ms</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>99870.2 - 600000.0</td>\n      <td>2.2 per ms</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>0.1 - 99870.2</td>\n      <td>1.2 per ms</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>99870.2 - 600000.0</td>\n      <td>2.4 per ms</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>0.1 - 99870.2</td>\n      <td>1.3 per ms</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>99870.2 - 600000.0</td>\n      <td>2.6 per ms</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>0.1 - 99870.2</td>\n      <td>1.4 per ms</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>99870.2 - 600000.0</td>\n      <td>2.8 per ms</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>0.1 - 99870.2</td>\n      <td>1.5 per ms</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>99870.2 - 600000.0</td>\n      <td>3.0 per ms</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Database Services Pricing: SQL Database Fees**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Backup Days</th>\n      <th>UK South</th>\n      <th>UK West</th>\n      <th>West Europe</th>\n      <th>North Europe</th>\n      <th>East US</th>\n      <th>West US 2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 32</td>\n      <td>\u20ac1 per day</td>\n      <td>\u20ac2 per day</td>\n      <td>\u20ac3 per day</td>\n      <td>\u20ac4 per day</td>\n      <td>\u20ac5 per day</td>\n      <td>\u20ac6 per day</td>\n    </tr>\n    <tr>\n      <td>33 \u2013 134</td>\n      <td>\u20ac2 per day</td>\n      <td>\u20ac4 per day</td>\n      <td>\u20ac6 per day</td>\n      <td>\u20ac8 per day</td>\n      <td>\u20ac10 per day</td>\n      <td>\u20ac12 per day</td>\n    </tr>\n    <tr>\n      <td>135 \u2013 364</td>\n      <td>\u20ac3 per day</td>\n      <td>\u20ac6 per day</td>\n      <td>\u20ac9 per day</td>\n      <td>\u20ac12 per day</td>\n      <td>\u20ac15 per day</td>\n      <td>\u20ac18 per day</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Snapshot Storage Fees for Azure Virtual Machines and Managed Disks**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Redundancy Mode</th>\n      <th>Charge (EUR)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>ZRS</td>\n      <td>1.00 EUR</td>\n    </tr>\n    <tr>\n      <td>GRS</td>\n      <td>2.00 EUR</td>\n    </tr>\n    <tr>\n      <td>GZRS</td>\n      <td>3.00 EUR</td>\n    </tr>\n    <tr>\n      <td>LRS</td>\n      <td>4.00 EUR</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Azure App Service Pricing: Pricing for Web, Mobile, and API Apps**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Web App Instances</th>\n      <th>Basic</th>\n      <th>Standard</th>\n      <th>Premium</th>\n      <th>Isolated</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 10</td>\n      <td>1 \u00d7 instances</td>\n      <td>2 \u00d7 instances</td>\n      <td>3 \u00d7 instances</td>\n      <td>4 \u00d7 instances</td>\n    </tr>\n    <tr>\n      <td>11 \u2013 94</td>\n      <td>2 \u00d7 instances</td>\n      <td>4 \u00d7 instances</td>\n      <td>6 \u00d7 instances</td>\n      <td>8 \u00d7 instances</td>\n    </tr>\n    <tr>\n      <td>95 \u2013 95</td>\n      <td>3 \u00d7 instances</td>\n      <td>6 \u00d7 instances</td>\n      <td>9 \u00d7 instances</td>\n      <td>12 \u00d7 instances</td>\n    </tr>\n    <tr>\n      <td>96 \u2013 199</td>\n      <td>4 \u00d7 instances</td>\n      <td>8 \u00d7 instances</td>\n      <td>12 \u00d7 instances</td>\n      <td>16 \u00d7 instances</td>\n    </tr>\n  </tbody>\n</table>\n\nIn conclusion, Microsoft Azure's cloud pricing policies are designed to provide transparent and predictable costs for a wide range of cloud services. All pricing is subject to change, and customers are advised to regularly review the Azure Pricing Calculator for the most up-to-date information on service costs. For any questions or concerns regarding Azure pricing, please contact Microsoft Support for assistance.\n\n**Policy Effective Date:** August 20, 2025\n\n", {"compute_vm_fee": {"description": "compute_vm_fee conditions by guest_os and billable_hours:\n\nfor linux the following charges apply:\n  - if billable_hours in [598.4, 744.0), charge is 1.0 \u00d7 billable_hours\n  - if billable_hours in [408.7, 598.4), charge is 2.0 \u00d7 billable_hours\n  - if billable_hours in [216.5, 408.7), charge is 3.0 \u00d7 billable_hours\n  - if billable_hours in [0.0, 216.5), charge is 4.0 \u00d7 billable_hours\nfor windows the following charges apply:\n  - if billable_hours in [598.4, 744.0), charge is 1.1 \u00d7 billable_hours\n  - if billable_hours in [408.7, 598.4), charge is 2.2 \u00d7 billable_hours\n  - if billable_hours in [216.5, 408.7), charge is 3.3 \u00d7 billable_hours\n  - if billable_hours in [0.0, 216.5), charge is 4.4 \u00d7 billable_hours", "code": "def compute_charge(os_type, usage_hours):\n    if os_type == 'linux' and 598.4 <= usage_hours < 744.0: return 1 * usage_hours * 1.0\n    elif os_type == 'linux' and 408.7 <= usage_hours < 598.4: return 2 * usage_hours * 1.0\n    elif os_type == 'linux' and 216.5 <= usage_hours < 408.7: return 3 * usage_hours * 1.0\n    elif os_type == 'linux' and 0.0 <= usage_hours < 216.5: return 4 * usage_hours * 1.0\n    elif os_type == 'windows' and 598.4 <= usage_hours < 744.0: return 1 * usage_hours * 1.1\n    elif os_type == 'windows' and 408.7 <= usage_hours < 598.4: return 2 * usage_hours * 1.1\n    elif os_type == 'windows' and 216.5 <= usage_hours < 408.7: return 3 * usage_hours * 1.1\n    elif os_type == 'windows' and 0.0 <= usage_hours < 216.5: return 4 * usage_hours * 1.1\n    else: raise ValueError(f'os_type or usage_hours is out of expected range')", "variables_used": {"os_type": {"unit": "os", "description": "Operating system for the compute workload", "dtype": "str"}, "usage_hours": {"unit": "hours", "description": "Total runtime in hours over the billing window", "dtype": "float"}}, "synonyms": ["vm runtime charge", "compute instance fee", "virtual machine cost"], "charge_description": "Charge for running virtual machines based on vCPU, memory, OS, and commitment."}, "gpu_compute_fee": {"description": "if graphics_processor is 'MI300X', charge is 1; if graphics_processor is 'A100', charge is 2; if graphics_processor is 'T4', charge is 3; if graphics_processor is 'A10', charge is 4 The variable 'graphics_processor' is measured in gpu type.", "code": "def compute_charge(gpu_type):\n    if gpu_type == 'MI300X': return 1\n    elif gpu_type == 'A100': return 2\n    elif gpu_type == 'T4': return 3\n    elif gpu_type == 'A10': return 4\n    else: raise ValueError(f'Unknown value for gpu_type: {gpu_type}')", "variables_used": {"gpu_type": {"unit": "gpu type", "description": "Type of GPU accelerator", "dtype": "str"}}, "synonyms": ["gpu instance fee", "accelerator charge", "gpu runtime cost"], "charge_description": "Charge for GPU-enabled compute usage."}, "managed_disk_fee": {"description": "if num_disks in [0, 11), charge is 1 \u00d7 num_disks; if num_disks in [11, 34), charge is 2 \u00d7 num_disks; if num_disks in [34, 37), charge is 3 \u00d7 num_disks; if num_disks in [37, 64), charge is 4 \u00d7 num_disks The variable 'num_disks' is measured in disks.", "code": "def compute_charge(managed_disk_count):\n    if 0 <= managed_disk_count < 11: return 1 * managed_disk_count\n    elif 11 <= managed_disk_count < 34: return 2 * managed_disk_count\n    elif 34 <= managed_disk_count < 37: return 3 * managed_disk_count\n    elif 37 <= managed_disk_count < 64: return 4 * managed_disk_count\n    else: raise ValueError(f'managed_disk_count is out of expected range')", "variables_used": {"managed_disk_count": {"unit": "disks", "description": "Count of managed disks attached", "dtype": "int"}}, "synonyms": ["disk charge", "managed storage fee", "block storage cost"], "charge_description": "Charge for managed disks based on type, size, and count."}, "data_egress_fee": {"description": "if geo_region is 'uk_south', charge is 1; if geo_region is 'westeurope', charge is 2; if geo_region is 'westus2', charge is 3; if geo_region is 'uk_west', charge is 4; if geo_region is 'eastus', charge is 5; if geo_region is 'northeurope', charge is 6 The variable 'geo_region' is measured in geo_region.", "code": "def compute_charge(region):\n    if region == 'uk_south': return 1\n    elif region == 'westeurope': return 2\n    elif region == 'westus2': return 3\n    elif region == 'uk_west': return 4\n    elif region == 'eastus': return 5\n    elif region == 'northeurope': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["egress charge", "outbound data fee", "data transfer out"], "charge_description": "Charge for data leaving Azure regions."}, "data_ingress_fee": {"description": "data_ingress_fee conditions by location and data_transfer_in_gb:\n\nfor uk_south the following charges apply:\n  - if data_transfer_in_gb in [0.0, 51718.2), charge is 1.0 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [51718.2, 84797.2), charge is 2.0 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [84797.2, 100000.0), charge is 3.0 \u00d7 data_transfer_in_gb\nfor uk_west the following charges apply:\n  - if data_transfer_in_gb in [0.0, 51718.2), charge is 1.1 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [51718.2, 84797.2), charge is 2.2 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [84797.2, 100000.0), charge is 3.3 \u00d7 data_transfer_in_gb\nfor westeurope the following charges apply:\n  - if data_transfer_in_gb in [0.0, 51718.2), charge is 1.2 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [51718.2, 84797.2), charge is 2.4 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [84797.2, 100000.0), charge is 3.6 \u00d7 data_transfer_in_gb\nfor northeurope the following charges apply:\n  - if data_transfer_in_gb in [0.0, 51718.2), charge is 1.3 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [51718.2, 84797.2), charge is 2.6 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [84797.2, 100000.0), charge is 3.9 \u00d7 data_transfer_in_gb\nfor eastus the following charges apply:\n  - if data_transfer_in_gb in [0.0, 51718.2), charge is 1.4 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [51718.2, 84797.2), charge is 2.8 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [84797.2, 100000.0), charge is 4.2 \u00d7 data_transfer_in_gb\nfor westus2 the following charges apply:\n  - if data_transfer_in_gb in [0.0, 51718.2), charge is 1.5 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [51718.2, 84797.2), charge is 3.0 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [84797.2, 100000.0), charge is 4.5 \u00d7 data_transfer_in_gb", "code": "def compute_charge(region, data_ingress_gb):\n    if region == 'uk_south' and 0.0 <= data_ingress_gb < 51718.2: return 1 * data_ingress_gb * 1.0\n    elif region == 'uk_south' and 51718.2 <= data_ingress_gb < 84797.2: return 2 * data_ingress_gb * 1.0\n    elif region == 'uk_south' and 84797.2 <= data_ingress_gb < 100000.0: return 3 * data_ingress_gb * 1.0\n    elif region == 'uk_west' and 0.0 <= data_ingress_gb < 51718.2: return 1 * data_ingress_gb * 1.1\n    elif region == 'uk_west' and 51718.2 <= data_ingress_gb < 84797.2: return 2 * data_ingress_gb * 1.1\n    elif region == 'uk_west' and 84797.2 <= data_ingress_gb < 100000.0: return 3 * data_ingress_gb * 1.1\n    elif region == 'westeurope' and 0.0 <= data_ingress_gb < 51718.2: return 1 * data_ingress_gb * 1.2\n    elif region == 'westeurope' and 51718.2 <= data_ingress_gb < 84797.2: return 2 * data_ingress_gb * 1.2\n    elif region == 'westeurope' and 84797.2 <= data_ingress_gb < 100000.0: return 3 * data_ingress_gb * 1.2\n    elif region == 'northeurope' and 0.0 <= data_ingress_gb < 51718.2: return 1 * data_ingress_gb * 1.3\n    elif region == 'northeurope' and 51718.2 <= data_ingress_gb < 84797.2: return 2 * data_ingress_gb * 1.3\n    elif region == 'northeurope' and 84797.2 <= data_ingress_gb < 100000.0: return 3 * data_ingress_gb * 1.3\n    elif region == 'eastus' and 0.0 <= data_ingress_gb < 51718.2: return 1 * data_ingress_gb * 1.4\n    elif region == 'eastus' and 51718.2 <= data_ingress_gb < 84797.2: return 2 * data_ingress_gb * 1.4\n    elif region == 'eastus' and 84797.2 <= data_ingress_gb < 100000.0: return 3 * data_ingress_gb * 1.4\n    elif region == 'westus2' and 0.0 <= data_ingress_gb < 51718.2: return 1 * data_ingress_gb * 1.5\n    elif region == 'westus2' and 51718.2 <= data_ingress_gb < 84797.2: return 2 * data_ingress_gb * 1.5\n    elif region == 'westus2' and 84797.2 <= data_ingress_gb < 100000.0: return 3 * data_ingress_gb * 1.5\n    else: raise ValueError(f'region or data_ingress_gb is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "data_ingress_gb": {"unit": "GB", "description": "Inbound data transferred to Azure", "dtype": "float"}}, "synonyms": ["ingress charge", "inbound data fee", "data transfer in"], "charge_description": "Charge for data entering Azure regions where applicable."}, "storage_transaction_fee": {"description": "storage_transaction_fee conditions by replication and storage_ops_million:\n\nfor LRS the following charges apply:\n  - if storage_ops_million in [0.0, 225.4), charge is 1.0 \u00d7 storage_ops_million\n  - if storage_ops_million in [225.4, 368.7), charge is 2.0 \u00d7 storage_ops_million\n  - if storage_ops_million in [368.7, 500.0), charge is 3.0 \u00d7 storage_ops_million\nfor ZRS the following charges apply:\n  - if storage_ops_million in [0.0, 225.4), charge is 1.1 \u00d7 storage_ops_million\n  - if storage_ops_million in [225.4, 368.7), charge is 2.2 \u00d7 storage_ops_million\n  - if storage_ops_million in [368.7, 500.0), charge is 3.3 \u00d7 storage_ops_million\nfor GRS the following charges apply:\n  - if storage_ops_million in [0.0, 225.4), charge is 1.2 \u00d7 storage_ops_million\n  - if storage_ops_million in [225.4, 368.7), charge is 2.4 \u00d7 storage_ops_million\n  - if storage_ops_million in [368.7, 500.0), charge is 3.6 \u00d7 storage_ops_million\nfor GZRS the following charges apply:\n  - if storage_ops_million in [0.0, 225.4), charge is 1.3 \u00d7 storage_ops_million\n  - if storage_ops_million in [225.4, 368.7), charge is 2.6 \u00d7 storage_ops_million\n  - if storage_ops_million in [368.7, 500.0), charge is 3.9 \u00d7 storage_ops_million", "code": "def compute_charge(redundancy, storage_transactions_millions):\n    if redundancy == 'LRS' and 0.0 <= storage_transactions_millions < 225.4: return 1 * storage_transactions_millions * 1.0\n    elif redundancy == 'LRS' and 225.4 <= storage_transactions_millions < 368.7: return 2 * storage_transactions_millions * 1.0\n    elif redundancy == 'LRS' and 368.7 <= storage_transactions_millions < 500.0: return 3 * storage_transactions_millions * 1.0\n    elif redundancy == 'ZRS' and 0.0 <= storage_transactions_millions < 225.4: return 1 * storage_transactions_millions * 1.1\n    elif redundancy == 'ZRS' and 225.4 <= storage_transactions_millions < 368.7: return 2 * storage_transactions_millions * 1.1\n    elif redundancy == 'ZRS' and 368.7 <= storage_transactions_millions < 500.0: return 3 * storage_transactions_millions * 1.1\n    elif redundancy == 'GRS' and 0.0 <= storage_transactions_millions < 225.4: return 1 * storage_transactions_millions * 1.2\n    elif redundancy == 'GRS' and 225.4 <= storage_transactions_millions < 368.7: return 2 * storage_transactions_millions * 1.2\n    elif redundancy == 'GRS' and 368.7 <= storage_transactions_millions < 500.0: return 3 * storage_transactions_millions * 1.2\n    elif redundancy == 'GZRS' and 0.0 <= storage_transactions_millions < 225.4: return 1 * storage_transactions_millions * 1.3\n    elif redundancy == 'GZRS' and 225.4 <= storage_transactions_millions < 368.7: return 2 * storage_transactions_millions * 1.3\n    elif redundancy == 'GZRS' and 368.7 <= storage_transactions_millions < 500.0: return 3 * storage_transactions_millions * 1.3\n    else: raise ValueError(f'redundancy or storage_transactions_millions is out of expected range')", "variables_used": {"redundancy": {"unit": "redundancy", "description": "Storage redundancy configuration", "dtype": "str"}, "storage_transactions_millions": {"unit": "million tx", "description": "Number of storage account operations in millions", "dtype": "float"}}, "synonyms": ["storage ops fee", "transaction charge", "storage request cost"], "charge_description": "Charge for storage account transactions and redundancy level."}, "public_ip_fee": {"description": "public_ip_fee conditions by geo_region and ip_count:\n\nfor uk_south the following charges apply:\n  - if ip_count in [0, 60), charge is 1 \u00d7 ip_count\n  - if ip_count in [60, 100), charge is 2 \u00d7 ip_count\nfor uk_west the following charges apply:\n  - if ip_count in [0, 60), charge is 2 \u00d7 ip_count\n  - if ip_count in [60, 100), charge is 4 \u00d7 ip_count\nfor westeurope the following charges apply:\n  - if ip_count in [0, 60), charge is 3 \u00d7 ip_count\n  - if ip_count in [60, 100), charge is 6 \u00d7 ip_count\nfor northeurope the following charges apply:\n  - if ip_count in [0, 60), charge is 4 \u00d7 ip_count\n  - if ip_count in [60, 100), charge is 8 \u00d7 ip_count\nfor eastus the following charges apply:\n  - if ip_count in [0, 60), charge is 5 \u00d7 ip_count\n  - if ip_count in [60, 100), charge is 10 \u00d7 ip_count\nfor westus2 the following charges apply:\n  - if ip_count in [0, 60), charge is 6 \u00d7 ip_count\n  - if ip_count in [60, 100), charge is 12 \u00d7 ip_count", "code": "def compute_charge(region, public_ip_count):\n    if region == 'uk_south' and 0 <= public_ip_count < 60: return 1 * public_ip_count * 1\n    elif region == 'uk_south' and 60 <= public_ip_count < 100: return 2 * public_ip_count * 1\n    elif region == 'uk_west' and 0 <= public_ip_count < 60: return 1 * public_ip_count * 2\n    elif region == 'uk_west' and 60 <= public_ip_count < 100: return 2 * public_ip_count * 2\n    elif region == 'westeurope' and 0 <= public_ip_count < 60: return 1 * public_ip_count * 3\n    elif region == 'westeurope' and 60 <= public_ip_count < 100: return 2 * public_ip_count * 3\n    elif region == 'northeurope' and 0 <= public_ip_count < 60: return 1 * public_ip_count * 4\n    elif region == 'northeurope' and 60 <= public_ip_count < 100: return 2 * public_ip_count * 4\n    elif region == 'eastus' and 0 <= public_ip_count < 60: return 1 * public_ip_count * 5\n    elif region == 'eastus' and 60 <= public_ip_count < 100: return 2 * public_ip_count * 5\n    elif region == 'westus2' and 0 <= public_ip_count < 60: return 1 * public_ip_count * 6\n    elif region == 'westus2' and 60 <= public_ip_count < 100: return 2 * public_ip_count * 6\n    else: raise ValueError(f'region or public_ip_count is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "public_ip_count": {"unit": "IPs", "description": "Number of public IP addresses allocated", "dtype": "int"}}, "synonyms": ["ip address charge", "public ip cost", "elastic ip fee"], "charge_description": "Charge for public IP addresses allocated."}, "load_balancer_fee": {"description": "if lb_rules in [111, 200), charge is 1 \u00d7 lb_rules; if lb_rules in [0, 111), charge is 2 \u00d7 lb_rules The variable 'lb_rules' is measured in rules.", "code": "def compute_charge(load_balancer_rules):\n    if 111 <= load_balancer_rules < 200: return 1 * load_balancer_rules\n    elif 0 <= load_balancer_rules < 111: return 2 * load_balancer_rules\n    else: raise ValueError(f'load_balancer_rules is out of expected range')", "variables_used": {"load_balancer_rules": {"unit": "rules", "description": "Configured load balancer rules", "dtype": "int"}}, "synonyms": ["lb fee", "balancer charge", "traffic distribution cost"], "charge_description": "Charge for load balancer rules and tier."}, "aks_cluster_fee": {"description": "if geo_region is 'westus2', charge is 1; if geo_region is 'northeurope', charge is 2; if geo_region is 'eastus', charge is 3; if geo_region is 'westeurope', charge is 4; if geo_region is 'uk_west', charge is 5; if geo_region is 'uk_south', charge is 6 The variable 'geo_region' is measured in geo_region.", "code": "def compute_charge(region):\n    if region == 'westus2': return 1\n    elif region == 'northeurope': return 2\n    elif region == 'eastus': return 3\n    elif region == 'westeurope': return 4\n    elif region == 'uk_west': return 5\n    elif region == 'uk_south': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["kubernetes fee", "aks charge", "container cluster cost"], "charge_description": "Charge for AKS clusters based on node count and type."}, "function_app_fee": {"description": "function_app_fee conditions by geo_region and duration_ms:\n\nfor uk_south the following charges apply:\n  - if duration_ms in [0.1, 99870.2), charge is 1.0 \u00d7 duration_ms\n  - if duration_ms in [99870.2, 600000.0), charge is 2.0 \u00d7 duration_ms\nfor uk_west the following charges apply:\n  - if duration_ms in [0.1, 99870.2), charge is 1.1 \u00d7 duration_ms\n  - if duration_ms in [99870.2, 600000.0), charge is 2.2 \u00d7 duration_ms\nfor westeurope the following charges apply:\n  - if duration_ms in [0.1, 99870.2), charge is 1.2 \u00d7 duration_ms\n  - if duration_ms in [99870.2, 600000.0), charge is 2.4 \u00d7 duration_ms\nfor northeurope the following charges apply:\n  - if duration_ms in [0.1, 99870.2), charge is 1.3 \u00d7 duration_ms\n  - if duration_ms in [99870.2, 600000.0), charge is 2.6 \u00d7 duration_ms\nfor eastus the following charges apply:\n  - if duration_ms in [0.1, 99870.2), charge is 1.4 \u00d7 duration_ms\n  - if duration_ms in [99870.2, 600000.0), charge is 2.8 \u00d7 duration_ms\nfor westus2 the following charges apply:\n  - if duration_ms in [0.1, 99870.2), charge is 1.5 \u00d7 duration_ms\n  - if duration_ms in [99870.2, 600000.0), charge is 3.0 \u00d7 duration_ms", "code": "def compute_charge(region, function_exec_ms):\n    if region == 'uk_south' and 0.1 <= function_exec_ms < 99870.2: return 1 * function_exec_ms * 1.0\n    elif region == 'uk_south' and 99870.2 <= function_exec_ms < 600000.0: return 2 * function_exec_ms * 1.0\n    elif region == 'uk_west' and 0.1 <= function_exec_ms < 99870.2: return 1 * function_exec_ms * 1.1\n    elif region == 'uk_west' and 99870.2 <= function_exec_ms < 600000.0: return 2 * function_exec_ms * 1.1\n    elif region == 'westeurope' and 0.1 <= function_exec_ms < 99870.2: return 1 * function_exec_ms * 1.2\n    elif region == 'westeurope' and 99870.2 <= function_exec_ms < 600000.0: return 2 * function_exec_ms * 1.2\n    elif region == 'northeurope' and 0.1 <= function_exec_ms < 99870.2: return 1 * function_exec_ms * 1.3\n    elif region == 'northeurope' and 99870.2 <= function_exec_ms < 600000.0: return 2 * function_exec_ms * 1.3\n    elif region == 'eastus' and 0.1 <= function_exec_ms < 99870.2: return 1 * function_exec_ms * 1.4\n    elif region == 'eastus' and 99870.2 <= function_exec_ms < 600000.0: return 2 * function_exec_ms * 1.4\n    elif region == 'westus2' and 0.1 <= function_exec_ms < 99870.2: return 1 * function_exec_ms * 1.5\n    elif region == 'westus2' and 99870.2 <= function_exec_ms < 600000.0: return 2 * function_exec_ms * 1.5\n    else: raise ValueError(f'region or function_exec_ms is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "function_exec_ms": {"unit": "ms", "description": "Average or billed execution time per invocation", "dtype": "float"}}, "synonyms": ["faas charge", "functions cost", "serverless fee"], "charge_description": "Charge for serverless executions and execution time."}, "sql_database_fee": {"description": "sql_database_fee conditions by geo_region and backup_days:\n\nfor uk_south the following charges apply:\n  - if backup_days in [0, 33), charge is 1 \u00d7 backup_days\n  - if backup_days in [33, 135), charge is 2 \u00d7 backup_days\n  - if backup_days in [135, 365), charge is 3 \u00d7 backup_days\nfor uk_west the following charges apply:\n  - if backup_days in [0, 33), charge is 2 \u00d7 backup_days\n  - if backup_days in [33, 135), charge is 4 \u00d7 backup_days\n  - if backup_days in [135, 365), charge is 6 \u00d7 backup_days\nfor westeurope the following charges apply:\n  - if backup_days in [0, 33), charge is 3 \u00d7 backup_days\n  - if backup_days in [33, 135), charge is 6 \u00d7 backup_days\n  - if backup_days in [135, 365), charge is 9 \u00d7 backup_days\nfor northeurope the following charges apply:\n  - if backup_days in [0, 33), charge is 4 \u00d7 backup_days\n  - if backup_days in [33, 135), charge is 8 \u00d7 backup_days\n  - if backup_days in [135, 365), charge is 12 \u00d7 backup_days\nfor eastus the following charges apply:\n  - if backup_days in [0, 33), charge is 5 \u00d7 backup_days\n  - if backup_days in [33, 135), charge is 10 \u00d7 backup_days\n  - if backup_days in [135, 365), charge is 15 \u00d7 backup_days\nfor westus2 the following charges apply:\n  - if backup_days in [0, 33), charge is 6 \u00d7 backup_days\n  - if backup_days in [33, 135), charge is 12 \u00d7 backup_days\n  - if backup_days in [135, 365), charge is 18 \u00d7 backup_days", "code": "def compute_charge(region, backup_retention_days):\n    if region == 'uk_south' and 0 <= backup_retention_days < 33: return 1 * backup_retention_days * 1\n    elif region == 'uk_south' and 33 <= backup_retention_days < 135: return 2 * backup_retention_days * 1\n    elif region == 'uk_south' and 135 <= backup_retention_days < 365: return 3 * backup_retention_days * 1\n    elif region == 'uk_west' and 0 <= backup_retention_days < 33: return 1 * backup_retention_days * 2\n    elif region == 'uk_west' and 33 <= backup_retention_days < 135: return 2 * backup_retention_days * 2\n    elif region == 'uk_west' and 135 <= backup_retention_days < 365: return 3 * backup_retention_days * 2\n    elif region == 'westeurope' and 0 <= backup_retention_days < 33: return 1 * backup_retention_days * 3\n    elif region == 'westeurope' and 33 <= backup_retention_days < 135: return 2 * backup_retention_days * 3\n    elif region == 'westeurope' and 135 <= backup_retention_days < 365: return 3 * backup_retention_days * 3\n    elif region == 'northeurope' and 0 <= backup_retention_days < 33: return 1 * backup_retention_days * 4\n    elif region == 'northeurope' and 33 <= backup_retention_days < 135: return 2 * backup_retention_days * 4\n    elif region == 'northeurope' and 135 <= backup_retention_days < 365: return 3 * backup_retention_days * 4\n    elif region == 'eastus' and 0 <= backup_retention_days < 33: return 1 * backup_retention_days * 5\n    elif region == 'eastus' and 33 <= backup_retention_days < 135: return 2 * backup_retention_days * 5\n    elif region == 'eastus' and 135 <= backup_retention_days < 365: return 3 * backup_retention_days * 5\n    elif region == 'westus2' and 0 <= backup_retention_days < 33: return 1 * backup_retention_days * 6\n    elif region == 'westus2' and 33 <= backup_retention_days < 135: return 2 * backup_retention_days * 6\n    elif region == 'westus2' and 135 <= backup_retention_days < 365: return 3 * backup_retention_days * 6\n    else: raise ValueError(f'region or backup_retention_days is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "backup_retention_days": {"unit": "days", "description": "Backup retention period for databases", "dtype": "int"}}, "synonyms": ["sql charge", "database fee", "sql managed instance cost"], "charge_description": "Charge for Azure SQL based on vCores, storage, and retention."}, "snapshot_storage_fee": {"description": "if redundancy_mode is 'ZRS', charge is 1; if redundancy_mode is 'GRS', charge is 2; if redundancy_mode is 'GZRS', charge is 3; if redundancy_mode is 'LRS', charge is 4 The variable 'redundancy_mode' is measured in redundancy_mode.", "code": "def compute_charge(redundancy):\n    if redundancy == 'ZRS': return 1\n    elif redundancy == 'GRS': return 2\n    elif redundancy == 'GZRS': return 3\n    elif redundancy == 'LRS': return 4\n    else: raise ValueError(f'Unknown value for redundancy: {redundancy}')", "variables_used": {"redundancy": {"unit": "redundancy", "description": "Storage redundancy configuration", "dtype": "str"}}, "synonyms": ["snapshot fee", "backup snapshot cost", "image snapshot charge"], "charge_description": "Charge for snapshot storage volume and redundancy."}, "app_service_fee": {"description": "app_service_fee conditions by pricing_tier and webapp_instances:\n\nfor basic the following charges apply:\n  - if webapp_instances in [0, 11), charge is 1 \u00d7 webapp_instances\n  - if webapp_instances in [11, 95), charge is 2 \u00d7 webapp_instances\n  - if webapp_instances in [95, 96), charge is 3 \u00d7 webapp_instances\n  - if webapp_instances in [96, 200), charge is 4 \u00d7 webapp_instances\nfor standard the following charges apply:\n  - if webapp_instances in [0, 11), charge is 2 \u00d7 webapp_instances\n  - if webapp_instances in [11, 95), charge is 4 \u00d7 webapp_instances\n  - if webapp_instances in [95, 96), charge is 6 \u00d7 webapp_instances\n  - if webapp_instances in [96, 200), charge is 8 \u00d7 webapp_instances\nfor premium the following charges apply:\n  - if webapp_instances in [0, 11), charge is 3 \u00d7 webapp_instances\n  - if webapp_instances in [11, 95), charge is 6 \u00d7 webapp_instances\n  - if webapp_instances in [95, 96), charge is 9 \u00d7 webapp_instances\n  - if webapp_instances in [96, 200), charge is 12 \u00d7 webapp_instances\nfor isolated the following charges apply:\n  - if webapp_instances in [0, 11), charge is 4 \u00d7 webapp_instances\n  - if webapp_instances in [11, 95), charge is 8 \u00d7 webapp_instances\n  - if webapp_instances in [95, 96), charge is 12 \u00d7 webapp_instances\n  - if webapp_instances in [96, 200), charge is 16 \u00d7 webapp_instances", "code": "def compute_charge(service_tier, app_service_instances):\n    if service_tier == 'basic' and 0 <= app_service_instances < 11: return 1 * app_service_instances * 1\n    elif service_tier == 'basic' and 11 <= app_service_instances < 95: return 2 * app_service_instances * 1\n    elif service_tier == 'basic' and 95 <= app_service_instances < 96: return 3 * app_service_instances * 1\n    elif service_tier == 'basic' and 96 <= app_service_instances < 200: return 4 * app_service_instances * 1\n    elif service_tier == 'standard' and 0 <= app_service_instances < 11: return 1 * app_service_instances * 2\n    elif service_tier == 'standard' and 11 <= app_service_instances < 95: return 2 * app_service_instances * 2\n    elif service_tier == 'standard' and 95 <= app_service_instances < 96: return 3 * app_service_instances * 2\n    elif service_tier == 'standard' and 96 <= app_service_instances < 200: return 4 * app_service_instances * 2\n    elif service_tier == 'premium' and 0 <= app_service_instances < 11: return 1 * app_service_instances * 3\n    elif service_tier == 'premium' and 11 <= app_service_instances < 95: return 2 * app_service_instances * 3\n    elif service_tier == 'premium' and 95 <= app_service_instances < 96: return 3 * app_service_instances * 3\n    elif service_tier == 'premium' and 96 <= app_service_instances < 200: return 4 * app_service_instances * 3\n    elif service_tier == 'isolated' and 0 <= app_service_instances < 11: return 1 * app_service_instances * 4\n    elif service_tier == 'isolated' and 11 <= app_service_instances < 95: return 2 * app_service_instances * 4\n    elif service_tier == 'isolated' and 95 <= app_service_instances < 96: return 3 * app_service_instances * 4\n    elif service_tier == 'isolated' and 96 <= app_service_instances < 200: return 4 * app_service_instances * 4\n    else: raise ValueError(f'service_tier or app_service_instances is out of expected range')", "variables_used": {"service_tier": {"unit": "tier", "description": "Service tier for managed services", "dtype": "str"}, "app_service_instances": {"unit": "instances", "description": "Count of App Service instances", "dtype": "int"}}, "synonyms": ["app service charge", "web app fee", "app hosting cost"], "charge_description": "Charge for App Service instances and tier."}}]
["# Microsoft Azure Cloud Pricing Policy Document\n\nThis is the official Microsoft Azure Pricing Policy, outlining the fee structure and pricing terms for cloud services provided by Microsoft Azure in the European Union. As a valued customer, please review this policy to understand the rates and terms applicable to your usage of Azure services. By using Azure services, you acknowledge acceptance of the terms and conditions outlined in this policy.\n\n## Compute VM Fee: Pricing for Virtual Machine Instances in Microsoft Azure Cloud Services.\n\n**Commitment Term Charge**\n\nThe Commitment Term Charge is a pricing component applicable to certain Azure services. This charge is based on the length of the commitment term selected for the service. The charge is calculated as follows:\n\n- If the commitment term is 'none', the charge is 1 EUR per unit.\n- If the commitment term is '1yr', the charge is 2 EUR per unit.\n- If the commitment term is '3yr', the charge is 3 EUR per unit.\n\nThis charge is applied to each unit of the service, and the total charge is the product of the charge per unit and the number of units subscribed to. The charge is a one-time fee and is not recurring. It is used to incentivize customers to commit to a longer term, thereby reducing costs over time.\n\n## **GPU Compute Fee: Pricing for GPU-Enabled Virtual Machines and Clusters in Microsoft Azure**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Accelerator Count</th>\n      <th>Charge (EUR)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 3</td>\n      <td>4 \u00d7 accelerator_count</td>\n    </tr>\n    <tr>\n      <td>3 \u2013 7</td>\n      <td>2 \u00d7 accelerator_count</td>\n    </tr>\n    <tr>\n      <td>7 \u2013 8</td>\n      <td>1 \u00d7 accelerator_count</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Managed Disk Fees**\n\nPricing for Storage and Compute Services in Microsoft Azure.\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Disk Count Range</th>\n      <th>UK South</th>\n      <th>UK West</th>\n      <th>West Europe</th>\n      <th>North Europe</th>\n      <th>East US</th>\n      <th>West US 2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 26</td>\n      <td>1 \u00d7 disk count</td>\n      <td>2 \u00d7 disk count</td>\n      <td>3 \u00d7 disk count</td>\n      <td>4 \u00d7 disk count</td>\n      <td>5 \u00d7 disk count</td>\n      <td>6 \u00d7 disk count</td>\n    </tr>\n    <tr>\n      <td>27 \u2013 28</td>\n      <td>2 \u00d7 disk count</td>\n      <td>4 \u00d7 disk count</td>\n      <td>6 \u00d7 disk count</td>\n      <td>8 \u00d7 disk count</td>\n      <td>10 \u00d7 disk count</td>\n      <td>12 \u00d7 disk count</td>\n    </tr>\n    <tr>\n      <td>29 \u2013 56</td>\n      <td>3 \u00d7 disk count</td>\n      <td>6 \u00d7 disk count</td>\n      <td>9 \u00d7 disk count</td>\n      <td>12 \u00d7 disk count</td>\n      <td>15 \u00d7 disk count</td>\n      <td>18 \u00d7 disk count</td>\n    </tr>\n    <tr>\n      <td>57 \u2013 64</td>\n      <td>4 \u00d7 disk count</td>\n      <td>8 \u00d7 disk count</td>\n      <td>12 \u00d7 disk count</td>\n      <td>16 \u00d7 disk count</td>\n      <td>20 \u00d7 disk count</td>\n      <td>24 \u00d7 disk count</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Data Egress Fees: Charges for Data Downloaded from Azure Services**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Egress GB Range</th>\n      <th>Charge (EUR per GB)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0.0 \u2013 43,905.4 GB</td>\n      <td>3.00 EUR per GB</td>\n    </tr>\n    <tr>\n      <td>43,905.4 \u2013 58,519.7 GB</td>\n      <td>2.00 EUR per GB</td>\n    </tr>\n    <tr>\n      <td>58,519.7 \u2013 100,000.0 GB</td>\n      <td>1.00 EUR per GB</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Data Ingress Fees: Charges for Data Transferred into Azure Services**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Geo Region</th>\n      <th>Charge (EUR per GB)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK South</td>\n      <td>1.0 \u00d7 GB</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>2.0 \u00d7 GB</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>3.0 \u00d7 GB</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>4.0 \u00d7 GB</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>5.0 \u00d7 GB</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>6.0 \u00d7 GB</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Storage Transaction Fee Pricing** \n\n**Storage Transaction Fees for Azure Storage Services**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Charge (EUR per TX Million)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK South</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>2.2</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>2.4</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>2.6</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>2.8</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Public IP Address Pricing**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Public IPs</th>\n      <th>Charge (EUR)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 5</td>\n      <td>3 \u00d7 public_ips</td>\n    </tr>\n    <tr>\n      <td>5 \u2013 8</td>\n      <td>2 \u00d7 public_ips</td>\n    </tr>\n    <tr>\n      <td>8 \u2013 100</td>\n      <td>1 \u00d7 public_ips</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Load Balancer Pricing**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Charge (EUR)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>West US 2</td>\n      <td>1.00</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>2.00</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>5.00</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>4.00</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>3.00</td>\n    </tr>\n    <tr>\n      <td>UK South</td>\n      <td>6.00</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Azure Kubernetes Service (AKS) Cluster Pricing**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Instance Family</th>\n      <th>Cluster Nodes (0-663)</th>\n      <th>Cluster Nodes (664-999)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Dsv5</td>\n      <td>2 \u00d7 cluster nodes</td>\n      <td>1 \u00d7 cluster node</td>\n    </tr>\n    <tr>\n      <td>Esv5</td>\n      <td>4 \u00d7 cluster nodes</td>\n      <td>2 \u00d7 cluster nodes</td>\n    </tr>\n    <tr>\n      <td>Fsv2</td>\n      <td>6 \u00d7 cluster nodes</td>\n      <td>3 \u00d7 cluster nodes</td>\n    </tr>\n    <tr>\n      <td>Lsv3</td>\n      <td>8 \u00d7 cluster nodes</td>\n      <td>4 \u00d7 cluster nodes</td>\n    </tr>\n    <tr>\n      <td>NCasT4_v3</td>\n      <td>10 \u00d7 cluster nodes</td>\n      <td>5 \u00d7 cluster nodes</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Function App Pricing**\n\nFunction App Pricing: Calculate costs based on instance size, execution time, and\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Exec Time (ms)</th>\n      <th>Charge (\u20ac)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0.1 \u2013 156,576.5</td>\n      <td>1 \u00d7 exec_time_ms</td>\n    </tr>\n    <tr>\n      <td>156,576.5 \u2013 296,906.5</td>\n      <td>2 \u00d7 exec_time_ms</td>\n    </tr>\n    <tr>\n      <td>296,906.5 \u2013 528,130.5</td>\n      <td>3 \u00d7 exec_time_ms</td>\n    </tr>\n    <tr>\n      <td>528,130.5 \u2013 600,000</td>\n      <td>4 \u00d7 exec_time_ms</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Azure SQL Database Pricing: Charges for Database Services and Storage**\n\n**Azure Storage Account Tier Charge**\n\nThe Azure Storage Account Tier Charge is a pricing component applicable to Azure Storage accounts. This charge is based on the tier of the storage account, which is classified as Standard, Basic, Premium, or Isolated.\n\nThis charge applies to each storage account and is calculated based on the tier classification. The charge is as follows: \u20ac1 for Standard tier, \u20ac2 for Basic tier, \u20ac3 for Premium tier, and \u20ac4 for Isolated tier. The tier classification is based on the sku_tier value, which is a measured unit of tier.\n\n## **Snapshot Storage Fee: Charges for Storing and Retaining Azure Virtual Machine Snapshots**\n\nImage Snapshot Storage Charge\n\nThe Image Snapshot Storage charge applies to the storage of virtual machine snapshots in Azure. This charge is calculated based on the total size of the snapshots stored in GB, denoted as image_snapshot_gb.\n\nThe charge is calculated as follows: \n\n* For snapshots up to 31,620.7 GB, the charge is 1 \u00d7 image_snapshot_gb.\n* For snapshots between 31,620.7 GB and 56,763.2 GB, the charge is 2 \u00d7 image_snapshot_gb.\n* For snapshots between 56,763.2 GB and 57,897.0 GB, the charge is 3 \u00d7 image_snapshot_gb.\n* For snapshots between 57,897.0 GB and 100,000.0 GB, the charge is 4 \u00d7 image_snapshot_gb.\n\nThe charge is billed in EUR. The total charge is calculated by multiplying the applicable multiplier by the total size of the snapshots stored in GB. \n\n<table>\n  <tr>\n    <th>Snapshot Size Range (GB)</th>\n    <th>Charge Multiplier</th>\n    <th>Example Charge (EUR)</th>\n  </tr>\n  <tr>\n    <td>0.0 - 31,620.7</td>\n    <td>1</td>\n    <td>1 \u00d7 image_snapshot_gb</td>\n  </tr>\n  <tr>\n    <td>31,620.7 - 56,763.2</td>\n    <td>2</td>\n    <td>2 \u00d7 image_snapshot_gb</td>\n  </tr>\n  <tr>\n    <td>56,763.2 - 57,897.0</td>\n    <td>3</td>\n    <td>3 \u00d7 image_snapshot_gb</td>\n  </tr>\n  <tr>\n    <td>57,897.0 - 100,000.0</td>\n    <td>4</td>\n    <td>4 \u00d7 image_snapshot_gb</td>\n  </tr>\n</table>\n\n## App Service Pricing: Calculating Charges for Web Applications and APIs on Azure.\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Pricing Tier</th>\n      <th>App Instances (0-85)</th>\n      <th>App Instances (86-129)</th>\n      <th>App Instances (130-185)</th>\n      <th>App Instances (186-200)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Basic</td>\n      <td>1 \u00d7 Instances</td>\n      <td>2 \u00d7 Instances</td>\n      <td>3 \u00d7 Instances</td>\n      <td>4 \u00d7 Instances</td>\n    </tr>\n    <tr>\n      <td>Standard</td>\n      <td>2 \u00d7 Instances</td>\n      <td>4 \u00d7 Instances</td>\n      <td>6 \u00d7 Instances</td>\n      <td>8 \u00d7 Instances</td>\n    </tr>\n    <tr>\n      <td>Premium</td>\n      <td>3 \u00d7 Instances</td>\n      <td>6 \u00d7 Instances</td>\n      <td>9 \u00d7 Instances</td>\n      <td>12 \u00d7 Instances</td>\n    </tr>\n    <tr>\n      <td>Isolated</td>\n      <td>4 \u00d7 Instances</td>\n      <td>8 \u00d7 Instances</td>\n      <td>12 \u00d7 Instances</td>\n      <td>16 \u00d7 Instances</td>\n    </tr>\n  </tbody>\n</table>\n\nFor any questions or concerns regarding Azure pricing or to request a customized quote, please contact Microsoft Azure support through the Azure portal or by visiting the Azure pricing page. Support is available 24/7 to assist with inquiries. Detailed pricing information and support resources can be found at <https://azure.microsoft.com/en-us/pricing>.\n\n**Policy Effective Date:** August 20, 2025\n\n", {"compute_vm_fee": {"description": "if commit_term is 'none', charge is 1; if commit_term is '1yr', charge is 2; if commit_term is '3yr', charge is 3 The variable 'commit_term' is measured in term.", "code": "def compute_charge(commitment_term):\n    if commitment_term == 'none': return 1\n    elif commitment_term == '1yr': return 2\n    elif commitment_term == '3yr': return 3\n    else: raise ValueError(f'Unknown value for commitment_term: {commitment_term}')", "variables_used": {"commitment_term": {"unit": "term", "description": "Savings commitment for compute resources", "dtype": "str"}}, "synonyms": ["vm runtime charge", "compute instance fee", "virtual machine cost"], "charge_description": "Charge for running virtual machines based on vCPU, memory, OS, and commitment."}, "gpu_compute_fee": {"description": "if accelerator_count in [7, 8), charge is 1 \u00d7 accelerator_count; if accelerator_count in [3, 7), charge is 2 \u00d7 accelerator_count; if accelerator_count in [3, 3), charge is 3 \u00d7 accelerator_count; if accelerator_count in [0, 3), charge is 4 \u00d7 accelerator_count The variable 'accelerator_count' is measured in GPUs.", "code": "def compute_charge(gpu_count):\n    if 7 <= gpu_count < 8: return 1 * gpu_count\n    elif 3 <= gpu_count < 7: return 2 * gpu_count\n    elif 3 <= gpu_count < 3: return 3 * gpu_count\n    elif 0 <= gpu_count < 3: return 4 * gpu_count\n    else: raise ValueError(f'gpu_count is out of expected range')", "variables_used": {"gpu_count": {"unit": "GPUs", "description": "Number of GPUs attached to the instance", "dtype": "int"}}, "synonyms": ["gpu instance fee", "accelerator charge", "gpu runtime cost"], "charge_description": "Charge for GPU-enabled compute usage."}, "managed_disk_fee": {"description": "managed_disk_fee conditions by geo_region and disk_count:\n\nfor uk_south the following charges apply:\n  - if disk_count in [0, 27), charge is 1 \u00d7 disk_count\n  - if disk_count in [27, 29), charge is 2 \u00d7 disk_count\n  - if disk_count in [29, 57), charge is 3 \u00d7 disk_count\n  - if disk_count in [57, 64), charge is 4 \u00d7 disk_count\nfor uk_west the following charges apply:\n  - if disk_count in [0, 27), charge is 2 \u00d7 disk_count\n  - if disk_count in [27, 29), charge is 4 \u00d7 disk_count\n  - if disk_count in [29, 57), charge is 6 \u00d7 disk_count\n  - if disk_count in [57, 64), charge is 8 \u00d7 disk_count\nfor westeurope the following charges apply:\n  - if disk_count in [0, 27), charge is 3 \u00d7 disk_count\n  - if disk_count in [27, 29), charge is 6 \u00d7 disk_count\n  - if disk_count in [29, 57), charge is 9 \u00d7 disk_count\n  - if disk_count in [57, 64), charge is 12 \u00d7 disk_count\nfor northeurope the following charges apply:\n  - if disk_count in [0, 27), charge is 4 \u00d7 disk_count\n  - if disk_count in [27, 29), charge is 8 \u00d7 disk_count\n  - if disk_count in [29, 57), charge is 12 \u00d7 disk_count\n  - if disk_count in [57, 64), charge is 16 \u00d7 disk_count\nfor eastus the following charges apply:\n  - if disk_count in [0, 27), charge is 5 \u00d7 disk_count\n  - if disk_count in [27, 29), charge is 10 \u00d7 disk_count\n  - if disk_count in [29, 57), charge is 15 \u00d7 disk_count\n  - if disk_count in [57, 64), charge is 20 \u00d7 disk_count\nfor westus2 the following charges apply:\n  - if disk_count in [0, 27), charge is 6 \u00d7 disk_count\n  - if disk_count in [27, 29), charge is 12 \u00d7 disk_count\n  - if disk_count in [29, 57), charge is 18 \u00d7 disk_count\n  - if disk_count in [57, 64), charge is 24 \u00d7 disk_count", "code": "def compute_charge(region, managed_disk_count):\n    if region == 'uk_south' and 0 <= managed_disk_count < 27: return 1 * managed_disk_count * 1\n    elif region == 'uk_south' and 27 <= managed_disk_count < 29: return 2 * managed_disk_count * 1\n    elif region == 'uk_south' and 29 <= managed_disk_count < 57: return 3 * managed_disk_count * 1\n    elif region == 'uk_south' and 57 <= managed_disk_count < 64: return 4 * managed_disk_count * 1\n    elif region == 'uk_west' and 0 <= managed_disk_count < 27: return 1 * managed_disk_count * 2\n    elif region == 'uk_west' and 27 <= managed_disk_count < 29: return 2 * managed_disk_count * 2\n    elif region == 'uk_west' and 29 <= managed_disk_count < 57: return 3 * managed_disk_count * 2\n    elif region == 'uk_west' and 57 <= managed_disk_count < 64: return 4 * managed_disk_count * 2\n    elif region == 'westeurope' and 0 <= managed_disk_count < 27: return 1 * managed_disk_count * 3\n    elif region == 'westeurope' and 27 <= managed_disk_count < 29: return 2 * managed_disk_count * 3\n    elif region == 'westeurope' and 29 <= managed_disk_count < 57: return 3 * managed_disk_count * 3\n    elif region == 'westeurope' and 57 <= managed_disk_count < 64: return 4 * managed_disk_count * 3\n    elif region == 'northeurope' and 0 <= managed_disk_count < 27: return 1 * managed_disk_count * 4\n    elif region == 'northeurope' and 27 <= managed_disk_count < 29: return 2 * managed_disk_count * 4\n    elif region == 'northeurope' and 29 <= managed_disk_count < 57: return 3 * managed_disk_count * 4\n    elif region == 'northeurope' and 57 <= managed_disk_count < 64: return 4 * managed_disk_count * 4\n    elif region == 'eastus' and 0 <= managed_disk_count < 27: return 1 * managed_disk_count * 5\n    elif region == 'eastus' and 27 <= managed_disk_count < 29: return 2 * managed_disk_count * 5\n    elif region == 'eastus' and 29 <= managed_disk_count < 57: return 3 * managed_disk_count * 5\n    elif region == 'eastus' and 57 <= managed_disk_count < 64: return 4 * managed_disk_count * 5\n    elif region == 'westus2' and 0 <= managed_disk_count < 27: return 1 * managed_disk_count * 6\n    elif region == 'westus2' and 27 <= managed_disk_count < 29: return 2 * managed_disk_count * 6\n    elif region == 'westus2' and 29 <= managed_disk_count < 57: return 3 * managed_disk_count * 6\n    elif region == 'westus2' and 57 <= managed_disk_count < 64: return 4 * managed_disk_count * 6\n    else: raise ValueError(f'region or managed_disk_count is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "managed_disk_count": {"unit": "disks", "description": "Count of managed disks attached", "dtype": "int"}}, "synonyms": ["disk charge", "managed storage fee", "block storage cost"], "charge_description": "Charge for managed disks based on type, size, and count."}, "data_egress_fee": {"description": "if egress_gb in [58519.7, 100000.0), charge is 1 \u00d7 egress_gb; if egress_gb in [43905.4, 58519.7), charge is 2 \u00d7 egress_gb; if egress_gb in [0.0, 43905.4), charge is 3 \u00d7 egress_gb The variable 'egress_gb' is measured in GB.", "code": "def compute_charge(data_egress_gb):\n    if 58519.7 <= data_egress_gb < 100000.0: return 1 * data_egress_gb\n    elif 43905.4 <= data_egress_gb < 58519.7: return 2 * data_egress_gb\n    elif 0.0 <= data_egress_gb < 43905.4: return 3 * data_egress_gb\n    else: raise ValueError(f'data_egress_gb is out of expected range')", "variables_used": {"data_egress_gb": {"unit": "GB", "description": "Outbound data transferred from Azure", "dtype": "float"}}, "synonyms": ["egress charge", "outbound data fee", "data transfer out"], "charge_description": "Charge for data leaving Azure regions."}, "data_ingress_fee": {"description": "data_ingress_fee conditions by geo_region and data_transfer_in_gb:\n\nfor uk_south the following charges apply:\n  - if data_transfer_in_gb in [0.0, 5869.6), charge is 1.0 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [5869.6, 36747.3), charge is 2.0 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [36747.3, 94677.5), charge is 3.0 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [94677.5, 100000.0), charge is 4.0 \u00d7 data_transfer_in_gb\nfor uk_west the following charges apply:\n  - if data_transfer_in_gb in [0.0, 5869.6), charge is 1.1 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [5869.6, 36747.3), charge is 2.2 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [36747.3, 94677.5), charge is 3.3 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [94677.5, 100000.0), charge is 4.4 \u00d7 data_transfer_in_gb\nfor westeurope the following charges apply:\n  - if data_transfer_in_gb in [0.0, 5869.6), charge is 1.2 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [5869.6, 36747.3), charge is 2.4 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [36747.3, 94677.5), charge is 3.6 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [94677.5, 100000.0), charge is 4.8 \u00d7 data_transfer_in_gb\nfor northeurope the following charges apply:\n  - if data_transfer_in_gb in [0.0, 5869.6), charge is 1.3 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [5869.6, 36747.3), charge is 2.6 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [36747.3, 94677.5), charge is 3.9 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [94677.5, 100000.0), charge is 5.2 \u00d7 data_transfer_in_gb\nfor eastus the following charges apply:\n  - if data_transfer_in_gb in [0.0, 5869.6), charge is 1.4 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [5869.6, 36747.3), charge is 2.8 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [36747.3, 94677.5), charge is 4.2 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [94677.5, 100000.0), charge is 5.6 \u00d7 data_transfer_in_gb\nfor westus2 the following charges apply:\n  - if data_transfer_in_gb in [0.0, 5869.6), charge is 1.5 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [5869.6, 36747.3), charge is 3.0 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [36747.3, 94677.5), charge is 4.5 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [94677.5, 100000.0), charge is 6.0 \u00d7 data_transfer_in_gb", "code": "def compute_charge(region, data_ingress_gb):\n    if region == 'uk_south' and 0.0 <= data_ingress_gb < 5869.6: return 1 * data_ingress_gb * 1.0\n    elif region == 'uk_south' and 5869.6 <= data_ingress_gb < 36747.3: return 2 * data_ingress_gb * 1.0\n    elif region == 'uk_south' and 36747.3 <= data_ingress_gb < 94677.5: return 3 * data_ingress_gb * 1.0\n    elif region == 'uk_south' and 94677.5 <= data_ingress_gb < 100000.0: return 4 * data_ingress_gb * 1.0\n    elif region == 'uk_west' and 0.0 <= data_ingress_gb < 5869.6: return 1 * data_ingress_gb * 1.1\n    elif region == 'uk_west' and 5869.6 <= data_ingress_gb < 36747.3: return 2 * data_ingress_gb * 1.1\n    elif region == 'uk_west' and 36747.3 <= data_ingress_gb < 94677.5: return 3 * data_ingress_gb * 1.1\n    elif region == 'uk_west' and 94677.5 <= data_ingress_gb < 100000.0: return 4 * data_ingress_gb * 1.1\n    elif region == 'westeurope' and 0.0 <= data_ingress_gb < 5869.6: return 1 * data_ingress_gb * 1.2\n    elif region == 'westeurope' and 5869.6 <= data_ingress_gb < 36747.3: return 2 * data_ingress_gb * 1.2\n    elif region == 'westeurope' and 36747.3 <= data_ingress_gb < 94677.5: return 3 * data_ingress_gb * 1.2\n    elif region == 'westeurope' and 94677.5 <= data_ingress_gb < 100000.0: return 4 * data_ingress_gb * 1.2\n    elif region == 'northeurope' and 0.0 <= data_ingress_gb < 5869.6: return 1 * data_ingress_gb * 1.3\n    elif region == 'northeurope' and 5869.6 <= data_ingress_gb < 36747.3: return 2 * data_ingress_gb * 1.3\n    elif region == 'northeurope' and 36747.3 <= data_ingress_gb < 94677.5: return 3 * data_ingress_gb * 1.3\n    elif region == 'northeurope' and 94677.5 <= data_ingress_gb < 100000.0: return 4 * data_ingress_gb * 1.3\n    elif region == 'eastus' and 0.0 <= data_ingress_gb < 5869.6: return 1 * data_ingress_gb * 1.4\n    elif region == 'eastus' and 5869.6 <= data_ingress_gb < 36747.3: return 2 * data_ingress_gb * 1.4\n    elif region == 'eastus' and 36747.3 <= data_ingress_gb < 94677.5: return 3 * data_ingress_gb * 1.4\n    elif region == 'eastus' and 94677.5 <= data_ingress_gb < 100000.0: return 4 * data_ingress_gb * 1.4\n    elif region == 'westus2' and 0.0 <= data_ingress_gb < 5869.6: return 1 * data_ingress_gb * 1.5\n    elif region == 'westus2' and 5869.6 <= data_ingress_gb < 36747.3: return 2 * data_ingress_gb * 1.5\n    elif region == 'westus2' and 36747.3 <= data_ingress_gb < 94677.5: return 3 * data_ingress_gb * 1.5\n    elif region == 'westus2' and 94677.5 <= data_ingress_gb < 100000.0: return 4 * data_ingress_gb * 1.5\n    else: raise ValueError(f'region or data_ingress_gb is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "data_ingress_gb": {"unit": "GB", "description": "Inbound data transferred to Azure", "dtype": "float"}}, "synonyms": ["ingress charge", "inbound data fee", "data transfer in"], "charge_description": "Charge for data entering Azure regions where applicable."}, "storage_transaction_fee": {"description": "storage_transaction_fee conditions by location and tx_millions:\n\nfor uk_south the following charges apply:\n  - if tx_millions in [482.5, 500.0), charge is 1.0 \u00d7 tx_millions\n  - if tx_millions in [0.0, 482.5), charge is 2.0 \u00d7 tx_millions\nfor uk_west the following charges apply:\n  - if tx_millions in [482.5, 500.0), charge is 1.1 \u00d7 tx_millions\n  - if tx_millions in [0.0, 482.5), charge is 2.2 \u00d7 tx_millions\nfor westeurope the following charges apply:\n  - if tx_millions in [482.5, 500.0), charge is 1.2 \u00d7 tx_millions\n  - if tx_millions in [0.0, 482.5), charge is 2.4 \u00d7 tx_millions\nfor northeurope the following charges apply:\n  - if tx_millions in [482.5, 500.0), charge is 1.3 \u00d7 tx_millions\n  - if tx_millions in [0.0, 482.5), charge is 2.6 \u00d7 tx_millions\nfor eastus the following charges apply:\n  - if tx_millions in [482.5, 500.0), charge is 1.4 \u00d7 tx_millions\n  - if tx_millions in [0.0, 482.5), charge is 2.8 \u00d7 tx_millions\nfor westus2 the following charges apply:\n  - if tx_millions in [482.5, 500.0), charge is 1.5 \u00d7 tx_millions\n  - if tx_millions in [0.0, 482.5), charge is 3.0 \u00d7 tx_millions", "code": "def compute_charge(region, storage_transactions_millions):\n    if region == 'uk_south' and 482.5 <= storage_transactions_millions < 500.0: return 1 * storage_transactions_millions * 1.0\n    elif region == 'uk_south' and 0.0 <= storage_transactions_millions < 482.5: return 2 * storage_transactions_millions * 1.0\n    elif region == 'uk_west' and 482.5 <= storage_transactions_millions < 500.0: return 1 * storage_transactions_millions * 1.1\n    elif region == 'uk_west' and 0.0 <= storage_transactions_millions < 482.5: return 2 * storage_transactions_millions * 1.1\n    elif region == 'westeurope' and 482.5 <= storage_transactions_millions < 500.0: return 1 * storage_transactions_millions * 1.2\n    elif region == 'westeurope' and 0.0 <= storage_transactions_millions < 482.5: return 2 * storage_transactions_millions * 1.2\n    elif region == 'northeurope' and 482.5 <= storage_transactions_millions < 500.0: return 1 * storage_transactions_millions * 1.3\n    elif region == 'northeurope' and 0.0 <= storage_transactions_millions < 482.5: return 2 * storage_transactions_millions * 1.3\n    elif region == 'eastus' and 482.5 <= storage_transactions_millions < 500.0: return 1 * storage_transactions_millions * 1.4\n    elif region == 'eastus' and 0.0 <= storage_transactions_millions < 482.5: return 2 * storage_transactions_millions * 1.4\n    elif region == 'westus2' and 482.5 <= storage_transactions_millions < 500.0: return 1 * storage_transactions_millions * 1.5\n    elif region == 'westus2' and 0.0 <= storage_transactions_millions < 482.5: return 2 * storage_transactions_millions * 1.5\n    else: raise ValueError(f'region or storage_transactions_millions is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "storage_transactions_millions": {"unit": "million tx", "description": "Number of storage account operations in millions", "dtype": "float"}}, "synonyms": ["storage ops fee", "transaction charge", "storage request cost"], "charge_description": "Charge for storage account transactions and redundancy level."}, "public_ip_fee": {"description": "if public_ips in [8, 100), charge is 1 \u00d7 public_ips; if public_ips in [5, 8), charge is 2 \u00d7 public_ips; if public_ips in [0, 5), charge is 3 \u00d7 public_ips The variable 'public_ips' is measured in IPs.", "code": "def compute_charge(public_ip_count):\n    if 8 <= public_ip_count < 100: return 1 * public_ip_count\n    elif 5 <= public_ip_count < 8: return 2 * public_ip_count\n    elif 0 <= public_ip_count < 5: return 3 * public_ip_count\n    else: raise ValueError(f'public_ip_count is out of expected range')", "variables_used": {"public_ip_count": {"unit": "IPs", "description": "Number of public IP addresses allocated", "dtype": "int"}}, "synonyms": ["ip address charge", "public ip cost", "elastic ip fee"], "charge_description": "Charge for public IP addresses allocated."}, "load_balancer_fee": {"description": "if location is 'westus2', charge is 1; if location is 'northeurope', charge is 2; if location is 'uk_west', charge is 3; if location is 'westeurope', charge is 4; if location is 'eastus', charge is 5; if location is 'uk_south', charge is 6 The variable 'location' is measured in location.", "code": "def compute_charge(region):\n    if region == 'westus2': return 1\n    elif region == 'northeurope': return 2\n    elif region == 'uk_west': return 3\n    elif region == 'westeurope': return 4\n    elif region == 'eastus': return 5\n    elif region == 'uk_south': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["lb fee", "balancer charge", "traffic distribution cost"], "charge_description": "Charge for load balancer rules and tier."}, "aks_cluster_fee": {"description": "aks_cluster_fee conditions by instance family and cluster_nodes:\n\nfor Dsv5 the following charges apply:\n  - if cluster_nodes in [664, 1000), charge is 1 \u00d7 cluster_nodes\n  - if cluster_nodes in [0, 664), charge is 2 \u00d7 cluster_nodes\nfor Esv5 the following charges apply:\n  - if cluster_nodes in [664, 1000), charge is 2 \u00d7 cluster_nodes\n  - if cluster_nodes in [0, 664), charge is 4 \u00d7 cluster_nodes\nfor Fsv2 the following charges apply:\n  - if cluster_nodes in [664, 1000), charge is 3 \u00d7 cluster_nodes\n  - if cluster_nodes in [0, 664), charge is 6 \u00d7 cluster_nodes\nfor Lsv3 the following charges apply:\n  - if cluster_nodes in [664, 1000), charge is 4 \u00d7 cluster_nodes\n  - if cluster_nodes in [0, 664), charge is 8 \u00d7 cluster_nodes\nfor NCasT4_v3 the following charges apply:\n  - if cluster_nodes in [664, 1000), charge is 5 \u00d7 cluster_nodes\n  - if cluster_nodes in [0, 664), charge is 10 \u00d7 cluster_nodes", "code": "def compute_charge(vm_family, kubernetes_node_count):\n    if vm_family == 'Dsv5' and 664 <= kubernetes_node_count < 1000: return 1 * kubernetes_node_count * 1\n    elif vm_family == 'Dsv5' and 0 <= kubernetes_node_count < 664: return 2 * kubernetes_node_count * 1\n    elif vm_family == 'Esv5' and 664 <= kubernetes_node_count < 1000: return 1 * kubernetes_node_count * 2\n    elif vm_family == 'Esv5' and 0 <= kubernetes_node_count < 664: return 2 * kubernetes_node_count * 2\n    elif vm_family == 'Fsv2' and 664 <= kubernetes_node_count < 1000: return 1 * kubernetes_node_count * 3\n    elif vm_family == 'Fsv2' and 0 <= kubernetes_node_count < 664: return 2 * kubernetes_node_count * 3\n    elif vm_family == 'Lsv3' and 664 <= kubernetes_node_count < 1000: return 1 * kubernetes_node_count * 4\n    elif vm_family == 'Lsv3' and 0 <= kubernetes_node_count < 664: return 2 * kubernetes_node_count * 4\n    elif vm_family == 'NCasT4_v3' and 664 <= kubernetes_node_count < 1000: return 1 * kubernetes_node_count * 5\n    elif vm_family == 'NCasT4_v3' and 0 <= kubernetes_node_count < 664: return 2 * kubernetes_node_count * 5\n    else: raise ValueError(f'vm_family or kubernetes_node_count is out of expected range')", "variables_used": {"vm_family": {"unit": "family", "description": "Virtual machine family that defines CPU and memory profile", "dtype": "str"}, "kubernetes_node_count": {"unit": "nodes", "description": "Number of AKS nodes in the cluster", "dtype": "int"}}, "synonyms": ["kubernetes fee", "aks charge", "container cluster cost"], "charge_description": "Charge for AKS clusters based on node count and type."}, "function_app_fee": {"description": "if exec_time_ms in [0.1, 156576.5), charge is 1 \u00d7 exec_time_ms; if exec_time_ms in [156576.5, 296906.5), charge is 2 \u00d7 exec_time_ms; if exec_time_ms in [296906.5, 528130.5), charge is 3 \u00d7 exec_time_ms; if exec_time_ms in [528130.5, 600000.0), charge is 4 \u00d7 exec_time_ms The variable 'exec_time_ms' is measured in ms.", "code": "def compute_charge(function_exec_ms):\n    if 0.1 <= function_exec_ms < 156576.5: return 1 * function_exec_ms\n    elif 156576.5 <= function_exec_ms < 296906.5: return 2 * function_exec_ms\n    elif 296906.5 <= function_exec_ms < 528130.5: return 3 * function_exec_ms\n    elif 528130.5 <= function_exec_ms < 600000.0: return 4 * function_exec_ms\n    else: raise ValueError(f'function_exec_ms is out of expected range')", "variables_used": {"function_exec_ms": {"unit": "ms", "description": "Average or billed execution time per invocation", "dtype": "float"}}, "synonyms": ["faas charge", "functions cost", "serverless fee"], "charge_description": "Charge for serverless executions and execution time."}, "sql_database_fee": {"description": "if sku_tier is 'standard', charge is 1; if sku_tier is 'basic', charge is 2; if sku_tier is 'premium', charge is 3; if sku_tier is 'isolated', charge is 4 The variable 'sku_tier' is measured in tier.", "code": "def compute_charge(service_tier):\n    if service_tier == 'standard': return 1\n    elif service_tier == 'basic': return 2\n    elif service_tier == 'premium': return 3\n    elif service_tier == 'isolated': return 4\n    else: raise ValueError(f'Unknown value for service_tier: {service_tier}')", "variables_used": {"service_tier": {"unit": "tier", "description": "Service tier for managed services", "dtype": "str"}}, "synonyms": ["sql charge", "database fee", "sql managed instance cost"], "charge_description": "Charge for Azure SQL based on vCores, storage, and retention."}, "snapshot_storage_fee": {"description": "if image_snapshot_gb in [0.0, 31620.7), charge is 1 \u00d7 image_snapshot_gb; if image_snapshot_gb in [31620.7, 56763.2), charge is 2 \u00d7 image_snapshot_gb; if image_snapshot_gb in [56763.2, 57897.0), charge is 3 \u00d7 image_snapshot_gb; if image_snapshot_gb in [57897.0, 100000.0), charge is 4 \u00d7 image_snapshot_gb The variable 'image_snapshot_gb' is measured in GB.", "code": "def compute_charge(snapshot_gb):\n    if 0.0 <= snapshot_gb < 31620.7: return 1 * snapshot_gb\n    elif 31620.7 <= snapshot_gb < 56763.2: return 2 * snapshot_gb\n    elif 56763.2 <= snapshot_gb < 57897.0: return 3 * snapshot_gb\n    elif 57897.0 <= snapshot_gb < 100000.0: return 4 * snapshot_gb\n    else: raise ValueError(f'snapshot_gb is out of expected range')", "variables_used": {"snapshot_gb": {"unit": "GB", "description": "Total snapshot storage size", "dtype": "float"}}, "synonyms": ["snapshot fee", "backup snapshot cost", "image snapshot charge"], "charge_description": "Charge for snapshot storage volume and redundancy."}, "app_service_fee": {"description": "app_service_fee conditions by pricing_tier and app_instances:\n\nfor basic the following charges apply:\n  - if app_instances in [0, 86), charge is 1 \u00d7 app_instances\n  - if app_instances in [86, 130), charge is 2 \u00d7 app_instances\n  - if app_instances in [130, 186), charge is 3 \u00d7 app_instances\n  - if app_instances in [186, 200), charge is 4 \u00d7 app_instances\nfor standard the following charges apply:\n  - if app_instances in [0, 86), charge is 2 \u00d7 app_instances\n  - if app_instances in [86, 130), charge is 4 \u00d7 app_instances\n  - if app_instances in [130, 186), charge is 6 \u00d7 app_instances\n  - if app_instances in [186, 200), charge is 8 \u00d7 app_instances\nfor premium the following charges apply:\n  - if app_instances in [0, 86), charge is 3 \u00d7 app_instances\n  - if app_instances in [86, 130), charge is 6 \u00d7 app_instances\n  - if app_instances in [130, 186), charge is 9 \u00d7 app_instances\n  - if app_instances in [186, 200), charge is 12 \u00d7 app_instances\nfor isolated the following charges apply:\n  - if app_instances in [0, 86), charge is 4 \u00d7 app_instances\n  - if app_instances in [86, 130), charge is 8 \u00d7 app_instances\n  - if app_instances in [130, 186), charge is 12 \u00d7 app_instances\n  - if app_instances in [186, 200), charge is 16 \u00d7 app_instances", "code": "def compute_charge(service_tier, app_service_instances):\n    if service_tier == 'basic' and 0 <= app_service_instances < 86: return 1 * app_service_instances * 1\n    elif service_tier == 'basic' and 86 <= app_service_instances < 130: return 2 * app_service_instances * 1\n    elif service_tier == 'basic' and 130 <= app_service_instances < 186: return 3 * app_service_instances * 1\n    elif service_tier == 'basic' and 186 <= app_service_instances < 200: return 4 * app_service_instances * 1\n    elif service_tier == 'standard' and 0 <= app_service_instances < 86: return 1 * app_service_instances * 2\n    elif service_tier == 'standard' and 86 <= app_service_instances < 130: return 2 * app_service_instances * 2\n    elif service_tier == 'standard' and 130 <= app_service_instances < 186: return 3 * app_service_instances * 2\n    elif service_tier == 'standard' and 186 <= app_service_instances < 200: return 4 * app_service_instances * 2\n    elif service_tier == 'premium' and 0 <= app_service_instances < 86: return 1 * app_service_instances * 3\n    elif service_tier == 'premium' and 86 <= app_service_instances < 130: return 2 * app_service_instances * 3\n    elif service_tier == 'premium' and 130 <= app_service_instances < 186: return 3 * app_service_instances * 3\n    elif service_tier == 'premium' and 186 <= app_service_instances < 200: return 4 * app_service_instances * 3\n    elif service_tier == 'isolated' and 0 <= app_service_instances < 86: return 1 * app_service_instances * 4\n    elif service_tier == 'isolated' and 86 <= app_service_instances < 130: return 2 * app_service_instances * 4\n    elif service_tier == 'isolated' and 130 <= app_service_instances < 186: return 3 * app_service_instances * 4\n    elif service_tier == 'isolated' and 186 <= app_service_instances < 200: return 4 * app_service_instances * 4\n    else: raise ValueError(f'service_tier or app_service_instances is out of expected range')", "variables_used": {"service_tier": {"unit": "tier", "description": "Service tier for managed services", "dtype": "str"}, "app_service_instances": {"unit": "instances", "description": "Count of App Service instances", "dtype": "int"}}, "synonyms": ["app service charge", "web app fee", "app hosting cost"], "charge_description": "Charge for App Service instances and tier."}}]
["# Microsoft Azure Cloud Pricing Policy Document\n\nThis is the official pricing policy for Microsoft Azure, detailing the fee structure and pricing guidelines for cloud services offered by Microsoft Azure. The following document outlines the rates and terms applicable to all customers using Azure services, and is subject to change without notice. By utilizing Azure services, customers agree to be bound by these pricing policies.\n\n## **Compute VM Pricing**\n\nCompute VM Pricing is based on the selected VM series, size, and operating\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Runtime Hours</th>\n      <th>Charge (USD)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 254.1</td>\n      <td>4 \u00d7 runtime_hours</td>\n    </tr>\n    <tr>\n      <td>254.1 \u2013 355.7</td>\n      <td>3 \u00d7 runtime_hours</td>\n    </tr>\n    <tr>\n      <td>355.7 \u2013 521.7</td>\n      <td>2 \u00d7 runtime_hours</td>\n    </tr>\n    <tr>\n      <td>521.7 \u2013 744.0</td>\n      <td>1 \u00d7 runtime_hours</td>\n    </tr>\n  </tbody>\n</table>\n\n## **GPU Compute Fee: Pricing for GPU-based Virtual Machines and Services in Microsoft Azure**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Geo Region</th>\n      <th>0 - 149.5 hours</th>\n      <th>149.5 - 257.6 hours</th>\n      <th>257.6 - 744 hours</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK South</td>\n      <td>$1.0 per hour</td>\n      <td>$2.0 per hour</td>\n      <td>$3.0 per hour</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>$1.1 per hour</td>\n      <td>$2.2 per hour</td>\n      <td>$3.3 per hour</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>$1.2 per hour</td>\n      <td>$2.4 per hour</td>\n      <td>$3.6 per hour</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>$1.3 per hour</td>\n      <td>$2.6 per hour</td>\n      <td>$3.9 per hour</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>$1.4 per hour</td>\n      <td>$2.8 per hour</td>\n      <td>$4.2 per hour</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>$1.5 per hour</td>\n      <td>$3.0 per hour</td>\n      <td>$4.5 per hour</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Managed Disk Pricing**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Volume Size (GB)</th>\n      <th>Charge (USD per GB)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>30 \u2013 4824</td>\n      <td>$3.00 per GB</td>\n    </tr>\n    <tr>\n      <td>4825 \u2013 7156</td>\n      <td>$2.00 per GB</td>\n    </tr>\n    <tr>\n      <td>7157 \u2013 32767</td>\n      <td>$1.00 per GB</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Data Egress Fees for Microsoft Azure Services**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Charge</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>westus2</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>uk_west</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>uk_south</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <td>eastus</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <td>westeurope</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <td>northeurope</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Data Ingress Fees: Charges for Data Transferred into Azure Services**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Region</th>\n      <th>Fees (USD per GB)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK South</td>\n      <td>4.0 \u00d7 data_transfer_in_gb if 0.0 &lt;= data_transfer_in_gb &lt; 64979.6, 3.0 \u00d7 data_transfer_in_gb if 64979.6 &lt;= data_transfer_in_gb &lt; 82274.7, 2.0 \u00d7 data_transfer_in_gb if 82274.7 &lt;= data_transfer_in_gb &lt; 91488.2, 1.0 \u00d7 data_transfer_in_gb if 91488.2 &lt;= data_transfer_in_gb &lt; 100000.0</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>4.4 \u00d7 data_transfer_in_gb if 0.0 &lt;= data_transfer_in_gb &lt; 64979.6, 3.3 \u00d7 data_transfer_in_gb if 64979.6 &lt;= data_transfer_in_gb &lt; 82274.7, 2.2 \u00d7 data_transfer_in_gb if 82274.7 &lt;= data_transfer_in_gb &lt; 91488.2, 1.1 \u00d7 data_transfer_in_gb if 91488.2 &lt;= data_transfer_in_gb &lt; 100000.0</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>4.8 \u00d7 data_transfer_in_gb if 0.0 &lt;= data_transfer_in_gb &lt; 64979.6, 3.6 \u00d7 data_transfer_in_gb if 64979.6 &lt;= data_transfer_in_gb &lt; 82274.7, 2.4 \u00d7 data_transfer_in_gb if 82274.7 &lt;= data_transfer_in_gb &lt; 91488.2, 1.2 \u00d7 data_transfer_in_gb if 91488.2 &lt;= data_transfer_in_gb &lt; 100000.0</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>5.2 \u00d7 data_transfer_in_gb if 0.0 &lt;= data_transfer_in_gb &lt; 64979.6, 3.9 \u00d7 data_transfer_in_gb if 64979.6 &lt;= data_transfer_in_gb &lt; 82274.7, 2.6 \u00d7 data_transfer_in_gb if 82274.7 &lt;= data_transfer_in_gb &lt; 91488.2, 1.3 \u00d7 data_transfer_in_gb if 91488.2 &lt;= data_transfer_in_gb &lt; 100000.0</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>5.6 \u00d7 data_transfer_in_gb if 0.0 &lt;= data_transfer_in_gb &lt; 64979.6, 4.2 \u00d7 data_transfer_in_gb if 64979.6 &lt;= data_transfer_in_gb &lt; 82274.7, 2.8 \u00d7 data_transfer_in_gb if 82274.7 &lt;= data_transfer_in_gb &lt; 91488.2, 1.4 \u00d7 data_transfer_in_gb if 91488.2 &lt;= data_transfer_in_gb &lt; 100000.0</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>6.0 \u00d7 data_transfer_in_gb if 0.0 &lt;= data_transfer_in_gb &lt; 64979.6, 4.5 \u00d7 data_transfer_in_gb if 64979.6 &lt;= data_transfer_in_gb &lt; 82274.7, 3.0 \u00d7 data_transfer_in_gb if 82274.7 &lt;= data_transfer_in_gb &lt; 91488.2, 1.5 \u00d7 data_transfer_in_gb if 91488.2 &lt;= data_transfer_in_gb &lt; 100000.0</td>\n    </tr>\n  </tbody>\n</table>\n\n## Storage Transaction Fee: Charges for Storage Operations such as Read, Write, and Delete Operations on Azure Storage\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Charge</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>West Europe</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>UK South</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Public IP Addresses Pricing**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>IP Count</th>\n      <th>UK South</th>\n      <th>UK West</th>\n      <th>West Europe</th>\n      <th>North Europe</th>\n      <th>East US</th>\n      <th>West US 2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 - 21</td>\n      <td>$2 per IP / month</td>\n      <td>$4 per IP / month</td>\n      <td>$6 per IP / month</td>\n      <td>$8 per IP / month</td>\n      <td>$10 per IP / month</td>\n      <td>$12 per IP / month</td>\n    </tr>\n    <tr>\n      <td>22 - 99</td>\n      <td>$4 per IP / month</td>\n      <td>$8 per IP / month</td>\n      <td>$12 per IP / month</td>\n      <td>$16 per IP / month</td>\n      <td>$20 per IP / month</td>\n      <td>$24 per IP / month</td>\n    </tr>\n  </tbody>\n</table>\n\n## Load Balancer Pricing: Fees for Load Balancer Resources and Traffic Management Services.\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>BALANCER RULES</th>\n      <th>Basic</th>\n      <th>Standard</th>\n      <th>Premium</th>\n      <th>Isolated</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 - 46</td>\n      <td>$3.00 per rule</td>\n      <td>$6.00 per rule</td>\n      <td>$9.00 per rule</td>\n      <td>$12.00 per rule</td>\n    </tr>\n    <tr>\n      <td>47 - 114</td>\n      <td>$2.00 per rule</td>\n      <td>$4.00 per rule</td>\n      <td>$6.00 per rule</td>\n      <td>$8.00 per rule</td>\n    </tr>\n    <tr>\n      <td>115 - 200</td>\n      <td>$1.00 per rule</td>\n      <td>$2.00 per rule</td>\n      <td>$3.00 per rule</td>\n      <td>$4.00 per rule</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Azure Kubernetes Service (AKS) Cluster Pricing**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Geo Region</th>\n      <th>Cluster Nodes (0-82)</th>\n      <th>Cluster Nodes (82-203)</th>\n      <th>Cluster Nodes (203-575)</th>\n      <th>Cluster Nodes (575-1000)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK South</td>\n      <td>1 \u00d7 cluster_nodes</td>\n      <td>2 \u00d7 cluster_nodes</td>\n      <td>3 \u00d7 cluster_nodes</td>\n      <td>4 \u00d7 cluster_nodes</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>2 \u00d7 cluster_nodes</td>\n      <td>4 \u00d7 cluster_nodes</td>\n      <td>6 \u00d7 cluster_nodes</td>\n      <td>8 \u00d7 cluster_nodes</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>3 \u00d7 cluster_nodes</td>\n      <td>6 \u00d7 cluster_nodes</td>\n      <td>9 \u00d7 cluster_nodes</td>\n      <td>12 \u00d7 cluster_nodes</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>4 \u00d7 cluster_nodes</td>\n      <td>8 \u00d7 cluster_nodes</td>\n      <td>12 \u00d7 cluster_nodes</td>\n      <td>16 \u00d7 cluster_nodes</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>5 \u00d7 cluster_nodes</td>\n      <td>10 \u00d7 cluster_nodes</td>\n      <td>15 \u00d7 cluster_nodes</td>\n      <td>20 \u00d7 cluster_nodes</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>6 \u00d7 cluster_nodes</td>\n      <td>12 \u00d7 cluster_nodes</td>\n      <td>18 \u00d7 cluster_nodes</td>\n      <td>24 \u00d7 cluster_nodes</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Function App Pricing**\n\n**Function App Fees: Charges for Function App Usage and Scaling in Microsoft Azure\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Fee per 100k invocations</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK South</td>\n      <td>1.00 per 100k</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>2.00 per 100k</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>3.00 per 100k</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>4.00 per 100k</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>5.00 per 100k</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>6.00 per 100k</td>\n    </tr>\n  </tbody>\n</table>\n\n## **SQL Database Pricing**\n\nSQL Database Fee Overview\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Sku Tier</th>\n      <th>SQL Cores (0-72)</th>\n      <th>SQL Cores (73-127)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Basic</td>\n      <td>$1 per core</td>\n      <td>$2 per core</td>\n    </tr>\n    <tr>\n      <td>Standard</td>\n      <td>$2 per core</td>\n      <td>$4 per core</td>\n    </tr>\n    <tr>\n      <td>Premium</td>\n      <td>$3 per core</td>\n      <td>$6 per core</td>\n    </tr>\n    <tr>\n      <td>Isolated</td>\n      <td>$4 per core</td>\n      <td>$8 per core</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Azure Snapshot Storage Fee: Charges for Storing and Accessing Azure Disks and VHDs\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Storage Size (GB)</th>\n      <th>LRS</th>\n      <th>ZRS</th>\n      <th>GRS</th>\n      <th>GZRS</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0.0 \u2013 99,422.6</td>\n      <td>$1.00 per GB</td>\n      <td>$1.10 per GB</td>\n      <td>$1.20 per GB</td>\n      <td>$1.30 per GB</td>\n    </tr>\n    <tr>\n      <td>99,422.6 \u2013 100,000.0</td>\n      <td>$2.00 per GB</td>\n      <td>$2.20 per GB</td>\n      <td>$2.40 per GB</td>\n      <td>$2.60 per GB</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Azure App Service Pricing**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>App Service Fee</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>uk_south</td>\n      <td>1 \u00d7 instances (0-119), 2 \u00d7 instances (119-200)</td>\n    </tr>\n    <tr>\n      <td>uk_west</td>\n      <td>2 \u00d7 instances (0-119), 4 \u00d7 instances (119-200)</td>\n    </tr>\n    <tr>\n      <td>westeurope</td>\n      <td>3 \u00d7 instances (0-119), 6 \u00d7 instances (119-200)</td>\n    </tr>\n    <tr>\n      <td>northeurope</td>\n      <td>4 \u00d7 instances (0-119), 8 \u00d7 instances (119-200)</td>\n    </tr>\n    <tr>\n      <td>eastus</td>\n      <td>5 \u00d7 instances (0-119), 10 \u00d7 instances (119-200)</td>\n    </tr>\n    <tr>\n      <td>westus2</td>\n      <td>6 \u00d7 instances (0-119), 12 \u00d7 instances (119-200)</td>\n    </tr>\n  </tbody>\n</table>\n\nIn conclusion, the Microsoft Azure pricing policies outlined in this document provide a comprehensive framework for understanding the costs associated with utilizing Azure cloud services. It is essential to note that prices are subject to change and may vary based on region, usage, and other factors, so it is recommended to regularly review the Azure website for the most up-to-date pricing information. For any questions or concerns regarding Azure pricing, please contact Azure support through the Azure portal or by visiting the Azure website.\n\n**Policy Effective Date:** August 20, 2025\n\n", {"compute_vm_fee": {"description": "if runtime_hours in [521.7, 744.0), charge is 1 \u00d7 runtime_hours; if runtime_hours in [355.7, 521.7), charge is 2 \u00d7 runtime_hours; if runtime_hours in [254.1, 355.7), charge is 3 \u00d7 runtime_hours; if runtime_hours in [0.0, 254.1), charge is 4 \u00d7 runtime_hours The variable 'runtime_hours' is measured in hours.", "code": "def compute_charge(usage_hours):\n    if 521.7 <= usage_hours < 744.0: return 1 * usage_hours\n    elif 355.7 <= usage_hours < 521.7: return 2 * usage_hours\n    elif 254.1 <= usage_hours < 355.7: return 3 * usage_hours\n    elif 0.0 <= usage_hours < 254.1: return 4 * usage_hours\n    else: raise ValueError(f'usage_hours is out of expected range')", "variables_used": {"usage_hours": {"unit": "hours", "description": "Total runtime in hours over the billing window", "dtype": "float"}}, "synonyms": ["vm runtime charge", "compute instance fee", "virtual machine cost"], "charge_description": "Charge for running virtual machines based on vCPU, memory, OS, and commitment."}, "gpu_compute_fee": {"description": "gpu_compute_fee conditions by geo_region and runtime_hours:\n\nfor uk_south the following charges apply:\n  - if runtime_hours in [0.0, 149.5), charge is 1.0 \u00d7 runtime_hours\n  - if runtime_hours in [149.5, 257.6), charge is 2.0 \u00d7 runtime_hours\n  - if runtime_hours in [257.6, 744.0), charge is 3.0 \u00d7 runtime_hours\nfor uk_west the following charges apply:\n  - if runtime_hours in [0.0, 149.5), charge is 1.1 \u00d7 runtime_hours\n  - if runtime_hours in [149.5, 257.6), charge is 2.2 \u00d7 runtime_hours\n  - if runtime_hours in [257.6, 744.0), charge is 3.3 \u00d7 runtime_hours\nfor westeurope the following charges apply:\n  - if runtime_hours in [0.0, 149.5), charge is 1.2 \u00d7 runtime_hours\n  - if runtime_hours in [149.5, 257.6), charge is 2.4 \u00d7 runtime_hours\n  - if runtime_hours in [257.6, 744.0), charge is 3.6 \u00d7 runtime_hours\nfor northeurope the following charges apply:\n  - if runtime_hours in [0.0, 149.5), charge is 1.3 \u00d7 runtime_hours\n  - if runtime_hours in [149.5, 257.6), charge is 2.6 \u00d7 runtime_hours\n  - if runtime_hours in [257.6, 744.0), charge is 3.9 \u00d7 runtime_hours\nfor eastus the following charges apply:\n  - if runtime_hours in [0.0, 149.5), charge is 1.4 \u00d7 runtime_hours\n  - if runtime_hours in [149.5, 257.6), charge is 2.8 \u00d7 runtime_hours\n  - if runtime_hours in [257.6, 744.0), charge is 4.2 \u00d7 runtime_hours\nfor westus2 the following charges apply:\n  - if runtime_hours in [0.0, 149.5), charge is 1.5 \u00d7 runtime_hours\n  - if runtime_hours in [149.5, 257.6), charge is 3.0 \u00d7 runtime_hours\n  - if runtime_hours in [257.6, 744.0), charge is 4.5 \u00d7 runtime_hours", "code": "def compute_charge(region, usage_hours):\n    if region == 'uk_south' and 0.0 <= usage_hours < 149.5: return 1 * usage_hours * 1.0\n    elif region == 'uk_south' and 149.5 <= usage_hours < 257.6: return 2 * usage_hours * 1.0\n    elif region == 'uk_south' and 257.6 <= usage_hours < 744.0: return 3 * usage_hours * 1.0\n    elif region == 'uk_west' and 0.0 <= usage_hours < 149.5: return 1 * usage_hours * 1.1\n    elif region == 'uk_west' and 149.5 <= usage_hours < 257.6: return 2 * usage_hours * 1.1\n    elif region == 'uk_west' and 257.6 <= usage_hours < 744.0: return 3 * usage_hours * 1.1\n    elif region == 'westeurope' and 0.0 <= usage_hours < 149.5: return 1 * usage_hours * 1.2\n    elif region == 'westeurope' and 149.5 <= usage_hours < 257.6: return 2 * usage_hours * 1.2\n    elif region == 'westeurope' and 257.6 <= usage_hours < 744.0: return 3 * usage_hours * 1.2\n    elif region == 'northeurope' and 0.0 <= usage_hours < 149.5: return 1 * usage_hours * 1.3\n    elif region == 'northeurope' and 149.5 <= usage_hours < 257.6: return 2 * usage_hours * 1.3\n    elif region == 'northeurope' and 257.6 <= usage_hours < 744.0: return 3 * usage_hours * 1.3\n    elif region == 'eastus' and 0.0 <= usage_hours < 149.5: return 1 * usage_hours * 1.4\n    elif region == 'eastus' and 149.5 <= usage_hours < 257.6: return 2 * usage_hours * 1.4\n    elif region == 'eastus' and 257.6 <= usage_hours < 744.0: return 3 * usage_hours * 1.4\n    elif region == 'westus2' and 0.0 <= usage_hours < 149.5: return 1 * usage_hours * 1.5\n    elif region == 'westus2' and 149.5 <= usage_hours < 257.6: return 2 * usage_hours * 1.5\n    elif region == 'westus2' and 257.6 <= usage_hours < 744.0: return 3 * usage_hours * 1.5\n    else: raise ValueError(f'region or usage_hours is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "usage_hours": {"unit": "hours", "description": "Total runtime in hours over the billing window", "dtype": "float"}}, "synonyms": ["gpu instance fee", "accelerator charge", "gpu runtime cost"], "charge_description": "Charge for GPU-enabled compute usage."}, "managed_disk_fee": {"description": "if volume_size_gb in [7157, 32768), charge is 1 \u00d7 volume_size_gb; if volume_size_gb in [4825, 7157), charge is 2 \u00d7 volume_size_gb; if volume_size_gb in [30, 4825), charge is 3 \u00d7 volume_size_gb The variable 'volume_size_gb' is measured in GB.", "code": "def compute_charge(disk_size_gb):\n    if 7157 <= disk_size_gb < 32768: return 1 * disk_size_gb\n    elif 4825 <= disk_size_gb < 7157: return 2 * disk_size_gb\n    elif 30 <= disk_size_gb < 4825: return 3 * disk_size_gb\n    else: raise ValueError(f'disk_size_gb is out of expected range')", "variables_used": {"disk_size_gb": {"unit": "GB", "description": "Size of each managed disk", "dtype": "int"}}, "synonyms": ["disk charge", "managed storage fee", "block storage cost"], "charge_description": "Charge for managed disks based on type, size, and count."}, "data_egress_fee": {"description": "if location is 'westus2', charge is 1; if location is 'uk_west', charge is 2; if location is 'uk_south', charge is 3; if location is 'eastus', charge is 4; if location is 'westeurope', charge is 5; if location is 'northeurope', charge is 6 The variable 'location' is measured in location.", "code": "def compute_charge(region):\n    if region == 'westus2': return 1\n    elif region == 'uk_west': return 2\n    elif region == 'uk_south': return 3\n    elif region == 'eastus': return 4\n    elif region == 'westeurope': return 5\n    elif region == 'northeurope': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["egress charge", "outbound data fee", "data transfer out"], "charge_description": "Charge for data leaving Azure regions."}, "data_ingress_fee": {"description": "data_ingress_fee conditions by geo_region and data_transfer_in_gb:\n\nfor uk_south the following charges apply:\n  - if data_transfer_in_gb in [91488.2, 100000.0), charge is 1.0 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [82274.7, 91488.2), charge is 2.0 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [64979.6, 82274.7), charge is 3.0 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [0.0, 64979.6), charge is 4.0 \u00d7 data_transfer_in_gb\nfor uk_west the following charges apply:\n  - if data_transfer_in_gb in [91488.2, 100000.0), charge is 1.1 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [82274.7, 91488.2), charge is 2.2 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [64979.6, 82274.7), charge is 3.3 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [0.0, 64979.6), charge is 4.4 \u00d7 data_transfer_in_gb\nfor westeurope the following charges apply:\n  - if data_transfer_in_gb in [91488.2, 100000.0), charge is 1.2 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [82274.7, 91488.2), charge is 2.4 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [64979.6, 82274.7), charge is 3.6 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [0.0, 64979.6), charge is 4.8 \u00d7 data_transfer_in_gb\nfor northeurope the following charges apply:\n  - if data_transfer_in_gb in [91488.2, 100000.0), charge is 1.3 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [82274.7, 91488.2), charge is 2.6 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [64979.6, 82274.7), charge is 3.9 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [0.0, 64979.6), charge is 5.2 \u00d7 data_transfer_in_gb\nfor eastus the following charges apply:\n  - if data_transfer_in_gb in [91488.2, 100000.0), charge is 1.4 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [82274.7, 91488.2), charge is 2.8 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [64979.6, 82274.7), charge is 4.2 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [0.0, 64979.6), charge is 5.6 \u00d7 data_transfer_in_gb\nfor westus2 the following charges apply:\n  - if data_transfer_in_gb in [91488.2, 100000.0), charge is 1.5 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [82274.7, 91488.2), charge is 3.0 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [64979.6, 82274.7), charge is 4.5 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [0.0, 64979.6), charge is 6.0 \u00d7 data_transfer_in_gb", "code": "def compute_charge(region, data_ingress_gb):\n    if region == 'uk_south' and 91488.2 <= data_ingress_gb < 100000.0: return 1 * data_ingress_gb * 1.0\n    elif region == 'uk_south' and 82274.7 <= data_ingress_gb < 91488.2: return 2 * data_ingress_gb * 1.0\n    elif region == 'uk_south' and 64979.6 <= data_ingress_gb < 82274.7: return 3 * data_ingress_gb * 1.0\n    elif region == 'uk_south' and 0.0 <= data_ingress_gb < 64979.6: return 4 * data_ingress_gb * 1.0\n    elif region == 'uk_west' and 91488.2 <= data_ingress_gb < 100000.0: return 1 * data_ingress_gb * 1.1\n    elif region == 'uk_west' and 82274.7 <= data_ingress_gb < 91488.2: return 2 * data_ingress_gb * 1.1\n    elif region == 'uk_west' and 64979.6 <= data_ingress_gb < 82274.7: return 3 * data_ingress_gb * 1.1\n    elif region == 'uk_west' and 0.0 <= data_ingress_gb < 64979.6: return 4 * data_ingress_gb * 1.1\n    elif region == 'westeurope' and 91488.2 <= data_ingress_gb < 100000.0: return 1 * data_ingress_gb * 1.2\n    elif region == 'westeurope' and 82274.7 <= data_ingress_gb < 91488.2: return 2 * data_ingress_gb * 1.2\n    elif region == 'westeurope' and 64979.6 <= data_ingress_gb < 82274.7: return 3 * data_ingress_gb * 1.2\n    elif region == 'westeurope' and 0.0 <= data_ingress_gb < 64979.6: return 4 * data_ingress_gb * 1.2\n    elif region == 'northeurope' and 91488.2 <= data_ingress_gb < 100000.0: return 1 * data_ingress_gb * 1.3\n    elif region == 'northeurope' and 82274.7 <= data_ingress_gb < 91488.2: return 2 * data_ingress_gb * 1.3\n    elif region == 'northeurope' and 64979.6 <= data_ingress_gb < 82274.7: return 3 * data_ingress_gb * 1.3\n    elif region == 'northeurope' and 0.0 <= data_ingress_gb < 64979.6: return 4 * data_ingress_gb * 1.3\n    elif region == 'eastus' and 91488.2 <= data_ingress_gb < 100000.0: return 1 * data_ingress_gb * 1.4\n    elif region == 'eastus' and 82274.7 <= data_ingress_gb < 91488.2: return 2 * data_ingress_gb * 1.4\n    elif region == 'eastus' and 64979.6 <= data_ingress_gb < 82274.7: return 3 * data_ingress_gb * 1.4\n    elif region == 'eastus' and 0.0 <= data_ingress_gb < 64979.6: return 4 * data_ingress_gb * 1.4\n    elif region == 'westus2' and 91488.2 <= data_ingress_gb < 100000.0: return 1 * data_ingress_gb * 1.5\n    elif region == 'westus2' and 82274.7 <= data_ingress_gb < 91488.2: return 2 * data_ingress_gb * 1.5\n    elif region == 'westus2' and 64979.6 <= data_ingress_gb < 82274.7: return 3 * data_ingress_gb * 1.5\n    elif region == 'westus2' and 0.0 <= data_ingress_gb < 64979.6: return 4 * data_ingress_gb * 1.5\n    else: raise ValueError(f'region or data_ingress_gb is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "data_ingress_gb": {"unit": "GB", "description": "Inbound data transferred to Azure", "dtype": "float"}}, "synonyms": ["ingress charge", "inbound data fee", "data transfer in"], "charge_description": "Charge for data entering Azure regions where applicable."}, "storage_transaction_fee": {"description": "if location is 'westeurope', charge is 1; if location is 'northeurope', charge is 2; if location is 'uk_south', charge is 3; if location is 'eastus', charge is 4; if location is 'westus2', charge is 5; if location is 'uk_west', charge is 6 The variable 'location' is measured in location.", "code": "def compute_charge(region):\n    if region == 'westeurope': return 1\n    elif region == 'northeurope': return 2\n    elif region == 'uk_south': return 3\n    elif region == 'eastus': return 4\n    elif region == 'westus2': return 5\n    elif region == 'uk_west': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["storage ops fee", "transaction charge", "storage request cost"], "charge_description": "Charge for storage account transactions and redundancy level."}, "public_ip_fee": {"description": "public_ip_fee conditions by location and ip_count:\n\nfor uk_south the following charges apply:\n  - if ip_count in [0, 22), charge is 1 \u00d7 ip_count\n  - if ip_count in [22, 100), charge is 2 \u00d7 ip_count\nfor uk_west the following charges apply:\n  - if ip_count in [0, 22), charge is 2 \u00d7 ip_count\n  - if ip_count in [22, 100), charge is 4 \u00d7 ip_count\nfor westeurope the following charges apply:\n  - if ip_count in [0, 22), charge is 3 \u00d7 ip_count\n  - if ip_count in [22, 100), charge is 6 \u00d7 ip_count\nfor northeurope the following charges apply:\n  - if ip_count in [0, 22), charge is 4 \u00d7 ip_count\n  - if ip_count in [22, 100), charge is 8 \u00d7 ip_count\nfor eastus the following charges apply:\n  - if ip_count in [0, 22), charge is 5 \u00d7 ip_count\n  - if ip_count in [22, 100), charge is 10 \u00d7 ip_count\nfor westus2 the following charges apply:\n  - if ip_count in [0, 22), charge is 6 \u00d7 ip_count\n  - if ip_count in [22, 100), charge is 12 \u00d7 ip_count", "code": "def compute_charge(region, public_ip_count):\n    if region == 'uk_south' and 0 <= public_ip_count < 22: return 1 * public_ip_count * 1\n    elif region == 'uk_south' and 22 <= public_ip_count < 100: return 2 * public_ip_count * 1\n    elif region == 'uk_west' and 0 <= public_ip_count < 22: return 1 * public_ip_count * 2\n    elif region == 'uk_west' and 22 <= public_ip_count < 100: return 2 * public_ip_count * 2\n    elif region == 'westeurope' and 0 <= public_ip_count < 22: return 1 * public_ip_count * 3\n    elif region == 'westeurope' and 22 <= public_ip_count < 100: return 2 * public_ip_count * 3\n    elif region == 'northeurope' and 0 <= public_ip_count < 22: return 1 * public_ip_count * 4\n    elif region == 'northeurope' and 22 <= public_ip_count < 100: return 2 * public_ip_count * 4\n    elif region == 'eastus' and 0 <= public_ip_count < 22: return 1 * public_ip_count * 5\n    elif region == 'eastus' and 22 <= public_ip_count < 100: return 2 * public_ip_count * 5\n    elif region == 'westus2' and 0 <= public_ip_count < 22: return 1 * public_ip_count * 6\n    elif region == 'westus2' and 22 <= public_ip_count < 100: return 2 * public_ip_count * 6\n    else: raise ValueError(f'region or public_ip_count is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "public_ip_count": {"unit": "IPs", "description": "Number of public IP addresses allocated", "dtype": "int"}}, "synonyms": ["ip address charge", "public ip cost", "elastic ip fee"], "charge_description": "Charge for public IP addresses allocated."}, "load_balancer_fee": {"description": "load_balancer_fee conditions by sku_tier and balancer_rules:\n\nfor basic the following charges apply:\n  - if balancer_rules in [115, 200), charge is 1 \u00d7 balancer_rules\n  - if balancer_rules in [47, 115), charge is 2 \u00d7 balancer_rules\n  - if balancer_rules in [0, 47), charge is 3 \u00d7 balancer_rules\nfor standard the following charges apply:\n  - if balancer_rules in [115, 200), charge is 2 \u00d7 balancer_rules\n  - if balancer_rules in [47, 115), charge is 4 \u00d7 balancer_rules\n  - if balancer_rules in [0, 47), charge is 6 \u00d7 balancer_rules\nfor premium the following charges apply:\n  - if balancer_rules in [115, 200), charge is 3 \u00d7 balancer_rules\n  - if balancer_rules in [47, 115), charge is 6 \u00d7 balancer_rules\n  - if balancer_rules in [0, 47), charge is 9 \u00d7 balancer_rules\nfor isolated the following charges apply:\n  - if balancer_rules in [115, 200), charge is 4 \u00d7 balancer_rules\n  - if balancer_rules in [47, 115), charge is 8 \u00d7 balancer_rules\n  - if balancer_rules in [0, 47), charge is 12 \u00d7 balancer_rules", "code": "def compute_charge(service_tier, load_balancer_rules):\n    if service_tier == 'basic' and 115 <= load_balancer_rules < 200: return 1 * load_balancer_rules * 1\n    elif service_tier == 'basic' and 47 <= load_balancer_rules < 115: return 2 * load_balancer_rules * 1\n    elif service_tier == 'basic' and 0 <= load_balancer_rules < 47: return 3 * load_balancer_rules * 1\n    elif service_tier == 'standard' and 115 <= load_balancer_rules < 200: return 1 * load_balancer_rules * 2\n    elif service_tier == 'standard' and 47 <= load_balancer_rules < 115: return 2 * load_balancer_rules * 2\n    elif service_tier == 'standard' and 0 <= load_balancer_rules < 47: return 3 * load_balancer_rules * 2\n    elif service_tier == 'premium' and 115 <= load_balancer_rules < 200: return 1 * load_balancer_rules * 3\n    elif service_tier == 'premium' and 47 <= load_balancer_rules < 115: return 2 * load_balancer_rules * 3\n    elif service_tier == 'premium' and 0 <= load_balancer_rules < 47: return 3 * load_balancer_rules * 3\n    elif service_tier == 'isolated' and 115 <= load_balancer_rules < 200: return 1 * load_balancer_rules * 4\n    elif service_tier == 'isolated' and 47 <= load_balancer_rules < 115: return 2 * load_balancer_rules * 4\n    elif service_tier == 'isolated' and 0 <= load_balancer_rules < 47: return 3 * load_balancer_rules * 4\n    else: raise ValueError(f'service_tier or load_balancer_rules is out of expected range')", "variables_used": {"service_tier": {"unit": "tier", "description": "Service tier for managed services", "dtype": "str"}, "load_balancer_rules": {"unit": "rules", "description": "Configured load balancer rules", "dtype": "int"}}, "synonyms": ["lb fee", "balancer charge", "traffic distribution cost"], "charge_description": "Charge for load balancer rules and tier."}, "aks_cluster_fee": {"description": "aks_cluster_fee conditions by geo_region and cluster_nodes:\n\nfor uk_south the following charges apply:\n  - if cluster_nodes in [0, 82), charge is 1 \u00d7 cluster_nodes\n  - if cluster_nodes in [82, 203), charge is 2 \u00d7 cluster_nodes\n  - if cluster_nodes in [203, 575), charge is 3 \u00d7 cluster_nodes\n  - if cluster_nodes in [575, 1000), charge is 4 \u00d7 cluster_nodes\nfor uk_west the following charges apply:\n  - if cluster_nodes in [0, 82), charge is 2 \u00d7 cluster_nodes\n  - if cluster_nodes in [82, 203), charge is 4 \u00d7 cluster_nodes\n  - if cluster_nodes in [203, 575), charge is 6 \u00d7 cluster_nodes\n  - if cluster_nodes in [575, 1000), charge is 8 \u00d7 cluster_nodes\nfor westeurope the following charges apply:\n  - if cluster_nodes in [0, 82), charge is 3 \u00d7 cluster_nodes\n  - if cluster_nodes in [82, 203), charge is 6 \u00d7 cluster_nodes\n  - if cluster_nodes in [203, 575), charge is 9 \u00d7 cluster_nodes\n  - if cluster_nodes in [575, 1000), charge is 12 \u00d7 cluster_nodes\nfor northeurope the following charges apply:\n  - if cluster_nodes in [0, 82), charge is 4 \u00d7 cluster_nodes\n  - if cluster_nodes in [82, 203), charge is 8 \u00d7 cluster_nodes\n  - if cluster_nodes in [203, 575), charge is 12 \u00d7 cluster_nodes\n  - if cluster_nodes in [575, 1000), charge is 16 \u00d7 cluster_nodes\nfor eastus the following charges apply:\n  - if cluster_nodes in [0, 82), charge is 5 \u00d7 cluster_nodes\n  - if cluster_nodes in [82, 203), charge is 10 \u00d7 cluster_nodes\n  - if cluster_nodes in [203, 575), charge is 15 \u00d7 cluster_nodes\n  - if cluster_nodes in [575, 1000), charge is 20 \u00d7 cluster_nodes\nfor westus2 the following charges apply:\n  - if cluster_nodes in [0, 82), charge is 6 \u00d7 cluster_nodes\n  - if cluster_nodes in [82, 203), charge is 12 \u00d7 cluster_nodes\n  - if cluster_nodes in [203, 575), charge is 18 \u00d7 cluster_nodes\n  - if cluster_nodes in [575, 1000), charge is 24 \u00d7 cluster_nodes", "code": "def compute_charge(region, kubernetes_node_count):\n    if region == 'uk_south' and 0 <= kubernetes_node_count < 82: return 1 * kubernetes_node_count * 1\n    elif region == 'uk_south' and 82 <= kubernetes_node_count < 203: return 2 * kubernetes_node_count * 1\n    elif region == 'uk_south' and 203 <= kubernetes_node_count < 575: return 3 * kubernetes_node_count * 1\n    elif region == 'uk_south' and 575 <= kubernetes_node_count < 1000: return 4 * kubernetes_node_count * 1\n    elif region == 'uk_west' and 0 <= kubernetes_node_count < 82: return 1 * kubernetes_node_count * 2\n    elif region == 'uk_west' and 82 <= kubernetes_node_count < 203: return 2 * kubernetes_node_count * 2\n    elif region == 'uk_west' and 203 <= kubernetes_node_count < 575: return 3 * kubernetes_node_count * 2\n    elif region == 'uk_west' and 575 <= kubernetes_node_count < 1000: return 4 * kubernetes_node_count * 2\n    elif region == 'westeurope' and 0 <= kubernetes_node_count < 82: return 1 * kubernetes_node_count * 3\n    elif region == 'westeurope' and 82 <= kubernetes_node_count < 203: return 2 * kubernetes_node_count * 3\n    elif region == 'westeurope' and 203 <= kubernetes_node_count < 575: return 3 * kubernetes_node_count * 3\n    elif region == 'westeurope' and 575 <= kubernetes_node_count < 1000: return 4 * kubernetes_node_count * 3\n    elif region == 'northeurope' and 0 <= kubernetes_node_count < 82: return 1 * kubernetes_node_count * 4\n    elif region == 'northeurope' and 82 <= kubernetes_node_count < 203: return 2 * kubernetes_node_count * 4\n    elif region == 'northeurope' and 203 <= kubernetes_node_count < 575: return 3 * kubernetes_node_count * 4\n    elif region == 'northeurope' and 575 <= kubernetes_node_count < 1000: return 4 * kubernetes_node_count * 4\n    elif region == 'eastus' and 0 <= kubernetes_node_count < 82: return 1 * kubernetes_node_count * 5\n    elif region == 'eastus' and 82 <= kubernetes_node_count < 203: return 2 * kubernetes_node_count * 5\n    elif region == 'eastus' and 203 <= kubernetes_node_count < 575: return 3 * kubernetes_node_count * 5\n    elif region == 'eastus' and 575 <= kubernetes_node_count < 1000: return 4 * kubernetes_node_count * 5\n    elif region == 'westus2' and 0 <= kubernetes_node_count < 82: return 1 * kubernetes_node_count * 6\n    elif region == 'westus2' and 82 <= kubernetes_node_count < 203: return 2 * kubernetes_node_count * 6\n    elif region == 'westus2' and 203 <= kubernetes_node_count < 575: return 3 * kubernetes_node_count * 6\n    elif region == 'westus2' and 575 <= kubernetes_node_count < 1000: return 4 * kubernetes_node_count * 6\n    else: raise ValueError(f'region or kubernetes_node_count is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "kubernetes_node_count": {"unit": "nodes", "description": "Number of AKS nodes in the cluster", "dtype": "int"}}, "synonyms": ["kubernetes fee", "aks charge", "container cluster cost"], "charge_description": "Charge for AKS clusters based on node count and type."}, "function_app_fee": {"description": "function_app_fee conditions by location and invocations:\n\nfor uk_south the following charges apply:\n  - if invocations in [303815497, 1000000000), charge is 1 \u00d7 invocations\n  - if invocations in [292785110, 303815497), charge is 2 \u00d7 invocations\n  - if invocations in [0, 292785110), charge is 3 \u00d7 invocations\nfor uk_west the following charges apply:\n  - if invocations in [303815497, 1000000000), charge is 2 \u00d7 invocations\n  - if invocations in [292785110, 303815497), charge is 4 \u00d7 invocations\n  - if invocations in [0, 292785110), charge is 6 \u00d7 invocations\nfor westeurope the following charges apply:\n  - if invocations in [303815497, 1000000000), charge is 3 \u00d7 invocations\n  - if invocations in [292785110, 303815497), charge is 6 \u00d7 invocations\n  - if invocations in [0, 292785110), charge is 9 \u00d7 invocations\nfor northeurope the following charges apply:\n  - if invocations in [303815497, 1000000000), charge is 4 \u00d7 invocations\n  - if invocations in [292785110, 303815497), charge is 8 \u00d7 invocations\n  - if invocations in [0, 292785110), charge is 12 \u00d7 invocations\nfor eastus the following charges apply:\n  - if invocations in [303815497, 1000000000), charge is 5 \u00d7 invocations\n  - if invocations in [292785110, 303815497), charge is 10 \u00d7 invocations\n  - if invocations in [0, 292785110), charge is 15 \u00d7 invocations\nfor westus2 the following charges apply:\n  - if invocations in [303815497, 1000000000), charge is 6 \u00d7 invocations\n  - if invocations in [292785110, 303815497), charge is 12 \u00d7 invocations\n  - if invocations in [0, 292785110), charge is 18 \u00d7 invocations", "code": "def compute_charge(region, function_executions):\n    if region == 'uk_south' and 303815497 <= function_executions < 1000000000: return 1 * function_executions * 1\n    elif region == 'uk_south' and 292785110 <= function_executions < 303815497: return 2 * function_executions * 1\n    elif region == 'uk_south' and 0 <= function_executions < 292785110: return 3 * function_executions * 1\n    elif region == 'uk_west' and 303815497 <= function_executions < 1000000000: return 1 * function_executions * 2\n    elif region == 'uk_west' and 292785110 <= function_executions < 303815497: return 2 * function_executions * 2\n    elif region == 'uk_west' and 0 <= function_executions < 292785110: return 3 * function_executions * 2\n    elif region == 'westeurope' and 303815497 <= function_executions < 1000000000: return 1 * function_executions * 3\n    elif region == 'westeurope' and 292785110 <= function_executions < 303815497: return 2 * function_executions * 3\n    elif region == 'westeurope' and 0 <= function_executions < 292785110: return 3 * function_executions * 3\n    elif region == 'northeurope' and 303815497 <= function_executions < 1000000000: return 1 * function_executions * 4\n    elif region == 'northeurope' and 292785110 <= function_executions < 303815497: return 2 * function_executions * 4\n    elif region == 'northeurope' and 0 <= function_executions < 292785110: return 3 * function_executions * 4\n    elif region == 'eastus' and 303815497 <= function_executions < 1000000000: return 1 * function_executions * 5\n    elif region == 'eastus' and 292785110 <= function_executions < 303815497: return 2 * function_executions * 5\n    elif region == 'eastus' and 0 <= function_executions < 292785110: return 3 * function_executions * 5\n    elif region == 'westus2' and 303815497 <= function_executions < 1000000000: return 1 * function_executions * 6\n    elif region == 'westus2' and 292785110 <= function_executions < 303815497: return 2 * function_executions * 6\n    elif region == 'westus2' and 0 <= function_executions < 292785110: return 3 * function_executions * 6\n    else: raise ValueError(f'region or function_executions is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "function_executions": {"unit": "invocations", "description": "Number of serverless function calls", "dtype": "int"}}, "synonyms": ["faas charge", "functions cost", "serverless fee"], "charge_description": "Charge for serverless executions and execution time."}, "sql_database_fee": {"description": "sql_database_fee conditions by sku_tier and sql_cores:\n\nfor basic the following charges apply:\n  - if sql_cores in [0, 73), charge is 1 \u00d7 sql_cores\n  - if sql_cores in [73, 128), charge is 2 \u00d7 sql_cores\nfor standard the following charges apply:\n  - if sql_cores in [0, 73), charge is 2 \u00d7 sql_cores\n  - if sql_cores in [73, 128), charge is 4 \u00d7 sql_cores\nfor premium the following charges apply:\n  - if sql_cores in [0, 73), charge is 3 \u00d7 sql_cores\n  - if sql_cores in [73, 128), charge is 6 \u00d7 sql_cores\nfor isolated the following charges apply:\n  - if sql_cores in [0, 73), charge is 4 \u00d7 sql_cores\n  - if sql_cores in [73, 128), charge is 8 \u00d7 sql_cores", "code": "def compute_charge(service_tier, sql_vcores):\n    if service_tier == 'basic' and 0 <= sql_vcores < 73: return 1 * sql_vcores * 1\n    elif service_tier == 'basic' and 73 <= sql_vcores < 128: return 2 * sql_vcores * 1\n    elif service_tier == 'standard' and 0 <= sql_vcores < 73: return 1 * sql_vcores * 2\n    elif service_tier == 'standard' and 73 <= sql_vcores < 128: return 2 * sql_vcores * 2\n    elif service_tier == 'premium' and 0 <= sql_vcores < 73: return 1 * sql_vcores * 3\n    elif service_tier == 'premium' and 73 <= sql_vcores < 128: return 2 * sql_vcores * 3\n    elif service_tier == 'isolated' and 0 <= sql_vcores < 73: return 1 * sql_vcores * 4\n    elif service_tier == 'isolated' and 73 <= sql_vcores < 128: return 2 * sql_vcores * 4\n    else: raise ValueError(f'service_tier or sql_vcores is out of expected range')", "variables_used": {"service_tier": {"unit": "tier", "description": "Service tier for managed services", "dtype": "str"}, "sql_vcores": {"unit": "vCores", "description": "vCore count for Azure SQL", "dtype": "int"}}, "synonyms": ["sql charge", "database fee", "sql managed instance cost"], "charge_description": "Charge for Azure SQL based on vCores, storage, and retention."}, "snapshot_storage_fee": {"description": "snapshot_storage_fee conditions by redundancy_mode and image_snapshot_gb:\n\nfor LRS the following charges apply:\n  - if image_snapshot_gb in [0.0, 99422.6), charge is 1.0 \u00d7 image_snapshot_gb\n  - if image_snapshot_gb in [99422.6, 100000.0), charge is 2.0 \u00d7 image_snapshot_gb\nfor ZRS the following charges apply:\n  - if image_snapshot_gb in [0.0, 99422.6), charge is 1.1 \u00d7 image_snapshot_gb\n  - if image_snapshot_gb in [99422.6, 100000.0), charge is 2.2 \u00d7 image_snapshot_gb\nfor GRS the following charges apply:\n  - if image_snapshot_gb in [0.0, 99422.6), charge is 1.2 \u00d7 image_snapshot_gb\n  - if image_snapshot_gb in [99422.6, 100000.0), charge is 2.4 \u00d7 image_snapshot_gb\nfor GZRS the following charges apply:\n  - if image_snapshot_gb in [0.0, 99422.6), charge is 1.3 \u00d7 image_snapshot_gb\n  - if image_snapshot_gb in [99422.6, 100000.0), charge is 2.6 \u00d7 image_snapshot_gb", "code": "def compute_charge(redundancy, snapshot_gb):\n    if redundancy == 'LRS' and 0.0 <= snapshot_gb < 99422.6: return 1 * snapshot_gb * 1.0\n    elif redundancy == 'LRS' and 99422.6 <= snapshot_gb < 100000.0: return 2 * snapshot_gb * 1.0\n    elif redundancy == 'ZRS' and 0.0 <= snapshot_gb < 99422.6: return 1 * snapshot_gb * 1.1\n    elif redundancy == 'ZRS' and 99422.6 <= snapshot_gb < 100000.0: return 2 * snapshot_gb * 1.1\n    elif redundancy == 'GRS' and 0.0 <= snapshot_gb < 99422.6: return 1 * snapshot_gb * 1.2\n    elif redundancy == 'GRS' and 99422.6 <= snapshot_gb < 100000.0: return 2 * snapshot_gb * 1.2\n    elif redundancy == 'GZRS' and 0.0 <= snapshot_gb < 99422.6: return 1 * snapshot_gb * 1.3\n    elif redundancy == 'GZRS' and 99422.6 <= snapshot_gb < 100000.0: return 2 * snapshot_gb * 1.3\n    else: raise ValueError(f'redundancy or snapshot_gb is out of expected range')", "variables_used": {"redundancy": {"unit": "redundancy", "description": "Storage redundancy configuration", "dtype": "str"}, "snapshot_gb": {"unit": "GB", "description": "Total snapshot storage size", "dtype": "float"}}, "synonyms": ["snapshot fee", "backup snapshot cost", "image snapshot charge"], "charge_description": "Charge for snapshot storage volume and redundancy."}, "app_service_fee": {"description": "app_service_fee conditions by location and webapp_instances:\n\nfor uk_south the following charges apply:\n  - if webapp_instances in [0, 119), charge is 1 \u00d7 webapp_instances\n  - if webapp_instances in [119, 200), charge is 2 \u00d7 webapp_instances\nfor uk_west the following charges apply:\n  - if webapp_instances in [0, 119), charge is 2 \u00d7 webapp_instances\n  - if webapp_instances in [119, 200), charge is 4 \u00d7 webapp_instances\nfor westeurope the following charges apply:\n  - if webapp_instances in [0, 119), charge is 3 \u00d7 webapp_instances\n  - if webapp_instances in [119, 200), charge is 6 \u00d7 webapp_instances\nfor northeurope the following charges apply:\n  - if webapp_instances in [0, 119), charge is 4 \u00d7 webapp_instances\n  - if webapp_instances in [119, 200), charge is 8 \u00d7 webapp_instances\nfor eastus the following charges apply:\n  - if webapp_instances in [0, 119), charge is 5 \u00d7 webapp_instances\n  - if webapp_instances in [119, 200), charge is 10 \u00d7 webapp_instances\nfor westus2 the following charges apply:\n  - if webapp_instances in [0, 119), charge is 6 \u00d7 webapp_instances\n  - if webapp_instances in [119, 200), charge is 12 \u00d7 webapp_instances", "code": "def compute_charge(region, app_service_instances):\n    if region == 'uk_south' and 0 <= app_service_instances < 119: return 1 * app_service_instances * 1\n    elif region == 'uk_south' and 119 <= app_service_instances < 200: return 2 * app_service_instances * 1\n    elif region == 'uk_west' and 0 <= app_service_instances < 119: return 1 * app_service_instances * 2\n    elif region == 'uk_west' and 119 <= app_service_instances < 200: return 2 * app_service_instances * 2\n    elif region == 'westeurope' and 0 <= app_service_instances < 119: return 1 * app_service_instances * 3\n    elif region == 'westeurope' and 119 <= app_service_instances < 200: return 2 * app_service_instances * 3\n    elif region == 'northeurope' and 0 <= app_service_instances < 119: return 1 * app_service_instances * 4\n    elif region == 'northeurope' and 119 <= app_service_instances < 200: return 2 * app_service_instances * 4\n    elif region == 'eastus' and 0 <= app_service_instances < 119: return 1 * app_service_instances * 5\n    elif region == 'eastus' and 119 <= app_service_instances < 200: return 2 * app_service_instances * 5\n    elif region == 'westus2' and 0 <= app_service_instances < 119: return 1 * app_service_instances * 6\n    elif region == 'westus2' and 119 <= app_service_instances < 200: return 2 * app_service_instances * 6\n    else: raise ValueError(f'region or app_service_instances is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "app_service_instances": {"unit": "instances", "description": "Count of App Service instances", "dtype": "int"}}, "synonyms": ["app service charge", "web app fee", "app hosting cost"], "charge_description": "Charge for App Service instances and tier."}}]
["# Microsoft Azure Cloud Pricing Policy Document\n\nThis is the official pricing policy document for Microsoft Azure, outlining the fee structure and pricing guidelines for cloud services provided in British Pounds (GBP). This document serves as a comprehensive guide to help customers understand the costs associated with using Azure services, enabling informed decision-making and effective budgeting. By adhering to this policy, customers can maximize the value of their Azure experience and optimize their cloud investments.\n\n## **Compute VM Pricing: Hourly and Monthly Rates for Virtual Machines and Virtual Machine Scale Sets**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>RAM Range (GB)</th>\n      <th>Linux (per GB)</th>\n      <th>Windows (per GB)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1 \u2013 382.9</td>\n      <td>1.0 \u00d7 GB</td>\n      <td>1.1 \u00d7 GB</td>\n    </tr>\n    <tr>\n      <td>382.9 \u2013 1680.5</td>\n      <td>2.0 \u00d7 GB</td>\n      <td>2.2 \u00d7 GB</td>\n    </tr>\n    <tr>\n      <td>1680.5 \u2013 1795.7</td>\n      <td>3.0 \u00d7 GB</td>\n      <td>3.3 \u00d7 GB</td>\n    </tr>\n    <tr>\n      <td>1795.7 \u2013 2048.0</td>\n      <td>4.0 \u00d7 GB</td>\n      <td>4.4 \u00d7 GB</td>\n    </tr>\n  </tbody>\n</table>\n\n## **GPU Compute Fee**\n\nPricing for GPU-based compute services in Azure, including NVIDIA and AMD-based\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>GPU Units</th>\n      <th>Charge (GBP)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 5</td>\n      <td>\u00a32 per GPU</td>\n    </tr>\n    <tr>\n      <td>6 \u2013 7</td>\n      <td>\u00a31 per GPU</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Managed Disk Pricing**\n\nThis section outlines the pricing structure for managed disk services in Azure.\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Storage Type</th>\n      <th>0-15 Disks</th>\n      <th>16-44 Disks</th>\n      <th>45-46 Disks</th>\n      <th>47-63 Disks</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Standard HDD</td>\n      <td>\u00a31.00 per disk</td>\n      <td>\u00a32.00 per disk</td>\n      <td>\u00a33.00 per disk</td>\n      <td>\u00a34.00 per disk</td>\n    </tr>\n    <tr>\n      <td>Standard SSD</td>\n      <td>\u00a32.00 per disk</td>\n      <td>\u00a34.00 per disk</td>\n      <td>\u00a36.00 per disk</td>\n      <td>\u00a38.00 per disk</td>\n    </tr>\n    <tr>\n      <td>Premium SSD</td>\n      <td>\u00a33.00 per disk</td>\n      <td>\u00a36.00 per disk</td>\n      <td>\u00a39.00 per disk</td>\n      <td>\u00a312.00 per disk</td>\n    </tr>\n    <tr>\n      <td>Ultra SSD</td>\n      <td>\u00a34.00 per disk</td>\n      <td>\u00a38.00 per disk</td>\n      <td>\u00a312.00 per disk</td>\n      <td>\u00a316.00 per disk</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Data Egress Fees: Charges for Data Downloaded from Azure Storage and Services**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Geo Region</th>\n      <th>Charge (GBP per GB)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK South</td>\n      <td>\u00a32.00 per GB for 0 - 16366.2 GB, \u00a31.00 per GB for 16366.2 - 100000 GB</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>\u00a32.40 per GB for 0 - 16366.2 GB, \u00a31.10 per GB for 16366.2 - 100000 GB</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>\u00a32.88 per GB for 0 - 16366.2 GB, \u00a31.20 per GB for 16366.2 - 100000 GB</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>\u00a33.28 per GB for 0 - 16366.2 GB, \u00a31.30 per GB for 16366.2 - 100000 GB</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>\u00a33.68 per GB for 0 - 16366.2 GB, \u00a31.40 per GB for 16366.2 - 100000 GB</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>\u00a33.90 per GB for 0 - 16366.2 GB, \u00a31.50 per GB for 16366.2 - 100000 GB</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Data Ingress Fee Pricing** \n\n**Incoming Data Transfer Charges**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Charge (GBP per GB)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK South</td>\n      <td>\u00a30.70 per GB (0 - 41,042.5 GB), \u00a31.40 per GB (41,042.5 - 100,000 GB)</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>\u00a30.77 per GB (0 - 41,042.5 GB), \u00a31.84 per GB (41,042.5 - 100,000 GB)</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>\u00a30.84 per GB (0 - 41,042.5 GB), \u00a32.08 per GB (41,042.5 - 100,000 GB)</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>\u00a30.91 per GB (0 - 41,042.5 GB), \u00a32.32 per GB (41,042.5 - 100,000 GB)</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>\u00a31.00 per GB (0 - 41,042.5 GB), \u00a32.56 per GB (41,042.5 - 100,000 GB)</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>\u00a31.05 per GB (0 - 41,042.5 GB), \u00a33.00 per GB (41,042.5 - 100,000 GB)</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Storage Transaction Fees**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Replication</th>\n      <th>Charge</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>GZRS</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>LRS</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>GRS</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <td>ZRS</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n\n## Public IP Address Fees\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>IP Count</th>\n      <th>UK South</th>\n      <th>UK West</th>\n      <th>West Europe</th>\n      <th>North Europe</th>\n      <th>East US</th>\n      <th>West US 2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 25</td>\n      <td>\u00a31.00 per IP / month</td>\n      <td>\u00a32.00 per IP / month</td>\n      <td>\u00a33.00 per IP / month</td>\n      <td>\u00a34.00 per IP / month</td>\n      <td>\u00a35.00 per IP / month</td>\n      <td>\u00a36.00 per IP / month</td>\n    </tr>\n    <tr>\n      <td>26 \u2013 40</td>\n      <td>\u00a32.00 per IP / month</td>\n      <td>\u00a34.00 per IP / month</td>\n      <td>\u00a36.00 per IP / month</td>\n      <td>\u00a38.00 per IP / month</td>\n      <td>\u00a310.00 per IP / month</td>\n      <td>\u00a312.00 per IP / month</td>\n    </tr>\n    <tr>\n      <td>41 \u2013 57</td>\n      <td>\u00a33.00 per IP / month</td>\n      <td>\u00a36.00 per IP / month</td>\n      <td>\u00a39.00 per IP / month</td>\n      <td>\u00a312.00 per IP / month</td>\n      <td>\u00a315.00 per IP / month</td>\n      <td>\u00a318.00 per IP / month</td>\n    </tr>\n    <tr>\n      <td>58 \u2013 99</td>\n      <td>\u00a34.00 per IP / month</td>\n      <td>\u00a38.00 per IP / month</td>\n      <td>\u00a312.00 per IP / month</td>\n      <td>\u00a316.00 per IP / month</td>\n      <td>\u00a320.00 per IP / month</td>\n      <td>\u00a324.00 per IP / month</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Load Balancer Pricing**\n\nAzure Load Balancer pricing is based on data processed, with fees for\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Tier</th>\n      <th>Charge</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Isolated</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>Premium</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>Standard</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <td>Basic</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Azure Kubernetes Service (AKS) Cluster Pricing**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Node Type</th>\n      <th>Charge</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Spot</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>System</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>User</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Function App Pricing: Hourly and Monthly Charges for Azure Functions**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Function Calls</th>\n      <th>UK South</th>\n      <th>UK West</th>\n      <th>West Europe</th>\n      <th>North Europe</th>\n      <th>East US</th>\n      <th>West US 2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 523,682,615</td>\n      <td>1 \u00d7 calls</td>\n      <td>2 \u00d7 calls</td>\n      <td>3 \u00d7 calls</td>\n      <td>4 \u00d7 calls</td>\n      <td>5 \u00d7 calls</td>\n      <td>6 \u00d7 calls</td>\n    </tr>\n    <tr>\n      <td>523,682,616 \u2013 560,073,048</td>\n      <td>2 \u00d7 calls</td>\n      <td>4 \u00d7 calls</td>\n      <td>6 \u00d7 calls</td>\n      <td>8 \u00d7 calls</td>\n      <td>10 \u00d7 calls</td>\n      <td>12 \u00d7 calls</td>\n    </tr>\n    <tr>\n      <td>560,073,048 \u2013 705,334,636</td>\n      <td>3 \u00d7 calls</td>\n      <td>6 \u00d7 calls</td>\n      <td>9 \u00d7 calls</td>\n      <td>12 \u00d7 calls</td>\n      <td>15 \u00d7 calls</td>\n      <td>18 \u00d7 calls</td>\n    </tr>\n    <tr>\n      <td>705,334,636 \u2013 1,000,000,000</td>\n      <td>4 \u00d7 calls</td>\n      <td>8 \u00d7 calls</td>\n      <td>12 \u00d7 calls</td>\n      <td>16 \u00d7 calls</td>\n      <td>20 \u00d7 calls</td>\n      <td>24 \u00d7 calls</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Azure SQL Database Pricing and Service Fees**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>DB VCore</th>\n      <th>Basic</th>\n      <th>Standard</th>\n      <th>Premium</th>\n      <th>Isolated</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 5</td>\n      <td>\u00a31 per vCore / hour</td>\n      <td>\u00a32 per vCore / hour</td>\n      <td>\u00a33 per vCore / hour</td>\n      <td>\u00a34 per vCore / hour</td>\n    </tr>\n    <tr>\n      <td>6 \u2013 127</td>\n      <td>\u00a32 per vCore / hour</td>\n      <td>\u00a34 per vCore / hour</td>\n      <td>\u00a36 per vCore / hour</td>\n      <td>\u00a38 per vCore / hour</td>\n    </tr>\n  </tbody>\n</table>\n\n## Snapshot Storage Fee\n\nAzure Storage Pricing for Managed Disks and Data Lake Storage Gen2 Snapshots.\n\n**Location-Based Charge**\n\nThe Location-Based Charge is a pricing component applied to Azure services based on the region where resources are deployed. This charge is determined by the geographic location of the resource, as specified in the 'location' parameter.\n\nThe charge is calculated as follows:\n\n- 1 unit for resources deployed in the 'northeurope' location\n- 2 units for resources deployed in the 'uk_west' location\n- 3 units for resources deployed in the 'westeurope' location\n- 4 units for resources deployed in the 'eastus' location\n- 5 units for resources deployed in the 'uk_south' location\n- 6 units for resources deployed in the 'westus2' location\n\nThis charge is expressed in GBP and is applicable to all Azure services subject to location-based pricing.\n\n## **App Service Pricing: Calculate Costs for Web Apps, APIs, and Mobile Backends**\n\n**Location-Based Charge**\n\nThis charge applies to resources deployed in specific Azure regions. The charge is calculated based on the geographical location of the resource, measured in the 'location' variable. The charge is denominated in GBP.\n\n**Charge Calculation**\n\n| Location | Charge |\n| --- | --- |\n| uk_west | 1 |\n| westeurope | 2 |\n| westus2 | 3 |\n| eastus | 4 |\n| uk_south | 5 |\n| northeurope | 6 |\n\nThe charge is applied to each resource based on its corresponding location. For example, a resource deployed in the UK West region will incur a charge of 1 GBP, while a resource deployed in North Europe will incur a charge of 6 GBP.\n\nBy adopting these cloud pricing policies, customers can ensure a seamless and cost-effective experience with Microsoft Azure services in the United Kingdom. These policies outline the terms and conditions for billing, payment, and usage of various Azure services, providing transparency and clarity for customers. For any questions or concerns regarding these policies, please contact Azure Support at +44 800 692 7353 or submit a support request through the Azure portal.\n\n**Policy Effective Date:** August 20, 2025\n\n", {"compute_vm_fee": {"description": "compute_vm_fee conditions by operating_system and ram_gb:\n\nfor linux the following charges apply:\n  - if ram_gb in [1.0, 382.9), charge is 1.0 \u00d7 ram_gb\n  - if ram_gb in [382.9, 1680.5), charge is 2.0 \u00d7 ram_gb\n  - if ram_gb in [1680.5, 1795.7), charge is 3.0 \u00d7 ram_gb\n  - if ram_gb in [1795.7, 2048.0), charge is 4.0 \u00d7 ram_gb\nfor windows the following charges apply:\n  - if ram_gb in [1.0, 382.9), charge is 1.1 \u00d7 ram_gb\n  - if ram_gb in [382.9, 1680.5), charge is 2.2 \u00d7 ram_gb\n  - if ram_gb in [1680.5, 1795.7), charge is 3.3 \u00d7 ram_gb\n  - if ram_gb in [1795.7, 2048.0), charge is 4.4 \u00d7 ram_gb", "code": "def compute_charge(os_type, memory_gb):\n    if os_type == 'linux' and 1.0 <= memory_gb < 382.9: return 1 * memory_gb * 1.0\n    elif os_type == 'linux' and 382.9 <= memory_gb < 1680.5: return 2 * memory_gb * 1.0\n    elif os_type == 'linux' and 1680.5 <= memory_gb < 1795.7: return 3 * memory_gb * 1.0\n    elif os_type == 'linux' and 1795.7 <= memory_gb < 2048.0: return 4 * memory_gb * 1.0\n    elif os_type == 'windows' and 1.0 <= memory_gb < 382.9: return 1 * memory_gb * 1.1\n    elif os_type == 'windows' and 382.9 <= memory_gb < 1680.5: return 2 * memory_gb * 1.1\n    elif os_type == 'windows' and 1680.5 <= memory_gb < 1795.7: return 3 * memory_gb * 1.1\n    elif os_type == 'windows' and 1795.7 <= memory_gb < 2048.0: return 4 * memory_gb * 1.1\n    else: raise ValueError(f'os_type or memory_gb is out of expected range')", "variables_used": {"os_type": {"unit": "os", "description": "Operating system for the compute workload", "dtype": "str"}, "memory_gb": {"unit": "GiB", "description": "Amount of memory allocated to the instance", "dtype": "float"}}, "synonyms": ["vm runtime charge", "compute instance fee", "virtual machine cost"], "charge_description": "Charge for running virtual machines based on vCPU, memory, OS, and commitment."}, "gpu_compute_fee": {"description": "if gpu_units in [6, 8), charge is 1 \u00d7 gpu_units; if gpu_units in [0, 6), charge is 2 \u00d7 gpu_units The variable 'gpu_units' is measured in GPUs.", "code": "def compute_charge(gpu_count):\n    if 6 <= gpu_count < 8: return 1 * gpu_count\n    elif 0 <= gpu_count < 6: return 2 * gpu_count\n    else: raise ValueError(f'gpu_count is out of expected range')", "variables_used": {"gpu_count": {"unit": "GPUs", "description": "Number of GPUs attached to the instance", "dtype": "int"}}, "synonyms": ["gpu instance fee", "accelerator charge", "gpu runtime cost"], "charge_description": "Charge for GPU-enabled compute usage."}, "managed_disk_fee": {"description": "managed_disk_fee conditions by storage_type and num_disks:\n\nfor standard_hdd the following charges apply:\n  - if num_disks in [0, 16), charge is 1 \u00d7 num_disks\n  - if num_disks in [16, 45), charge is 2 \u00d7 num_disks\n  - if num_disks in [45, 47), charge is 3 \u00d7 num_disks\n  - if num_disks in [47, 64), charge is 4 \u00d7 num_disks\nfor standard_ssd the following charges apply:\n  - if num_disks in [0, 16), charge is 2 \u00d7 num_disks\n  - if num_disks in [16, 45), charge is 4 \u00d7 num_disks\n  - if num_disks in [45, 47), charge is 6 \u00d7 num_disks\n  - if num_disks in [47, 64), charge is 8 \u00d7 num_disks\nfor premium_ssd the following charges apply:\n  - if num_disks in [0, 16), charge is 3 \u00d7 num_disks\n  - if num_disks in [16, 45), charge is 6 \u00d7 num_disks\n  - if num_disks in [45, 47), charge is 9 \u00d7 num_disks\n  - if num_disks in [47, 64), charge is 12 \u00d7 num_disks\nfor ultra_ssd the following charges apply:\n  - if num_disks in [0, 16), charge is 4 \u00d7 num_disks\n  - if num_disks in [16, 45), charge is 8 \u00d7 num_disks\n  - if num_disks in [45, 47), charge is 12 \u00d7 num_disks\n  - if num_disks in [47, 64), charge is 16 \u00d7 num_disks", "code": "def compute_charge(disk_type, managed_disk_count):\n    if disk_type == 'standard_hdd' and 0 <= managed_disk_count < 16: return 1 * managed_disk_count * 1\n    elif disk_type == 'standard_hdd' and 16 <= managed_disk_count < 45: return 2 * managed_disk_count * 1\n    elif disk_type == 'standard_hdd' and 45 <= managed_disk_count < 47: return 3 * managed_disk_count * 1\n    elif disk_type == 'standard_hdd' and 47 <= managed_disk_count < 64: return 4 * managed_disk_count * 1\n    elif disk_type == 'standard_ssd' and 0 <= managed_disk_count < 16: return 1 * managed_disk_count * 2\n    elif disk_type == 'standard_ssd' and 16 <= managed_disk_count < 45: return 2 * managed_disk_count * 2\n    elif disk_type == 'standard_ssd' and 45 <= managed_disk_count < 47: return 3 * managed_disk_count * 2\n    elif disk_type == 'standard_ssd' and 47 <= managed_disk_count < 64: return 4 * managed_disk_count * 2\n    elif disk_type == 'premium_ssd' and 0 <= managed_disk_count < 16: return 1 * managed_disk_count * 3\n    elif disk_type == 'premium_ssd' and 16 <= managed_disk_count < 45: return 2 * managed_disk_count * 3\n    elif disk_type == 'premium_ssd' and 45 <= managed_disk_count < 47: return 3 * managed_disk_count * 3\n    elif disk_type == 'premium_ssd' and 47 <= managed_disk_count < 64: return 4 * managed_disk_count * 3\n    elif disk_type == 'ultra_ssd' and 0 <= managed_disk_count < 16: return 1 * managed_disk_count * 4\n    elif disk_type == 'ultra_ssd' and 16 <= managed_disk_count < 45: return 2 * managed_disk_count * 4\n    elif disk_type == 'ultra_ssd' and 45 <= managed_disk_count < 47: return 3 * managed_disk_count * 4\n    elif disk_type == 'ultra_ssd' and 47 <= managed_disk_count < 64: return 4 * managed_disk_count * 4\n    else: raise ValueError(f'disk_type or managed_disk_count is out of expected range')", "variables_used": {"disk_type": {"unit": "disk type", "description": "Managed disk performance tier", "dtype": "str"}, "managed_disk_count": {"unit": "disks", "description": "Count of managed disks attached", "dtype": "int"}}, "synonyms": ["disk charge", "managed storage fee", "block storage cost"], "charge_description": "Charge for managed disks based on type, size, and count."}, "data_egress_fee": {"description": "data_egress_fee conditions by geo_region and data_transfer_out_gb:\n\nfor uk_south the following charges apply:\n  - if data_transfer_out_gb in [16366.2, 100000.0), charge is 1.0 \u00d7 data_transfer_out_gb\n  - if data_transfer_out_gb in [0.0, 16366.2), charge is 2.0 \u00d7 data_transfer_out_gb\nfor uk_west the following charges apply:\n  - if data_transfer_out_gb in [16366.2, 100000.0), charge is 1.1 \u00d7 data_transfer_out_gb\n  - if data_transfer_out_gb in [0.0, 16366.2), charge is 2.2 \u00d7 data_transfer_out_gb\nfor westeurope the following charges apply:\n  - if data_transfer_out_gb in [16366.2, 100000.0), charge is 1.2 \u00d7 data_transfer_out_gb\n  - if data_transfer_out_gb in [0.0, 16366.2), charge is 2.4 \u00d7 data_transfer_out_gb\nfor northeurope the following charges apply:\n  - if data_transfer_out_gb in [16366.2, 100000.0), charge is 1.3 \u00d7 data_transfer_out_gb\n  - if data_transfer_out_gb in [0.0, 16366.2), charge is 2.6 \u00d7 data_transfer_out_gb\nfor eastus the following charges apply:\n  - if data_transfer_out_gb in [16366.2, 100000.0), charge is 1.4 \u00d7 data_transfer_out_gb\n  - if data_transfer_out_gb in [0.0, 16366.2), charge is 2.8 \u00d7 data_transfer_out_gb\nfor westus2 the following charges apply:\n  - if data_transfer_out_gb in [16366.2, 100000.0), charge is 1.5 \u00d7 data_transfer_out_gb\n  - if data_transfer_out_gb in [0.0, 16366.2), charge is 3.0 \u00d7 data_transfer_out_gb", "code": "def compute_charge(region, data_egress_gb):\n    if region == 'uk_south' and 16366.2 <= data_egress_gb < 100000.0: return 1 * data_egress_gb * 1.0\n    elif region == 'uk_south' and 0.0 <= data_egress_gb < 16366.2: return 2 * data_egress_gb * 1.0\n    elif region == 'uk_west' and 16366.2 <= data_egress_gb < 100000.0: return 1 * data_egress_gb * 1.1\n    elif region == 'uk_west' and 0.0 <= data_egress_gb < 16366.2: return 2 * data_egress_gb * 1.1\n    elif region == 'westeurope' and 16366.2 <= data_egress_gb < 100000.0: return 1 * data_egress_gb * 1.2\n    elif region == 'westeurope' and 0.0 <= data_egress_gb < 16366.2: return 2 * data_egress_gb * 1.2\n    elif region == 'northeurope' and 16366.2 <= data_egress_gb < 100000.0: return 1 * data_egress_gb * 1.3\n    elif region == 'northeurope' and 0.0 <= data_egress_gb < 16366.2: return 2 * data_egress_gb * 1.3\n    elif region == 'eastus' and 16366.2 <= data_egress_gb < 100000.0: return 1 * data_egress_gb * 1.4\n    elif region == 'eastus' and 0.0 <= data_egress_gb < 16366.2: return 2 * data_egress_gb * 1.4\n    elif region == 'westus2' and 16366.2 <= data_egress_gb < 100000.0: return 1 * data_egress_gb * 1.5\n    elif region == 'westus2' and 0.0 <= data_egress_gb < 16366.2: return 2 * data_egress_gb * 1.5\n    else: raise ValueError(f'region or data_egress_gb is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "data_egress_gb": {"unit": "GB", "description": "Outbound data transferred from Azure", "dtype": "float"}}, "synonyms": ["egress charge", "outbound data fee", "data transfer out"], "charge_description": "Charge for data leaving Azure regions."}, "data_ingress_fee": {"description": "data_ingress_fee conditions by location and ingress_gb:\n\nfor uk_south the following charges apply:\n  - if ingress_gb in [0.0, 41042.5), charge is 1.0 \u00d7 ingress_gb\n  - if ingress_gb in [41042.5, 100000.0), charge is 2.0 \u00d7 ingress_gb\nfor uk_west the following charges apply:\n  - if ingress_gb in [0.0, 41042.5), charge is 1.1 \u00d7 ingress_gb\n  - if ingress_gb in [41042.5, 100000.0), charge is 2.2 \u00d7 ingress_gb\nfor westeurope the following charges apply:\n  - if ingress_gb in [0.0, 41042.5), charge is 1.2 \u00d7 ingress_gb\n  - if ingress_gb in [41042.5, 100000.0), charge is 2.4 \u00d7 ingress_gb\nfor northeurope the following charges apply:\n  - if ingress_gb in [0.0, 41042.5), charge is 1.3 \u00d7 ingress_gb\n  - if ingress_gb in [41042.5, 100000.0), charge is 2.6 \u00d7 ingress_gb\nfor eastus the following charges apply:\n  - if ingress_gb in [0.0, 41042.5), charge is 1.4 \u00d7 ingress_gb\n  - if ingress_gb in [41042.5, 100000.0), charge is 2.8 \u00d7 ingress_gb\nfor westus2 the following charges apply:\n  - if ingress_gb in [0.0, 41042.5), charge is 1.5 \u00d7 ingress_gb\n  - if ingress_gb in [41042.5, 100000.0), charge is 3.0 \u00d7 ingress_gb", "code": "def compute_charge(region, data_ingress_gb):\n    if region == 'uk_south' and 0.0 <= data_ingress_gb < 41042.5: return 1 * data_ingress_gb * 1.0\n    elif region == 'uk_south' and 41042.5 <= data_ingress_gb < 100000.0: return 2 * data_ingress_gb * 1.0\n    elif region == 'uk_west' and 0.0 <= data_ingress_gb < 41042.5: return 1 * data_ingress_gb * 1.1\n    elif region == 'uk_west' and 41042.5 <= data_ingress_gb < 100000.0: return 2 * data_ingress_gb * 1.1\n    elif region == 'westeurope' and 0.0 <= data_ingress_gb < 41042.5: return 1 * data_ingress_gb * 1.2\n    elif region == 'westeurope' and 41042.5 <= data_ingress_gb < 100000.0: return 2 * data_ingress_gb * 1.2\n    elif region == 'northeurope' and 0.0 <= data_ingress_gb < 41042.5: return 1 * data_ingress_gb * 1.3\n    elif region == 'northeurope' and 41042.5 <= data_ingress_gb < 100000.0: return 2 * data_ingress_gb * 1.3\n    elif region == 'eastus' and 0.0 <= data_ingress_gb < 41042.5: return 1 * data_ingress_gb * 1.4\n    elif region == 'eastus' and 41042.5 <= data_ingress_gb < 100000.0: return 2 * data_ingress_gb * 1.4\n    elif region == 'westus2' and 0.0 <= data_ingress_gb < 41042.5: return 1 * data_ingress_gb * 1.5\n    elif region == 'westus2' and 41042.5 <= data_ingress_gb < 100000.0: return 2 * data_ingress_gb * 1.5\n    else: raise ValueError(f'region or data_ingress_gb is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "data_ingress_gb": {"unit": "GB", "description": "Inbound data transferred to Azure", "dtype": "float"}}, "synonyms": ["ingress charge", "inbound data fee", "data transfer in"], "charge_description": "Charge for data entering Azure regions where applicable."}, "storage_transaction_fee": {"description": "if replication is 'GZRS', charge is 1; if replication is 'LRS', charge is 2; if replication is 'GRS', charge is 3; if replication is 'ZRS', charge is 4 The variable 'replication' is measured in replication.", "code": "def compute_charge(redundancy):\n    if redundancy == 'GZRS': return 1\n    elif redundancy == 'LRS': return 2\n    elif redundancy == 'GRS': return 3\n    elif redundancy == 'ZRS': return 4\n    else: raise ValueError(f'Unknown value for redundancy: {redundancy}')", "variables_used": {"redundancy": {"unit": "redundancy", "description": "Storage redundancy configuration", "dtype": "str"}}, "synonyms": ["storage ops fee", "transaction charge", "storage request cost"], "charge_description": "Charge for storage account transactions and redundancy level."}, "public_ip_fee": {"description": "public_ip_fee conditions by location and ip_count:\n\nfor uk_south the following charges apply:\n  - if ip_count in [0, 26), charge is 1 \u00d7 ip_count\n  - if ip_count in [26, 41), charge is 2 \u00d7 ip_count\n  - if ip_count in [41, 58), charge is 3 \u00d7 ip_count\n  - if ip_count in [58, 100), charge is 4 \u00d7 ip_count\nfor uk_west the following charges apply:\n  - if ip_count in [0, 26), charge is 2 \u00d7 ip_count\n  - if ip_count in [26, 41), charge is 4 \u00d7 ip_count\n  - if ip_count in [41, 58), charge is 6 \u00d7 ip_count\n  - if ip_count in [58, 100), charge is 8 \u00d7 ip_count\nfor westeurope the following charges apply:\n  - if ip_count in [0, 26), charge is 3 \u00d7 ip_count\n  - if ip_count in [26, 41), charge is 6 \u00d7 ip_count\n  - if ip_count in [41, 58), charge is 9 \u00d7 ip_count\n  - if ip_count in [58, 100), charge is 12 \u00d7 ip_count\nfor northeurope the following charges apply:\n  - if ip_count in [0, 26), charge is 4 \u00d7 ip_count\n  - if ip_count in [26, 41), charge is 8 \u00d7 ip_count\n  - if ip_count in [41, 58), charge is 12 \u00d7 ip_count\n  - if ip_count in [58, 100), charge is 16 \u00d7 ip_count\nfor eastus the following charges apply:\n  - if ip_count in [0, 26), charge is 5 \u00d7 ip_count\n  - if ip_count in [26, 41), charge is 10 \u00d7 ip_count\n  - if ip_count in [41, 58), charge is 15 \u00d7 ip_count\n  - if ip_count in [58, 100), charge is 20 \u00d7 ip_count\nfor westus2 the following charges apply:\n  - if ip_count in [0, 26), charge is 6 \u00d7 ip_count\n  - if ip_count in [26, 41), charge is 12 \u00d7 ip_count\n  - if ip_count in [41, 58), charge is 18 \u00d7 ip_count\n  - if ip_count in [58, 100), charge is 24 \u00d7 ip_count", "code": "def compute_charge(region, public_ip_count):\n    if region == 'uk_south' and 0 <= public_ip_count < 26: return 1 * public_ip_count * 1\n    elif region == 'uk_south' and 26 <= public_ip_count < 41: return 2 * public_ip_count * 1\n    elif region == 'uk_south' and 41 <= public_ip_count < 58: return 3 * public_ip_count * 1\n    elif region == 'uk_south' and 58 <= public_ip_count < 100: return 4 * public_ip_count * 1\n    elif region == 'uk_west' and 0 <= public_ip_count < 26: return 1 * public_ip_count * 2\n    elif region == 'uk_west' and 26 <= public_ip_count < 41: return 2 * public_ip_count * 2\n    elif region == 'uk_west' and 41 <= public_ip_count < 58: return 3 * public_ip_count * 2\n    elif region == 'uk_west' and 58 <= public_ip_count < 100: return 4 * public_ip_count * 2\n    elif region == 'westeurope' and 0 <= public_ip_count < 26: return 1 * public_ip_count * 3\n    elif region == 'westeurope' and 26 <= public_ip_count < 41: return 2 * public_ip_count * 3\n    elif region == 'westeurope' and 41 <= public_ip_count < 58: return 3 * public_ip_count * 3\n    elif region == 'westeurope' and 58 <= public_ip_count < 100: return 4 * public_ip_count * 3\n    elif region == 'northeurope' and 0 <= public_ip_count < 26: return 1 * public_ip_count * 4\n    elif region == 'northeurope' and 26 <= public_ip_count < 41: return 2 * public_ip_count * 4\n    elif region == 'northeurope' and 41 <= public_ip_count < 58: return 3 * public_ip_count * 4\n    elif region == 'northeurope' and 58 <= public_ip_count < 100: return 4 * public_ip_count * 4\n    elif region == 'eastus' and 0 <= public_ip_count < 26: return 1 * public_ip_count * 5\n    elif region == 'eastus' and 26 <= public_ip_count < 41: return 2 * public_ip_count * 5\n    elif region == 'eastus' and 41 <= public_ip_count < 58: return 3 * public_ip_count * 5\n    elif region == 'eastus' and 58 <= public_ip_count < 100: return 4 * public_ip_count * 5\n    elif region == 'westus2' and 0 <= public_ip_count < 26: return 1 * public_ip_count * 6\n    elif region == 'westus2' and 26 <= public_ip_count < 41: return 2 * public_ip_count * 6\n    elif region == 'westus2' and 41 <= public_ip_count < 58: return 3 * public_ip_count * 6\n    elif region == 'westus2' and 58 <= public_ip_count < 100: return 4 * public_ip_count * 6\n    else: raise ValueError(f'region or public_ip_count is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "public_ip_count": {"unit": "IPs", "description": "Number of public IP addresses allocated", "dtype": "int"}}, "synonyms": ["ip address charge", "public ip cost", "elastic ip fee"], "charge_description": "Charge for public IP addresses allocated."}, "load_balancer_fee": {"description": "if sku_tier is 'isolated', charge is 1; if sku_tier is 'premium', charge is 2; if sku_tier is 'standard', charge is 3; if sku_tier is 'basic', charge is 4 The variable 'sku_tier' is measured in tier.", "code": "def compute_charge(service_tier):\n    if service_tier == 'isolated': return 1\n    elif service_tier == 'premium': return 2\n    elif service_tier == 'standard': return 3\n    elif service_tier == 'basic': return 4\n    else: raise ValueError(f'Unknown value for service_tier: {service_tier}')", "variables_used": {"service_tier": {"unit": "tier", "description": "Service tier for managed services", "dtype": "str"}}, "synonyms": ["lb fee", "balancer charge", "traffic distribution cost"], "charge_description": "Charge for load balancer rules and tier."}, "aks_cluster_fee": {"description": "if node_pool_type is 'spot', charge is 1; if node_pool_type is 'system', charge is 2; if node_pool_type is 'user', charge is 3 The variable 'node_pool_type' is measured in node type.", "code": "def compute_charge(kubernetes_node_type):\n    if kubernetes_node_type == 'spot': return 1\n    elif kubernetes_node_type == 'system': return 2\n    elif kubernetes_node_type == 'user': return 3\n    else: raise ValueError(f'Unknown value for kubernetes_node_type: {kubernetes_node_type}')", "variables_used": {"kubernetes_node_type": {"unit": "node type", "description": "AKS node pool type", "dtype": "str"}}, "synonyms": ["kubernetes fee", "aks charge", "container cluster cost"], "charge_description": "Charge for AKS clusters based on node count and type."}, "function_app_fee": {"description": "function_app_fee conditions by geo_region and function_calls:\n\nfor uk_south the following charges apply:\n  - if function_calls in [0, 523682616), charge is 1 \u00d7 function_calls\n  - if function_calls in [523682616, 560073048), charge is 2 \u00d7 function_calls\n  - if function_calls in [560073048, 705334636), charge is 3 \u00d7 function_calls\n  - if function_calls in [705334636, 1000000000), charge is 4 \u00d7 function_calls\nfor uk_west the following charges apply:\n  - if function_calls in [0, 523682616), charge is 2 \u00d7 function_calls\n  - if function_calls in [523682616, 560073048), charge is 4 \u00d7 function_calls\n  - if function_calls in [560073048, 705334636), charge is 6 \u00d7 function_calls\n  - if function_calls in [705334636, 1000000000), charge is 8 \u00d7 function_calls\nfor westeurope the following charges apply:\n  - if function_calls in [0, 523682616), charge is 3 \u00d7 function_calls\n  - if function_calls in [523682616, 560073048), charge is 6 \u00d7 function_calls\n  - if function_calls in [560073048, 705334636), charge is 9 \u00d7 function_calls\n  - if function_calls in [705334636, 1000000000), charge is 12 \u00d7 function_calls\nfor northeurope the following charges apply:\n  - if function_calls in [0, 523682616), charge is 4 \u00d7 function_calls\n  - if function_calls in [523682616, 560073048), charge is 8 \u00d7 function_calls\n  - if function_calls in [560073048, 705334636), charge is 12 \u00d7 function_calls\n  - if function_calls in [705334636, 1000000000), charge is 16 \u00d7 function_calls\nfor eastus the following charges apply:\n  - if function_calls in [0, 523682616), charge is 5 \u00d7 function_calls\n  - if function_calls in [523682616, 560073048), charge is 10 \u00d7 function_calls\n  - if function_calls in [560073048, 705334636), charge is 15 \u00d7 function_calls\n  - if function_calls in [705334636, 1000000000), charge is 20 \u00d7 function_calls\nfor westus2 the following charges apply:\n  - if function_calls in [0, 523682616), charge is 6 \u00d7 function_calls\n  - if function_calls in [523682616, 560073048), charge is 12 \u00d7 function_calls\n  - if function_calls in [560073048, 705334636), charge is 18 \u00d7 function_calls\n  - if function_calls in [705334636, 1000000000), charge is 24 \u00d7 function_calls", "code": "def compute_charge(region, function_executions):\n    if region == 'uk_south' and 0 <= function_executions < 523682616: return 1 * function_executions * 1\n    elif region == 'uk_south' and 523682616 <= function_executions < 560073048: return 2 * function_executions * 1\n    elif region == 'uk_south' and 560073048 <= function_executions < 705334636: return 3 * function_executions * 1\n    elif region == 'uk_south' and 705334636 <= function_executions < 1000000000: return 4 * function_executions * 1\n    elif region == 'uk_west' and 0 <= function_executions < 523682616: return 1 * function_executions * 2\n    elif region == 'uk_west' and 523682616 <= function_executions < 560073048: return 2 * function_executions * 2\n    elif region == 'uk_west' and 560073048 <= function_executions < 705334636: return 3 * function_executions * 2\n    elif region == 'uk_west' and 705334636 <= function_executions < 1000000000: return 4 * function_executions * 2\n    elif region == 'westeurope' and 0 <= function_executions < 523682616: return 1 * function_executions * 3\n    elif region == 'westeurope' and 523682616 <= function_executions < 560073048: return 2 * function_executions * 3\n    elif region == 'westeurope' and 560073048 <= function_executions < 705334636: return 3 * function_executions * 3\n    elif region == 'westeurope' and 705334636 <= function_executions < 1000000000: return 4 * function_executions * 3\n    elif region == 'northeurope' and 0 <= function_executions < 523682616: return 1 * function_executions * 4\n    elif region == 'northeurope' and 523682616 <= function_executions < 560073048: return 2 * function_executions * 4\n    elif region == 'northeurope' and 560073048 <= function_executions < 705334636: return 3 * function_executions * 4\n    elif region == 'northeurope' and 705334636 <= function_executions < 1000000000: return 4 * function_executions * 4\n    elif region == 'eastus' and 0 <= function_executions < 523682616: return 1 * function_executions * 5\n    elif region == 'eastus' and 523682616 <= function_executions < 560073048: return 2 * function_executions * 5\n    elif region == 'eastus' and 560073048 <= function_executions < 705334636: return 3 * function_executions * 5\n    elif region == 'eastus' and 705334636 <= function_executions < 1000000000: return 4 * function_executions * 5\n    elif region == 'westus2' and 0 <= function_executions < 523682616: return 1 * function_executions * 6\n    elif region == 'westus2' and 523682616 <= function_executions < 560073048: return 2 * function_executions * 6\n    elif region == 'westus2' and 560073048 <= function_executions < 705334636: return 3 * function_executions * 6\n    elif region == 'westus2' and 705334636 <= function_executions < 1000000000: return 4 * function_executions * 6\n    else: raise ValueError(f'region or function_executions is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "function_executions": {"unit": "invocations", "description": "Number of serverless function calls", "dtype": "int"}}, "synonyms": ["faas charge", "functions cost", "serverless fee"], "charge_description": "Charge for serverless executions and execution time."}, "sql_database_fee": {"description": "sql_database_fee conditions by sku_tier and db_vcores:\n\nfor basic the following charges apply:\n  - if db_vcores in [0, 6), charge is 1 \u00d7 db_vcores\n  - if db_vcores in [6, 128), charge is 2 \u00d7 db_vcores\nfor standard the following charges apply:\n  - if db_vcores in [0, 6), charge is 2 \u00d7 db_vcores\n  - if db_vcores in [6, 128), charge is 4 \u00d7 db_vcores\nfor premium the following charges apply:\n  - if db_vcores in [0, 6), charge is 3 \u00d7 db_vcores\n  - if db_vcores in [6, 128), charge is 6 \u00d7 db_vcores\nfor isolated the following charges apply:\n  - if db_vcores in [0, 6), charge is 4 \u00d7 db_vcores\n  - if db_vcores in [6, 128), charge is 8 \u00d7 db_vcores", "code": "def compute_charge(service_tier, sql_vcores):\n    if service_tier == 'basic' and 0 <= sql_vcores < 6: return 1 * sql_vcores * 1\n    elif service_tier == 'basic' and 6 <= sql_vcores < 128: return 2 * sql_vcores * 1\n    elif service_tier == 'standard' and 0 <= sql_vcores < 6: return 1 * sql_vcores * 2\n    elif service_tier == 'standard' and 6 <= sql_vcores < 128: return 2 * sql_vcores * 2\n    elif service_tier == 'premium' and 0 <= sql_vcores < 6: return 1 * sql_vcores * 3\n    elif service_tier == 'premium' and 6 <= sql_vcores < 128: return 2 * sql_vcores * 3\n    elif service_tier == 'isolated' and 0 <= sql_vcores < 6: return 1 * sql_vcores * 4\n    elif service_tier == 'isolated' and 6 <= sql_vcores < 128: return 2 * sql_vcores * 4\n    else: raise ValueError(f'service_tier or sql_vcores is out of expected range')", "variables_used": {"service_tier": {"unit": "tier", "description": "Service tier for managed services", "dtype": "str"}, "sql_vcores": {"unit": "vCores", "description": "vCore count for Azure SQL", "dtype": "int"}}, "synonyms": ["sql charge", "database fee", "sql managed instance cost"], "charge_description": "Charge for Azure SQL based on vCores, storage, and retention."}, "snapshot_storage_fee": {"description": "if location is 'northeurope', charge is 1; if location is 'uk_west', charge is 2; if location is 'westeurope', charge is 3; if location is 'eastus', charge is 4; if location is 'uk_south', charge is 5; if location is 'westus2', charge is 6 The variable 'location' is measured in location.", "code": "def compute_charge(region):\n    if region == 'northeurope': return 1\n    elif region == 'uk_west': return 2\n    elif region == 'westeurope': return 3\n    elif region == 'eastus': return 4\n    elif region == 'uk_south': return 5\n    elif region == 'westus2': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["snapshot fee", "backup snapshot cost", "image snapshot charge"], "charge_description": "Charge for snapshot storage volume and redundancy."}, "app_service_fee": {"description": "if location is 'uk_west', charge is 1; if location is 'westeurope', charge is 2; if location is 'westus2', charge is 3; if location is 'eastus', charge is 4; if location is 'uk_south', charge is 5; if location is 'northeurope', charge is 6 The variable 'location' is measured in location.", "code": "def compute_charge(region):\n    if region == 'uk_west': return 1\n    elif region == 'westeurope': return 2\n    elif region == 'westus2': return 3\n    elif region == 'eastus': return 4\n    elif region == 'uk_south': return 5\n    elif region == 'northeurope': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["app service charge", "web app fee", "app hosting cost"], "charge_description": "Charge for App Service instances and tier."}}]
["# Microsoft Azure Cloud Pricing Policy Document\n\nMicrosoft Azure Pricing Policy\n\nThis document provides an overview of the fee structure and pricing policies for Microsoft Azure cloud services, effective as of the current date. It outlines the terms and conditions that govern the pricing of Azure services in the United Kingdom (GBP) and is intended to provide clarity on the costs associated with utilizing Azure products and services. By utilizing Azure, customers agree to be bound by the terms and conditions outlined in this policy.\n\n## **Compute VM Pricing: Hourly and Monthly Charges for Virtual Machine Instances**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Spot Flag</th>\n      <th>Charge</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>True</td>\n      <td>\u00a31</td>\n    </tr>\n    <tr>\n      <td>False</td>\n      <td>\u00a32</td>\n    </tr>\n  </tbody>\n</table>\n\n## **GPU Compute Fee Pricing**\n\nThis section outlines the pricing for GPU-accelerated compute services in\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>GPU Units</th>\n      <th>Linux</th>\n      <th>Windows</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 - 7</td>\n      <td>$2 per GPU</td>\n      <td>$4 per GPU</td>\n    </tr>\n  </tbody>\n</table>\n\n## Managed Disk Fees\n------------------\n\nPricing for Managed Disks in Microsoft Azure, including Standard and Premium\n\n**Persistent Disk Pricing**\n\nThe Persistent Disk Pricing charge is a fee associated with the usage of persistent disks in Microsoft Azure. This charge is calculated based on the number of disks provisioned by the customer.\n\nThe charge is calculated as follows: \n\n- For 5 disks or fewer, the charge is 4 times the number of disks, in GBP.\n- For 26 disks, the charge is 3 times the number of disks, in GBP.\n- For 56 disks, the charge is 2 times the number of disks, in GBP.\n- For 64 disks or more, the charge is 1 times the number of disks, in GBP.\n\n< table >\n  < tr >\n    < th > Disk Count </ th >\n    < th > Charge Multiplier </ th >\n  </ tr >\n  < tr >\n    < td > 0-5 </ td >\n    < td > 4 </ td >\n  </ tr >\n  < tr >\n    < td > 5-26 </ td >\n    < td > 3 </ td >\n  </ tr >\n  < tr >\n    < td > 26-56 </ td >\n    < td > 2 </ td >\n  </ tr >\n  < tr >\n    < td > 56-64 </ td >\n    < td > 1 </ td >\n  </ tr >\n  < tr >\n    < td > 64+ </ td >\n    < td > 1 </ td >\n  </ tr >\n</ table >\n\n## **Data Egress Fees: Charges for Data Downloaded from Microsoft Azure Services**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Charge (GBP)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>eastus</td>\n      <td>\u00a31.00</td>\n    </tr>\n    <tr>\n      <td>northeurope</td>\n      <td>\u00a32.00</td>\n    </tr>\n    <tr>\n      <td>westus2</td>\n      <td>\u00a33.00</td>\n    </tr>\n    <tr>\n      <td>westeurope</td>\n      <td>\u00a34.00</td>\n    </tr>\n    <tr>\n      <td>uk_south</td>\n      <td>\u00a35.00</td>\n    </tr>\n    <tr>\n      <td>uk_west</td>\n      <td>\u00a36.00</td>\n    </tr>\n  </tbody>\n</table>\n\n## Data Ingress Fee: Charges for Data Transferred Inbound to Azure Resources and Services.\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Geo Region</th>\n      <th>Charge (GBP)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>West US 2</td>\n      <td>\u00a30.74</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>\u00a31.48</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>\u00a32.22</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>\u00a32.96</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>\u00a33.70</td>\n    </tr>\n    <tr>\n      <td>UK South</td>\n      <td>\u00a34.44</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Storage Transaction Fees: Charges for Operations on Azure Storage Resources**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Storage Operations (M)</th>\n      <th>LRS</th>\n      <th>ZRS</th>\n      <th>GRS</th>\n      <th>GZRS</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 134.99</td>\n      <td>$4.00 per million</td>\n      <td>$4.40 per million</td>\n      <td>$4.80 per million</td>\n      <td>$5.20 per million</td>\n    </tr>\n    <tr>\n      <td>135 \u2013 372.79</td>\n      <td>$3.00 per million</td>\n      <td>$3.30 per million</td>\n      <td>$3.60 per million</td>\n      <td>$3.90 per million</td>\n    </tr>\n    <tr>\n      <td>372.8 \u2013 479.49</td>\n      <td>$2.00 per million</td>\n      <td>$2.20 per million</td>\n      <td>$2.40 per million</td>\n      <td>$2.60 per million</td>\n    </tr>\n    <tr>\n      <td>479.5 \u2013 500</td>\n      <td>$1.00 per million</td>\n      <td>$1.10 per million</td>\n      <td>$1.20 per million</td>\n      <td>$1.30 per million</td>\n    </tr>\n  </tbody>\n</table>\n\n## Public IP Fee: Pricing for Public IP Addresses in Azure\n\n**Regional Pricing Charge**\n\nThis charge applies to customers based on the geographic region in which their Azure resources are deployed. The charge is calculated based on the geo_region attribute of the resource.\n\nThe charge is calculated as follows:\n\n- For resources deployed in the westus2 region, the charge is \u00a31.\n- For resources deployed in the westeurope region, the charge is \u00a32.\n- For resources deployed in the eastus region, the charge is \u00a33.\n- For resources deployed in the northeurope region, the charge is \u00a34.\n- For resources deployed in the uk_west region, the charge is \u00a35.\n- For resources deployed in the uk_south region, the charge is \u00a36.\n\n**Pricing Breakdown**\n\nThe Regional Pricing Charge is a per-resource charge and applies to all Azure resources deployed in the specified regions. The charge is used to support the operation and maintenance of Azure infrastructure in these regions, including data storage, network connectivity, and security. By applying this charge, customers can help offset the costs associated with deploying and running their applications in these regions.\n\n## **Load Balancer Pricing**\n\nThis section outlines the costs associated with using Azure Load Balancer services.\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Load Balancer Fee (per rule)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK South</td>\n      <td>\u00a31 for 0-165 rules, \u00a32 for 166-199 rules</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>\u00a32 for 0-165 rules, \u00a34 for 166-199 rules</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>\u00a33 for 0-165 rules, \u00a36 for 166-199 rules</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>\u00a34 for 0-165 rules, \u00a38 for 166-199 rules</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>\u00a35 for 0-165 rules, \u00a310 for 166-199 rules</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>\u00a36 for 0-165 rules, \u00a312 for 166-199 rules</td>\n    </tr>\n  </tbody>\n</table>\n\n## **AKS Cluster Pricing**\n\nThis section outlines the charges associated with Azure Kubernetes Service (AKS)\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Azure Kubernetes Service (AKS) Nodes</th>\n      <th>UK South</th>\n      <th>UK West</th>\n      <th>West Europe</th>\n      <th>North Europe</th>\n      <th>East US</th>\n      <th>West US 2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 - 314</td>\n      <td>\u00a31 per node</td>\n      <td>\u00a32 per node</td>\n      <td>\u00a33 per node</td>\n      <td>\u00a34 per node</td>\n      <td>\u00a35 per node</td>\n      <td>\u00a36 per node</td>\n    </tr>\n    <tr>\n      <td>315 - 834</td>\n      <td>\u00a32 per node</td>\n      <td>\u00a34 per node</td>\n      <td>\u00a36 per node</td>\n      <td>\u00a38 per node</td>\n      <td>\u00a310 per node</td>\n      <td>\u00a312 per node</td>\n    </tr>\n    <tr>\n      <td>835 - 1000</td>\n      <td>\u00a33 per node</td>\n      <td>\u00a36 per node</td>\n      <td>\u00a39 per node</td>\n      <td>\u00a312 per node</td>\n      <td>\u00a315 per node</td>\n      <td>\u00a318 per node</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Function App Pricing: Charges for Running and Scaling Azure Functions**\n\nFunction App Fee\n\nThe Function App Fee is a charge applied to Function Apps in Microsoft Azure. This fee is based on the duration of the function execution in milliseconds, and the geographic region where the function is executed. The charge is calculated as the product of the duration of the function execution and a rate that varies by geographic region.\n\nThe Function App Fee is applicable to all Function Apps in Microsoft Azure, and is used to recover the costs associated with providing the Function App service. The fee is charged in GBP and is calculated as follows:\n\n<table>\n  <tr>\n    <th>Geo Region</th>\n    <th>Duration (ms)</th>\n    <th>Rate</th>\n    <th>Charge</th>\n  </tr>\n  <tr>\n    <td>uk_south</td>\n    <td>[0.1, 37603.9)</td>\n    <td>4.0</td>\n    <td>4.0 \u00d7 duration_ms</td>\n  </tr>\n  <tr>\n    <td>uk_south</td>\n    <td>[37603.9, 436119.4)</td>\n    <td>3.0</td>\n    <td>3.0 \u00d7 duration_ms</td>\n  </tr>\n  <tr>\n    <td>uk_south</td>\n    <td>[436119.4, 592816.2)</td>\n    <td>2.0</td>\n    <td>2.0 \u00d7 duration_ms</td>\n  </tr>\n  <tr>\n    <td>uk_south</td>\n    <td>[592816.2, 600000.0)</td>\n    <td>1.0</td>\n    <td>1.0 \u00d7 duration_ms</td>\n  </tr>\n  <tr>\n    <td>uk_west</td>\n    <td>[0.1, 37603.9)</td>\n    <td>4.4</td>\n    <td>4.4 \u00d7 duration_ms</td>\n  </tr>\n  <tr>\n    <td>uk_west</td>\n    <td>[37603.9, 436119.4)</td>\n    <td>3.3</td>\n    <td>3.3 \u00d7 duration_ms</td>\n  </tr>\n  <\n\n## **Azure SQL Database Pricing: Database Services and Compute Costs**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Database Storage (GB)</th>\n      <th>Charge (GBP)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 - 7389</td>\n      <td>1 x GB</td>\n    </tr>\n    <tr>\n      <td>7390 - 8192</td>\n      <td>2 x GB</td>\n    </tr>\n  </tbody>\n</table>\n\n## **Azure Snapshot Storage Fee: Charges for Storing and Retrieving Azure Disk Snapshots**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Replication Type</th>\n      <th>Charge</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>LRS</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>GZRS</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>GRS</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <td>ZRS</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n\n## **App Service Pricing: Compute, Storage, and Network Resources by Plan and Instance Size**\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Web App Instances</th>\n      <th>Charge (GBP)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 110</td>\n      <td>\u00a31 per instance</td>\n    </tr>\n    <tr>\n      <td>110 \u2013 185</td>\n      <td>\u00a32 per instance</td>\n    </tr>\n    <tr>\n      <td>186 \u2013 200</td>\n      <td>\u00a33 per instance</td>\n    </tr>\n  </tbody>\n</table>\n\nUpon review of these Microsoft Azure cloud pricing policies, please note that prices are subject to change and may be adjusted as necessary. Customers should regularly review the Azure pricing page for the most up-to-date information. For any questions or concerns regarding these policies or pricing, please contact Microsoft Azure support via the Azure portal or through online support channels.\n\n**Policy Effective Date:** August 20, 2025\n\n", {"compute_vm_fee": {"description": "if spot_flag is 'true', charge is 1; if spot_flag is 'false', charge is 2 The variable 'spot_flag' is measured in flag.", "code": "def compute_charge(spot_instance):\n    if spot_instance == 'true': return 1\n    elif spot_instance == 'false': return 2\n    else: raise ValueError(f'Unknown value for spot_instance: {spot_instance}')", "variables_used": {"spot_instance": {"unit": "flag", "description": "Whether the compute uses spot capacity", "dtype": "str"}}, "synonyms": ["vm runtime charge", "compute instance fee", "virtual machine cost"], "charge_description": "Charge for running virtual machines based on vCPU, memory, OS, and commitment."}, "gpu_compute_fee": {"description": "gpu_compute_fee conditions by operating_system and gpu_units:\n\nfor linux the following charges apply:\n  - if gpu_units in [0, 0), charge is 1 \u00d7 gpu_units\n  - if gpu_units in [0, 8), charge is 2 \u00d7 gpu_units\nfor windows the following charges apply:\n  - if gpu_units in [0, 0), charge is 2 \u00d7 gpu_units\n  - if gpu_units in [0, 8), charge is 4 \u00d7 gpu_units", "code": "def compute_charge(os_type, gpu_count):\n    if os_type == 'linux' and 0 <= gpu_count < 0: return 1 * gpu_count * 1\n    elif os_type == 'linux' and 0 <= gpu_count < 8: return 2 * gpu_count * 1\n    elif os_type == 'windows' and 0 <= gpu_count < 0: return 1 * gpu_count * 2\n    elif os_type == 'windows' and 0 <= gpu_count < 8: return 2 * gpu_count * 2\n    else: raise ValueError(f'os_type or gpu_count is out of expected range')", "variables_used": {"os_type": {"unit": "os", "description": "Operating system for the compute workload", "dtype": "str"}, "gpu_count": {"unit": "GPUs", "description": "Number of GPUs attached to the instance", "dtype": "int"}}, "synonyms": ["gpu instance fee", "accelerator charge", "gpu runtime cost"], "charge_description": "Charge for GPU-enabled compute usage."}, "managed_disk_fee": {"description": "if disk_count in [56, 64), charge is 1 \u00d7 disk_count; if disk_count in [26, 56), charge is 2 \u00d7 disk_count; if disk_count in [5, 26), charge is 3 \u00d7 disk_count; if disk_count in [0, 5), charge is 4 \u00d7 disk_count The variable 'disk_count' is measured in disks.", "code": "def compute_charge(managed_disk_count):\n    if 56 <= managed_disk_count < 64: return 1 * managed_disk_count\n    elif 26 <= managed_disk_count < 56: return 2 * managed_disk_count\n    elif 5 <= managed_disk_count < 26: return 3 * managed_disk_count\n    elif 0 <= managed_disk_count < 5: return 4 * managed_disk_count\n    else: raise ValueError(f'managed_disk_count is out of expected range')", "variables_used": {"managed_disk_count": {"unit": "disks", "description": "Count of managed disks attached", "dtype": "int"}}, "synonyms": ["disk charge", "managed storage fee", "block storage cost"], "charge_description": "Charge for managed disks based on type, size, and count."}, "data_egress_fee": {"description": "if location is 'eastus', charge is 1; if location is 'northeurope', charge is 2; if location is 'westus2', charge is 3; if location is 'westeurope', charge is 4; if location is 'uk_south', charge is 5; if location is 'uk_west', charge is 6 The variable 'location' is measured in location.", "code": "def compute_charge(region):\n    if region == 'eastus': return 1\n    elif region == 'northeurope': return 2\n    elif region == 'westus2': return 3\n    elif region == 'westeurope': return 4\n    elif region == 'uk_south': return 5\n    elif region == 'uk_west': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["egress charge", "outbound data fee", "data transfer out"], "charge_description": "Charge for data leaving Azure regions."}, "data_ingress_fee": {"description": "if geo_region is 'westus2', charge is 1; if geo_region is 'uk_west', charge is 2; if geo_region is 'northeurope', charge is 3; if geo_region is 'eastus', charge is 4; if geo_region is 'uk_south', charge is 5; if geo_region is 'westeurope', charge is 6 The variable 'geo_region' is measured in geo_region.", "code": "def compute_charge(region):\n    if region == 'westus2': return 1\n    elif region == 'uk_west': return 2\n    elif region == 'northeurope': return 3\n    elif region == 'eastus': return 4\n    elif region == 'uk_south': return 5\n    elif region == 'westeurope': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["ingress charge", "inbound data fee", "data transfer in"], "charge_description": "Charge for data entering Azure regions where applicable."}, "storage_transaction_fee": {"description": "storage_transaction_fee conditions by replication and storage_ops_million:\n\nfor LRS the following charges apply:\n  - if storage_ops_million in [479.5, 500.0), charge is 1.0 \u00d7 storage_ops_million\n  - if storage_ops_million in [372.8, 479.5), charge is 2.0 \u00d7 storage_ops_million\n  - if storage_ops_million in [135.0, 372.8), charge is 3.0 \u00d7 storage_ops_million\n  - if storage_ops_million in [0.0, 135.0), charge is 4.0 \u00d7 storage_ops_million\nfor ZRS the following charges apply:\n  - if storage_ops_million in [479.5, 500.0), charge is 1.1 \u00d7 storage_ops_million\n  - if storage_ops_million in [372.8, 479.5), charge is 2.2 \u00d7 storage_ops_million\n  - if storage_ops_million in [135.0, 372.8), charge is 3.3 \u00d7 storage_ops_million\n  - if storage_ops_million in [0.0, 135.0), charge is 4.4 \u00d7 storage_ops_million\nfor GRS the following charges apply:\n  - if storage_ops_million in [479.5, 500.0), charge is 1.2 \u00d7 storage_ops_million\n  - if storage_ops_million in [372.8, 479.5), charge is 2.4 \u00d7 storage_ops_million\n  - if storage_ops_million in [135.0, 372.8), charge is 3.6 \u00d7 storage_ops_million\n  - if storage_ops_million in [0.0, 135.0), charge is 4.8 \u00d7 storage_ops_million\nfor GZRS the following charges apply:\n  - if storage_ops_million in [479.5, 500.0), charge is 1.3 \u00d7 storage_ops_million\n  - if storage_ops_million in [372.8, 479.5), charge is 2.6 \u00d7 storage_ops_million\n  - if storage_ops_million in [135.0, 372.8), charge is 3.9 \u00d7 storage_ops_million\n  - if storage_ops_million in [0.0, 135.0), charge is 5.2 \u00d7 storage_ops_million", "code": "def compute_charge(redundancy, storage_transactions_millions):\n    if redundancy == 'LRS' and 479.5 <= storage_transactions_millions < 500.0: return 1 * storage_transactions_millions * 1.0\n    elif redundancy == 'LRS' and 372.8 <= storage_transactions_millions < 479.5: return 2 * storage_transactions_millions * 1.0\n    elif redundancy == 'LRS' and 135.0 <= storage_transactions_millions < 372.8: return 3 * storage_transactions_millions * 1.0\n    elif redundancy == 'LRS' and 0.0 <= storage_transactions_millions < 135.0: return 4 * storage_transactions_millions * 1.0\n    elif redundancy == 'ZRS' and 479.5 <= storage_transactions_millions < 500.0: return 1 * storage_transactions_millions * 1.1\n    elif redundancy == 'ZRS' and 372.8 <= storage_transactions_millions < 479.5: return 2 * storage_transactions_millions * 1.1\n    elif redundancy == 'ZRS' and 135.0 <= storage_transactions_millions < 372.8: return 3 * storage_transactions_millions * 1.1\n    elif redundancy == 'ZRS' and 0.0 <= storage_transactions_millions < 135.0: return 4 * storage_transactions_millions * 1.1\n    elif redundancy == 'GRS' and 479.5 <= storage_transactions_millions < 500.0: return 1 * storage_transactions_millions * 1.2\n    elif redundancy == 'GRS' and 372.8 <= storage_transactions_millions < 479.5: return 2 * storage_transactions_millions * 1.2\n    elif redundancy == 'GRS' and 135.0 <= storage_transactions_millions < 372.8: return 3 * storage_transactions_millions * 1.2\n    elif redundancy == 'GRS' and 0.0 <= storage_transactions_millions < 135.0: return 4 * storage_transactions_millions * 1.2\n    elif redundancy == 'GZRS' and 479.5 <= storage_transactions_millions < 500.0: return 1 * storage_transactions_millions * 1.3\n    elif redundancy == 'GZRS' and 372.8 <= storage_transactions_millions < 479.5: return 2 * storage_transactions_millions * 1.3\n    elif redundancy == 'GZRS' and 135.0 <= storage_transactions_millions < 372.8: return 3 * storage_transactions_millions * 1.3\n    elif redundancy == 'GZRS' and 0.0 <= storage_transactions_millions < 135.0: return 4 * storage_transactions_millions * 1.3\n    else: raise ValueError(f'redundancy or storage_transactions_millions is out of expected range')", "variables_used": {"redundancy": {"unit": "redundancy", "description": "Storage redundancy configuration", "dtype": "str"}, "storage_transactions_millions": {"unit": "million tx", "description": "Number of storage account operations in millions", "dtype": "float"}}, "synonyms": ["storage ops fee", "transaction charge", "storage request cost"], "charge_description": "Charge for storage account transactions and redundancy level."}, "public_ip_fee": {"description": "if geo_region is 'westus2', charge is 1; if geo_region is 'westeurope', charge is 2; if geo_region is 'eastus', charge is 3; if geo_region is 'northeurope', charge is 4; if geo_region is 'uk_west', charge is 5; if geo_region is 'uk_south', charge is 6 The variable 'geo_region' is measured in geo_region.", "code": "def compute_charge(region):\n    if region == 'westus2': return 1\n    elif region == 'westeurope': return 2\n    elif region == 'eastus': return 3\n    elif region == 'northeurope': return 4\n    elif region == 'uk_west': return 5\n    elif region == 'uk_south': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["ip address charge", "public ip cost", "elastic ip fee"], "charge_description": "Charge for public IP addresses allocated."}, "load_balancer_fee": {"description": "load_balancer_fee conditions by location and balancer_rules:\n\nfor uk_south the following charges apply:\n  - if balancer_rules in [0, 166), charge is 1 \u00d7 balancer_rules\n  - if balancer_rules in [166, 200), charge is 2 \u00d7 balancer_rules\nfor uk_west the following charges apply:\n  - if balancer_rules in [0, 166), charge is 2 \u00d7 balancer_rules\n  - if balancer_rules in [166, 200), charge is 4 \u00d7 balancer_rules\nfor westeurope the following charges apply:\n  - if balancer_rules in [0, 166), charge is 3 \u00d7 balancer_rules\n  - if balancer_rules in [166, 200), charge is 6 \u00d7 balancer_rules\nfor northeurope the following charges apply:\n  - if balancer_rules in [0, 166), charge is 4 \u00d7 balancer_rules\n  - if balancer_rules in [166, 200), charge is 8 \u00d7 balancer_rules\nfor eastus the following charges apply:\n  - if balancer_rules in [0, 166), charge is 5 \u00d7 balancer_rules\n  - if balancer_rules in [166, 200), charge is 10 \u00d7 balancer_rules\nfor westus2 the following charges apply:\n  - if balancer_rules in [0, 166), charge is 6 \u00d7 balancer_rules\n  - if balancer_rules in [166, 200), charge is 12 \u00d7 balancer_rules", "code": "def compute_charge(region, load_balancer_rules):\n    if region == 'uk_south' and 0 <= load_balancer_rules < 166: return 1 * load_balancer_rules * 1\n    elif region == 'uk_south' and 166 <= load_balancer_rules < 200: return 2 * load_balancer_rules * 1\n    elif region == 'uk_west' and 0 <= load_balancer_rules < 166: return 1 * load_balancer_rules * 2\n    elif region == 'uk_west' and 166 <= load_balancer_rules < 200: return 2 * load_balancer_rules * 2\n    elif region == 'westeurope' and 0 <= load_balancer_rules < 166: return 1 * load_balancer_rules * 3\n    elif region == 'westeurope' and 166 <= load_balancer_rules < 200: return 2 * load_balancer_rules * 3\n    elif region == 'northeurope' and 0 <= load_balancer_rules < 166: return 1 * load_balancer_rules * 4\n    elif region == 'northeurope' and 166 <= load_balancer_rules < 200: return 2 * load_balancer_rules * 4\n    elif region == 'eastus' and 0 <= load_balancer_rules < 166: return 1 * load_balancer_rules * 5\n    elif region == 'eastus' and 166 <= load_balancer_rules < 200: return 2 * load_balancer_rules * 5\n    elif region == 'westus2' and 0 <= load_balancer_rules < 166: return 1 * load_balancer_rules * 6\n    elif region == 'westus2' and 166 <= load_balancer_rules < 200: return 2 * load_balancer_rules * 6\n    else: raise ValueError(f'region or load_balancer_rules is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "load_balancer_rules": {"unit": "rules", "description": "Configured load balancer rules", "dtype": "int"}}, "synonyms": ["lb fee", "balancer charge", "traffic distribution cost"], "charge_description": "Charge for load balancer rules and tier."}, "aks_cluster_fee": {"description": "aks_cluster_fee conditions by location and aks_nodes:\n\nfor uk_south the following charges apply:\n  - if aks_nodes in [0, 315), charge is 1 \u00d7 aks_nodes\n  - if aks_nodes in [315, 835), charge is 2 \u00d7 aks_nodes\n  - if aks_nodes in [835, 1000), charge is 3 \u00d7 aks_nodes\nfor uk_west the following charges apply:\n  - if aks_nodes in [0, 315), charge is 2 \u00d7 aks_nodes\n  - if aks_nodes in [315, 835), charge is 4 \u00d7 aks_nodes\n  - if aks_nodes in [835, 1000), charge is 6 \u00d7 aks_nodes\nfor westeurope the following charges apply:\n  - if aks_nodes in [0, 315), charge is 3 \u00d7 aks_nodes\n  - if aks_nodes in [315, 835), charge is 6 \u00d7 aks_nodes\n  - if aks_nodes in [835, 1000), charge is 9 \u00d7 aks_nodes\nfor northeurope the following charges apply:\n  - if aks_nodes in [0, 315), charge is 4 \u00d7 aks_nodes\n  - if aks_nodes in [315, 835), charge is 8 \u00d7 aks_nodes\n  - if aks_nodes in [835, 1000), charge is 12 \u00d7 aks_nodes\nfor eastus the following charges apply:\n  - if aks_nodes in [0, 315), charge is 5 \u00d7 aks_nodes\n  - if aks_nodes in [315, 835), charge is 10 \u00d7 aks_nodes\n  - if aks_nodes in [835, 1000), charge is 15 \u00d7 aks_nodes\nfor westus2 the following charges apply:\n  - if aks_nodes in [0, 315), charge is 6 \u00d7 aks_nodes\n  - if aks_nodes in [315, 835), charge is 12 \u00d7 aks_nodes\n  - if aks_nodes in [835, 1000), charge is 18 \u00d7 aks_nodes", "code": "def compute_charge(region, kubernetes_node_count):\n    if region == 'uk_south' and 0 <= kubernetes_node_count < 315: return 1 * kubernetes_node_count * 1\n    elif region == 'uk_south' and 315 <= kubernetes_node_count < 835: return 2 * kubernetes_node_count * 1\n    elif region == 'uk_south' and 835 <= kubernetes_node_count < 1000: return 3 * kubernetes_node_count * 1\n    elif region == 'uk_west' and 0 <= kubernetes_node_count < 315: return 1 * kubernetes_node_count * 2\n    elif region == 'uk_west' and 315 <= kubernetes_node_count < 835: return 2 * kubernetes_node_count * 2\n    elif region == 'uk_west' and 835 <= kubernetes_node_count < 1000: return 3 * kubernetes_node_count * 2\n    elif region == 'westeurope' and 0 <= kubernetes_node_count < 315: return 1 * kubernetes_node_count * 3\n    elif region == 'westeurope' and 315 <= kubernetes_node_count < 835: return 2 * kubernetes_node_count * 3\n    elif region == 'westeurope' and 835 <= kubernetes_node_count < 1000: return 3 * kubernetes_node_count * 3\n    elif region == 'northeurope' and 0 <= kubernetes_node_count < 315: return 1 * kubernetes_node_count * 4\n    elif region == 'northeurope' and 315 <= kubernetes_node_count < 835: return 2 * kubernetes_node_count * 4\n    elif region == 'northeurope' and 835 <= kubernetes_node_count < 1000: return 3 * kubernetes_node_count * 4\n    elif region == 'eastus' and 0 <= kubernetes_node_count < 315: return 1 * kubernetes_node_count * 5\n    elif region == 'eastus' and 315 <= kubernetes_node_count < 835: return 2 * kubernetes_node_count * 5\n    elif region == 'eastus' and 835 <= kubernetes_node_count < 1000: return 3 * kubernetes_node_count * 5\n    elif region == 'westus2' and 0 <= kubernetes_node_count < 315: return 1 * kubernetes_node_count * 6\n    elif region == 'westus2' and 315 <= kubernetes_node_count < 835: return 2 * kubernetes_node_count * 6\n    elif region == 'westus2' and 835 <= kubernetes_node_count < 1000: return 3 * kubernetes_node_count * 6\n    else: raise ValueError(f'region or kubernetes_node_count is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "kubernetes_node_count": {"unit": "nodes", "description": "Number of AKS nodes in the cluster", "dtype": "int"}}, "synonyms": ["kubernetes fee", "aks charge", "container cluster cost"], "charge_description": "Charge for AKS clusters based on node count and type."}, "function_app_fee": {"description": "function_app_fee conditions by geo_region and duration_ms:\n\nfor uk_south the following charges apply:\n  - if duration_ms in [592816.2, 600000.0), charge is 1.0 \u00d7 duration_ms\n  - if duration_ms in [436119.4, 592816.2), charge is 2.0 \u00d7 duration_ms\n  - if duration_ms in [37603.9, 436119.4), charge is 3.0 \u00d7 duration_ms\n  - if duration_ms in [0.1, 37603.9), charge is 4.0 \u00d7 duration_ms\nfor uk_west the following charges apply:\n  - if duration_ms in [592816.2, 600000.0), charge is 1.1 \u00d7 duration_ms\n  - if duration_ms in [436119.4, 592816.2), charge is 2.2 \u00d7 duration_ms\n  - if duration_ms in [37603.9, 436119.4), charge is 3.3 \u00d7 duration_ms\n  - if duration_ms in [0.1, 37603.9), charge is 4.4 \u00d7 duration_ms\nfor westeurope the following charges apply:\n  - if duration_ms in [592816.2, 600000.0), charge is 1.2 \u00d7 duration_ms\n  - if duration_ms in [436119.4, 592816.2), charge is 2.4 \u00d7 duration_ms\n  - if duration_ms in [37603.9, 436119.4), charge is 3.6 \u00d7 duration_ms\n  - if duration_ms in [0.1, 37603.9), charge is 4.8 \u00d7 duration_ms\nfor northeurope the following charges apply:\n  - if duration_ms in [592816.2, 600000.0), charge is 1.3 \u00d7 duration_ms\n  - if duration_ms in [436119.4, 592816.2), charge is 2.6 \u00d7 duration_ms\n  - if duration_ms in [37603.9, 436119.4), charge is 3.9 \u00d7 duration_ms\n  - if duration_ms in [0.1, 37603.9), charge is 5.2 \u00d7 duration_ms\nfor eastus the following charges apply:\n  - if duration_ms in [592816.2, 600000.0), charge is 1.4 \u00d7 duration_ms\n  - if duration_ms in [436119.4, 592816.2), charge is 2.8 \u00d7 duration_ms\n  - if duration_ms in [37603.9, 436119.4), charge is 4.2 \u00d7 duration_ms\n  - if duration_ms in [0.1, 37603.9), charge is 5.6 \u00d7 duration_ms\nfor westus2 the following charges apply:\n  - if duration_ms in [592816.2, 600000.0), charge is 1.5 \u00d7 duration_ms\n  - if duration_ms in [436119.4, 592816.2), charge is 3.0 \u00d7 duration_ms\n  - if duration_ms in [37603.9, 436119.4), charge is 4.5 \u00d7 duration_ms\n  - if duration_ms in [0.1, 37603.9), charge is 6.0 \u00d7 duration_ms", "code": "def compute_charge(region, function_exec_ms):\n    if region == 'uk_south' and 592816.2 <= function_exec_ms < 600000.0: return 1 * function_exec_ms * 1.0\n    elif region == 'uk_south' and 436119.4 <= function_exec_ms < 592816.2: return 2 * function_exec_ms * 1.0\n    elif region == 'uk_south' and 37603.9 <= function_exec_ms < 436119.4: return 3 * function_exec_ms * 1.0\n    elif region == 'uk_south' and 0.1 <= function_exec_ms < 37603.9: return 4 * function_exec_ms * 1.0\n    elif region == 'uk_west' and 592816.2 <= function_exec_ms < 600000.0: return 1 * function_exec_ms * 1.1\n    elif region == 'uk_west' and 436119.4 <= function_exec_ms < 592816.2: return 2 * function_exec_ms * 1.1\n    elif region == 'uk_west' and 37603.9 <= function_exec_ms < 436119.4: return 3 * function_exec_ms * 1.1\n    elif region == 'uk_west' and 0.1 <= function_exec_ms < 37603.9: return 4 * function_exec_ms * 1.1\n    elif region == 'westeurope' and 592816.2 <= function_exec_ms < 600000.0: return 1 * function_exec_ms * 1.2\n    elif region == 'westeurope' and 436119.4 <= function_exec_ms < 592816.2: return 2 * function_exec_ms * 1.2\n    elif region == 'westeurope' and 37603.9 <= function_exec_ms < 436119.4: return 3 * function_exec_ms * 1.2\n    elif region == 'westeurope' and 0.1 <= function_exec_ms < 37603.9: return 4 * function_exec_ms * 1.2\n    elif region == 'northeurope' and 592816.2 <= function_exec_ms < 600000.0: return 1 * function_exec_ms * 1.3\n    elif region == 'northeurope' and 436119.4 <= function_exec_ms < 592816.2: return 2 * function_exec_ms * 1.3\n    elif region == 'northeurope' and 37603.9 <= function_exec_ms < 436119.4: return 3 * function_exec_ms * 1.3\n    elif region == 'northeurope' and 0.1 <= function_exec_ms < 37603.9: return 4 * function_exec_ms * 1.3\n    elif region == 'eastus' and 592816.2 <= function_exec_ms < 600000.0: return 1 * function_exec_ms * 1.4\n    elif region == 'eastus' and 436119.4 <= function_exec_ms < 592816.2: return 2 * function_exec_ms * 1.4\n    elif region == 'eastus' and 37603.9 <= function_exec_ms < 436119.4: return 3 * function_exec_ms * 1.4\n    elif region == 'eastus' and 0.1 <= function_exec_ms < 37603.9: return 4 * function_exec_ms * 1.4\n    elif region == 'westus2' and 592816.2 <= function_exec_ms < 600000.0: return 1 * function_exec_ms * 1.5\n    elif region == 'westus2' and 436119.4 <= function_exec_ms < 592816.2: return 2 * function_exec_ms * 1.5\n    elif region == 'westus2' and 37603.9 <= function_exec_ms < 436119.4: return 3 * function_exec_ms * 1.5\n    elif region == 'westus2' and 0.1 <= function_exec_ms < 37603.9: return 4 * function_exec_ms * 1.5\n    else: raise ValueError(f'region or function_exec_ms is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "function_exec_ms": {"unit": "ms", "description": "Average or billed execution time per invocation", "dtype": "float"}}, "synonyms": ["faas charge", "functions cost", "serverless fee"], "charge_description": "Charge for serverless executions and execution time."}, "sql_database_fee": {"description": "if db_storage_gb in [0, 7389), charge is 1 \u00d7 db_storage_gb; if db_storage_gb in [7389, 8192), charge is 2 \u00d7 db_storage_gb The variable 'db_storage_gb' is measured in GB.", "code": "def compute_charge(sql_storage_gb):\n    if 0 <= sql_storage_gb < 7389: return 1 * sql_storage_gb\n    elif 7389 <= sql_storage_gb < 8192: return 2 * sql_storage_gb\n    else: raise ValueError(f'sql_storage_gb is out of expected range')", "variables_used": {"sql_storage_gb": {"unit": "GB", "description": "Allocated storage for Azure SQL", "dtype": "int"}}, "synonyms": ["sql charge", "database fee", "sql managed instance cost"], "charge_description": "Charge for Azure SQL based on vCores, storage, and retention."}, "snapshot_storage_fee": {"description": "if replication is 'LRS', charge is 1; if replication is 'GZRS', charge is 2; if replication is 'GRS', charge is 3; if replication is 'ZRS', charge is 4 The variable 'replication' is measured in replication.", "code": "def compute_charge(redundancy):\n    if redundancy == 'LRS': return 1\n    elif redundancy == 'GZRS': return 2\n    elif redundancy == 'GRS': return 3\n    elif redundancy == 'ZRS': return 4\n    else: raise ValueError(f'Unknown value for redundancy: {redundancy}')", "variables_used": {"redundancy": {"unit": "redundancy", "description": "Storage redundancy configuration", "dtype": "str"}}, "synonyms": ["snapshot fee", "backup snapshot cost", "image snapshot charge"], "charge_description": "Charge for snapshot storage volume and redundancy."}, "app_service_fee": {"description": "if webapp_instances in [0, 110), charge is 1 \u00d7 webapp_instances; if webapp_instances in [110, 186), charge is 2 \u00d7 webapp_instances; if webapp_instances in [186, 200), charge is 3 \u00d7 webapp_instances The variable 'webapp_instances' is measured in instances.", "code": "def compute_charge(app_service_instances):\n    if 0 <= app_service_instances < 110: return 1 * app_service_instances\n    elif 110 <= app_service_instances < 186: return 2 * app_service_instances\n    elif 186 <= app_service_instances < 200: return 3 * app_service_instances\n    else: raise ValueError(f'app_service_instances is out of expected range')", "variables_used": {"app_service_instances": {"unit": "instances", "description": "Count of App Service instances", "dtype": "int"}}, "synonyms": ["app service charge", "web app fee", "app hosting cost"], "charge_description": "Charge for App Service instances and tier."}}]
