["# Microsoft Azure Cloud Pricing Policy Document\n\nMicrosoft Azure is pleased to provide this official pricing policy document, which outlines the fee structure and pricing policies for our comprehensive suite of cloud services. This document serves as a definitive guide to understanding the costs associated with utilizing Azure's scalable and secure cloud solutions. All prices listed within this document are denominated in United States Dollars (USD).\n\n## Virtual Machine Usage Fees and Charges\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Virtual Cores</th>\n      <th>Charge (USD)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=\"4\">uk_south</td>\n      <td>1-2</td>\n      <td>1\u00d7</td>\n    </tr>\n    <tr>\n      <td>2-93</td>\n      <td>2\u00d7</td>\n    </tr>\n    <tr>\n      <td>93-117</td>\n      <td>3\u00d7</td>\n    </tr>\n    <tr>\n      <td>117-128</td>\n      <td>4\u00d7</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">uk_west</td>\n      <td>1-2</td>\n      <td>2\u00d7</td>\n    </tr>\n    <tr>\n      <td>2-93</td>\n      <td>4\u00d7</td>\n    </tr>\n    <tr>\n      <td>93-117</td>\n      <td>6\u00d7</td>\n    </tr>\n    <tr>\n      <td>117-128</td>\n      <td>8\u00d7</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">westeurope</td>\n      <td>1-2</td>\n      <td>3\u00d7</td>\n    </tr>\n    <tr>\n      <td>2-93</td>\n      <td>6\u00d7</td>\n    </tr>\n    <tr>\n      <td>93-117</td>\n      <td>9\u00d7</td>\n    </tr>\n    <tr>\n      <td>117-128</td>\n      <td>12\u00d7</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">northeurope</td>\n      <td>1-2</td>\n      <td>4\u00d7</td>\n    </tr>\n    <tr>\n      <td>2-93</td>\n      <td>8\u00d7</td>\n    </tr>\n    <tr>\n      <td>93-117</td>\n      <td>12\u00d7</td>\n    </tr>\n    <tr>\n      <td>117-128</td>\n      <td>16\u00d7</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">eastus</td>\n      <td>1-2</td>\n      <td>5\u00d7</td>\n    </tr>\n    <tr>\n      <td>2-93</td>\n      <td>10\u00d7</td>\n    </tr>\n    <tr>\n      <td>93-117</td>\n      <td>15\u00d7</td>\n    </tr>\n    <tr>\n      <td>117-128</td>\n      <td>20\u00d7</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">westus2</td>\n      <td>1-2</td>\n      <td>6\u00d7</td>\n    </tr>\n    <tr>\n      <td>2-93</td>\n      <td>12\u00d7</td>\n    </tr>\n    <tr>\n      <td>93-117</td>\n      <td>18\u00d7</td>\n    </tr>\n    <tr>\n      <td>117-128</td>\n      <td>24\u00d7</td>\n    </tr>\n  </tbody>\n</table>\n\n## GPU Accelerated Virtual Machines and Container Instances Pricing\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Operating System</th>\n      <th>Billable Hours Range</th>\n      <th>Charge Multiplier</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=\"3\">Linux</td>\n      <td>> 580.5 - 744.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <td>> 222.3 - 580.5</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <td>> 0.0 - 222.3</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <td rowspan=\"3\">Windows</td>\n      <td>> 580.5 - 744.0</td>\n      <td>1.1</td>\n    </tr>\n    <tr>\n      <td>> 222.3 - 580.5</td>\n      <td>2.2</td>\n    </tr>\n    <tr>\n      <td>> 0.0 - 222.3</td>\n      <td>3.3</td>\n    </tr>\n  </tbody>\n</table>\n\n## Managed Disk Pricing: Storage and Transaction Fees\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Volume Size Range (GB)</th>\n      <th>UK South</th>\n      <th>UK West</th>\n      <th>West Europe</th>\n      <th>North Europe</th>\n      <th>East US</th>\n      <th>West US 2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>30 \u2013 7,073</td>\n      <td>$4 \u00d7 volume_size_gb</td>\n      <td>$8 \u00d7 volume_size_gb</td>\n      <td>$12 \u00d7 volume_size_gb</td>\n      <td>$16 \u00d7 volume_size_gb</td>\n      <td>$20 \u00d7 volume_size_gb</td>\n      <td>$24 \u00d7 volume_size_gb</td>\n    </tr>\n    <tr>\n      <td>7,073 \u2013 7,213</td>\n      <td>$3 \u00d7 volume_size_gb</td>\n      <td>$6 \u00d7 volume_size_gb</td>\n      <td>$9 \u00d7 volume_size_gb</td>\n      <td>$12 \u00d7 volume_size_gb</td>\n      <td>$15 \u00d7 volume_size_gb</td>\n      <td>$18 \u00d7 volume_size_gb</td>\n    </tr>\n    <tr>\n      <td>7,213 \u2013 18,121</td>\n      <td>$2 \u00d7 volume_size_gb</td>\n      <td>$4 \u00d7 volume_size_gb</td>\n      <td>$6 \u00d7 volume_size_gb</td>\n      <td>$8 \u00d7 volume_size_gb</td>\n      <td>$10 \u00d7 volume_size_gb</td>\n      <td>$12 \u00d7 volume_size_gb</td>\n    </tr>\n    <tr>\n      <td>18,121 \u2013 32,768</td>\n      <td>$1 \u00d7 volume_size_gb</td>\n      <td>$2 \u00d7 volume_size_gb</td>\n      <td>$3 \u00d7 volume_size_gb</td>\n      <td>$4 \u00d7 volume_size_gb</td>\n      <td>$5 \u00d7 volume_size_gb</td>\n      <td>$6 \u00d7 volume_size_gb</td>\n    </tr>\n  </tbody>\n</table>\n\n## Data Transfer Pricing: Outbound Data Egress Fees\n\n**Data Transfer Out**\n\nThis charge category applies to data transferred out of Azure, measured in gigabytes (GB). The charge is calculated based on the amount of data transferred out, with tiered pricing applied. For data transfers between 21,359.3 GB and 100,000.0 GB, the charge is $1 per GB of data transferred out. For data transfers up to 21,359.3 GB, the charge is $2 per GB of data transferred out.\n\nThe Data Transfer Out charge is assessed to reflect the costs associated with transferring data out of Azure. This charge helps to ensure that customers are aware of and account for the data egress costs incurred when transferring data out of the platform. By applying a tiered pricing structure, customers can better plan and manage their data transfer costs, taking into account their specific usage patterns. All charges are billed in United States Dollars (USD).\n\n## Data Ingress Fees for Incoming Data Transfers Across Azure Services\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Data Transfer In (GB)</th>\n      <th>Charge Multiplier</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>> 97699.5</td>\n      <td>1 \u00d7 data_transfer_in_gb</td>\n    </tr>\n    <tr>\n      <td>80476.8 - 97699.5</td>\n      <td>2 \u00d7 data_transfer_in_gb</td>\n    </tr>\n    <tr>\n      <td>12217.0 - 80476.8</td>\n      <td>3 \u00d7 data_transfer_in_gb</td>\n    </tr>\n    <tr>\n      <td>0.0 - 12217.0</td>\n      <td>4 \u00d7 data_transfer_in_gb</td>\n    </tr>\n  </tbody>\n</table>\n\n## Storage Transaction Fees and Charges\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Transaction Range (Millions)</th>\n      <th>Charge Multiplier</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=\"3\">uk_south</td>\n      <td>0 \u2013 280.3</td>\n      <td>1.0 \u00d7 tx_millions</td>\n    </tr>\n    <tr>\n      <td>280.3 \u2013 491.6</td>\n      <td>2.0 \u00d7 tx_millions</td>\n    </tr>\n    <tr>\n      <td>491.6 \u2013 500.0</td>\n      <td>3.0 \u00d7 tx_millions</td>\n    </tr>\n    <tr>\n      <td rowspan=\"3\">uk_west</td>\n      <td>0 \u2013 280.3</td>\n      <td>1.1 \u00d7 tx_millions</td>\n    </tr>\n    <tr>\n      <td>280.3 \u2013 491.6</td>\n      <td>2.2 \u00d7 tx_millions</td>\n    </tr>\n    <tr>\n      <td>491.6 \u2013 500.0</td>\n      <td>3.3 \u00d7 tx_millions</td>\n    </tr>\n    <tr>\n      <td rowspan=\"3\">westeurope</td>\n      <td>0 \u2013 280.3</td>\n      <td>1.2 \u00d7 tx_millions</td>\n    </tr>\n    <tr>\n      <td>280.3 \u2013 491.6</td>\n      <td>2.4 \u00d7 tx_millions</td>\n    </tr>\n    <tr>\n      <td>491.6 \u2013 500.0</td>\n      <td>3.6 \u00d7 tx_millions</td>\n    </tr>\n    <tr>\n      <td rowspan=\"3\">northeurope</td>\n      <td>0 \u2013 280.3</td>\n      <td>1.3 \u00d7 tx_millions</td>\n    </tr>\n    <tr>\n      <td>280.3 \u2013 491.6</td>\n      <td>2.6 \u00d7 tx_millions</td>\n    </tr>\n    <tr>\n      <td>491.6 \u2013 500.0</td>\n      <td>3.9 \u00d7 tx_millions</td>\n    </tr>\n    <tr>\n      <td rowspan=\"3\">eastus</td>\n      <td>0 \u2013 280.3</td>\n      <td>1.4 \u00d7 tx_millions</td>\n    </tr>\n    <tr>\n      <td>280.3 \u2013 491.6</td>\n      <td>2.8 \u00d7 tx_millions</td>\n    </tr>\n    <tr>\n      <td>491.6 \u2013 500.0</td>\n      <td>4.2 \u00d7 tx_millions</td>\n    </tr>\n    <tr>\n      <td rowspan=\"3\">westus2</td>\n      <td>0 \u2013 280.3</td>\n      <td>1.5 \u00d7 tx_millions</td>\n    </tr>\n    <tr>\n      <td>280.3 \u2013 491.6</td>\n      <td>3.0 \u00d7 tx_millions</td>\n    </tr>\n    <tr>\n      <td>491.6 \u2013 500.0</td>\n      <td>4.5 \u00d7 tx_millions</td>\n    </tr>\n  </tbody>\n</table>\n\n## Public IP Addresses and Reserved IP Addresses Pricing\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Public IP Range</th>\n      <th>Charge (USD)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 45</td>\n      <td>$1 per IP</td>\n    </tr>\n    <tr>\n      <td>46 \u2013 99</td>\n      <td>$2 per IP</td>\n    </tr>\n  </tbody>\n</table>\n\n## Load Balancer Pricing and Charges\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Tier</th>\n      <th>Charge</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Standard</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>Premium</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>Basic</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <td>Isolated</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n\n## \"Kubernetes Service (AKS) Cluster Management Fees and Charges\"\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Geo Region</th>\n      <th>AKS Nodes (0-36)</th>\n      <th>AKS Nodes (37-740)</th>\n      <th>AKS Nodes (741-1000)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK South</td>\n      <td>$1 per node</td>\n      <td>$2 per node</td>\n      <td>$3 per node</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>$2 per node</td>\n      <td>$4 per node</td>\n      <td>$6 per node</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>$3 per node</td>\n      <td>$6 per node</td>\n      <td>$9 per node</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>$4 per node</td>\n      <td>$8 per node</td>\n      <td>$12 per node</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>$5 per node</td>\n      <td>$10 per node</td>\n      <td>$15 per node</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>$6 per node</td>\n      <td>$12 per node</td>\n      <td>$18 per node</td>\n    </tr>\n  </tbody>\n</table>\n\n## Function App Consumption Plan Pricing and Charges\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Invocations Range</th>\n      <th>Charge Multiplier</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>612,901,319 - 1,000,000,000</td>\n      <td>1x</td>\n    </tr>\n    <tr>\n      <td>406,894,427 - 612,901,318</td>\n      <td>2x</td>\n    </tr>\n    <tr>\n      <td>309,509,409 - 406,894,426</td>\n      <td>3x</td>\n    </tr>\n    <tr>\n      <td>0 - 309,509,408</td>\n      <td>4x</td>\n    </tr>\n  </tbody>\n</table>\n\n## SQL Database Fees and Charges\n\nThis charge category applies to SQL core usage in Microsoft Azure, calculated based on the number of virtual cores (vCores) utilized. The charge is determined by the total number of vCores used, with varying rates applied to different tiers of usage.\n\nFor SQL core usage up to 34 vCores, the charge is calculated at a rate of $1 per vCore, multiplied by the total number of vCores used. For usage between 35 and 68 vCores, the charge is calculated at a rate of $2 per vCore, multiplied by the total number of vCores used. For usage between 69 and 127 vCores, the charge is calculated at a rate of $3 per vCore, multiplied by the total number of vCores used. All charges are billed in USD.\n\n## Snapshot Storage Fee\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Image Snapshot Size (GB)</th>\n      <th>Charge Multiplier</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0.00 \u2013 60,380.49</td>\n      <td>3 \u00d7 image_snapshot_gb</td>\n    </tr>\n    <tr>\n      <td>60,380.50 \u2013 70,041.39</td>\n      <td>2 \u00d7 image_snapshot_gb</td>\n    </tr>\n    <tr>\n      <td>70,041.40 \u2013 100,000.00</td>\n      <td>1 \u00d7 image_snapshot_gb</td>\n    </tr>\n  </tbody>\n</table>\n\n## App Service Fees and Charges\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Pricing Tier</th>\n      <th>Charge (USD)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Premium</td>\n      <td>$1</td>\n    </tr>\n    <tr>\n      <td>Basic</td>\n      <td>$2</td>\n    </tr>\n    <tr>\n      <td>Isolated</td>\n      <td>$3</td>\n    </tr>\n    <tr>\n      <td>Standard</td>\n      <td>$4</td>\n    </tr>\n  </tbody>\n</table>\n\nMicrosoft Azure's cloud pricing policy outlines the terms and conditions governing the use of our cloud services, providing transparency into the costs associated with each offering. All prices are quoted in United States Dollars (USD) and are subject to change. For questions or concerns regarding this policy, please contact Azure Support through the Azure portal or by visiting our website for more information.\n\n**Policy Effective Date:** August 21, 2025\n\n", {"compute_vm_fee": {"description": "compute_vm_fee conditions by location and virtual_cores:\n\nfor uk_south the following charges apply:\n  - if virtual_cores in [1, 2), charge is 1 \u00d7 virtual_cores\n  - if virtual_cores in [2, 93), charge is 2 \u00d7 virtual_cores\n  - if virtual_cores in [93, 117), charge is 3 \u00d7 virtual_cores\n  - if virtual_cores in [117, 128), charge is 4 \u00d7 virtual_cores\nfor uk_west the following charges apply:\n  - if virtual_cores in [1, 2), charge is 2 \u00d7 virtual_cores\n  - if virtual_cores in [2, 93), charge is 4 \u00d7 virtual_cores\n  - if virtual_cores in [93, 117), charge is 6 \u00d7 virtual_cores\n  - if virtual_cores in [117, 128), charge is 8 \u00d7 virtual_cores\nfor westeurope the following charges apply:\n  - if virtual_cores in [1, 2), charge is 3 \u00d7 virtual_cores\n  - if virtual_cores in [2, 93), charge is 6 \u00d7 virtual_cores\n  - if virtual_cores in [93, 117), charge is 9 \u00d7 virtual_cores\n  - if virtual_cores in [117, 128), charge is 12 \u00d7 virtual_cores\nfor northeurope the following charges apply:\n  - if virtual_cores in [1, 2), charge is 4 \u00d7 virtual_cores\n  - if virtual_cores in [2, 93), charge is 8 \u00d7 virtual_cores\n  - if virtual_cores in [93, 117), charge is 12 \u00d7 virtual_cores\n  - if virtual_cores in [117, 128), charge is 16 \u00d7 virtual_cores\nfor eastus the following charges apply:\n  - if virtual_cores in [1, 2), charge is 5 \u00d7 virtual_cores\n  - if virtual_cores in [2, 93), charge is 10 \u00d7 virtual_cores\n  - if virtual_cores in [93, 117), charge is 15 \u00d7 virtual_cores\n  - if virtual_cores in [117, 128), charge is 20 \u00d7 virtual_cores\nfor westus2 the following charges apply:\n  - if virtual_cores in [1, 2), charge is 6 \u00d7 virtual_cores\n  - if virtual_cores in [2, 93), charge is 12 \u00d7 virtual_cores\n  - if virtual_cores in [93, 117), charge is 18 \u00d7 virtual_cores\n  - if virtual_cores in [117, 128), charge is 24 \u00d7 virtual_cores", "code": "def compute_charge(region, vcpu_count):\n    if region == 'uk_south' and 1 <= vcpu_count < 2: return 1 * vcpu_count * 1\n    elif region == 'uk_south' and 2 <= vcpu_count < 93: return 2 * vcpu_count * 1\n    elif region == 'uk_south' and 93 <= vcpu_count < 117: return 3 * vcpu_count * 1\n    elif region == 'uk_south' and 117 <= vcpu_count < 128: return 4 * vcpu_count * 1\n    elif region == 'uk_west' and 1 <= vcpu_count < 2: return 1 * vcpu_count * 2\n    elif region == 'uk_west' and 2 <= vcpu_count < 93: return 2 * vcpu_count * 2\n    elif region == 'uk_west' and 93 <= vcpu_count < 117: return 3 * vcpu_count * 2\n    elif region == 'uk_west' and 117 <= vcpu_count < 128: return 4 * vcpu_count * 2\n    elif region == 'westeurope' and 1 <= vcpu_count < 2: return 1 * vcpu_count * 3\n    elif region == 'westeurope' and 2 <= vcpu_count < 93: return 2 * vcpu_count * 3\n    elif region == 'westeurope' and 93 <= vcpu_count < 117: return 3 * vcpu_count * 3\n    elif region == 'westeurope' and 117 <= vcpu_count < 128: return 4 * vcpu_count * 3\n    elif region == 'northeurope' and 1 <= vcpu_count < 2: return 1 * vcpu_count * 4\n    elif region == 'northeurope' and 2 <= vcpu_count < 93: return 2 * vcpu_count * 4\n    elif region == 'northeurope' and 93 <= vcpu_count < 117: return 3 * vcpu_count * 4\n    elif region == 'northeurope' and 117 <= vcpu_count < 128: return 4 * vcpu_count * 4\n    elif region == 'eastus' and 1 <= vcpu_count < 2: return 1 * vcpu_count * 5\n    elif region == 'eastus' and 2 <= vcpu_count < 93: return 2 * vcpu_count * 5\n    elif region == 'eastus' and 93 <= vcpu_count < 117: return 3 * vcpu_count * 5\n    elif region == 'eastus' and 117 <= vcpu_count < 128: return 4 * vcpu_count * 5\n    elif region == 'westus2' and 1 <= vcpu_count < 2: return 1 * vcpu_count * 6\n    elif region == 'westus2' and 2 <= vcpu_count < 93: return 2 * vcpu_count * 6\n    elif region == 'westus2' and 93 <= vcpu_count < 117: return 3 * vcpu_count * 6\n    elif region == 'westus2' and 117 <= vcpu_count < 128: return 4 * vcpu_count * 6\n    else: raise ValueError(f'region or vcpu_count is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "vcpu_count": {"unit": "vCPUs", "description": "Number of virtual CPUs allocated", "dtype": "int"}}, "synonyms": ["vm runtime charge", "compute instance fee", "virtual machine cost"], "charge_description": "Charge for running virtual machines based on vCPU, memory, OS, and commitment."}, "gpu_compute_fee": {"description": "gpu_compute_fee conditions by operating_system and billable_hours:\n\nfor linux the following charges apply:\n  - if billable_hours in [580.5, 744.0), charge is 1.0 \u00d7 billable_hours\n  - if billable_hours in [222.3, 580.5), charge is 2.0 \u00d7 billable_hours\n  - if billable_hours in [0.0, 222.3), charge is 3.0 \u00d7 billable_hours\nfor windows the following charges apply:\n  - if billable_hours in [580.5, 744.0), charge is 1.1 \u00d7 billable_hours\n  - if billable_hours in [222.3, 580.5), charge is 2.2 \u00d7 billable_hours\n  - if billable_hours in [0.0, 222.3), charge is 3.3 \u00d7 billable_hours", "code": "def compute_charge(os_type, usage_hours):\n    if os_type == 'linux' and 580.5 <= usage_hours < 744.0: return 1 * usage_hours * 1.0\n    elif os_type == 'linux' and 222.3 <= usage_hours < 580.5: return 2 * usage_hours * 1.0\n    elif os_type == 'linux' and 0.0 <= usage_hours < 222.3: return 3 * usage_hours * 1.0\n    elif os_type == 'windows' and 580.5 <= usage_hours < 744.0: return 1 * usage_hours * 1.1\n    elif os_type == 'windows' and 222.3 <= usage_hours < 580.5: return 2 * usage_hours * 1.1\n    elif os_type == 'windows' and 0.0 <= usage_hours < 222.3: return 3 * usage_hours * 1.1\n    else: raise ValueError(f'os_type or usage_hours is out of expected range')", "variables_used": {"os_type": {"unit": "os", "description": "Operating system for the compute workload", "dtype": "str"}, "usage_hours": {"unit": "hours", "description": "Total runtime in hours over the billing window", "dtype": "float"}}, "synonyms": ["gpu instance fee", "accelerator charge", "gpu runtime cost"], "charge_description": "Charge for GPU-enabled compute usage."}, "managed_disk_fee": {"description": "managed_disk_fee conditions by geo_region and volume_size_gb:\n\nfor uk_south the following charges apply:\n  - if volume_size_gb in [18121, 32768), charge is 1 \u00d7 volume_size_gb\n  - if volume_size_gb in [7213, 18121), charge is 2 \u00d7 volume_size_gb\n  - if volume_size_gb in [7073, 7213), charge is 3 \u00d7 volume_size_gb\n  - if volume_size_gb in [30, 7073), charge is 4 \u00d7 volume_size_gb\nfor uk_west the following charges apply:\n  - if volume_size_gb in [18121, 32768), charge is 2 \u00d7 volume_size_gb\n  - if volume_size_gb in [7213, 18121), charge is 4 \u00d7 volume_size_gb\n  - if volume_size_gb in [7073, 7213), charge is 6 \u00d7 volume_size_gb\n  - if volume_size_gb in [30, 7073), charge is 8 \u00d7 volume_size_gb\nfor westeurope the following charges apply:\n  - if volume_size_gb in [18121, 32768), charge is 3 \u00d7 volume_size_gb\n  - if volume_size_gb in [7213, 18121), charge is 6 \u00d7 volume_size_gb\n  - if volume_size_gb in [7073, 7213), charge is 9 \u00d7 volume_size_gb\n  - if volume_size_gb in [30, 7073), charge is 12 \u00d7 volume_size_gb\nfor northeurope the following charges apply:\n  - if volume_size_gb in [18121, 32768), charge is 4 \u00d7 volume_size_gb\n  - if volume_size_gb in [7213, 18121), charge is 8 \u00d7 volume_size_gb\n  - if volume_size_gb in [7073, 7213), charge is 12 \u00d7 volume_size_gb\n  - if volume_size_gb in [30, 7073), charge is 16 \u00d7 volume_size_gb\nfor eastus the following charges apply:\n  - if volume_size_gb in [18121, 32768), charge is 5 \u00d7 volume_size_gb\n  - if volume_size_gb in [7213, 18121), charge is 10 \u00d7 volume_size_gb\n  - if volume_size_gb in [7073, 7213), charge is 15 \u00d7 volume_size_gb\n  - if volume_size_gb in [30, 7073), charge is 20 \u00d7 volume_size_gb\nfor westus2 the following charges apply:\n  - if volume_size_gb in [18121, 32768), charge is 6 \u00d7 volume_size_gb\n  - if volume_size_gb in [7213, 18121), charge is 12 \u00d7 volume_size_gb\n  - if volume_size_gb in [7073, 7213), charge is 18 \u00d7 volume_size_gb\n  - if volume_size_gb in [30, 7073), charge is 24 \u00d7 volume_size_gb", "code": "def compute_charge(region, disk_size_gb):\n    if region == 'uk_south' and 18121 <= disk_size_gb < 32768: return 1 * disk_size_gb * 1\n    elif region == 'uk_south' and 7213 <= disk_size_gb < 18121: return 2 * disk_size_gb * 1\n    elif region == 'uk_south' and 7073 <= disk_size_gb < 7213: return 3 * disk_size_gb * 1\n    elif region == 'uk_south' and 30 <= disk_size_gb < 7073: return 4 * disk_size_gb * 1\n    elif region == 'uk_west' and 18121 <= disk_size_gb < 32768: return 1 * disk_size_gb * 2\n    elif region == 'uk_west' and 7213 <= disk_size_gb < 18121: return 2 * disk_size_gb * 2\n    elif region == 'uk_west' and 7073 <= disk_size_gb < 7213: return 3 * disk_size_gb * 2\n    elif region == 'uk_west' and 30 <= disk_size_gb < 7073: return 4 * disk_size_gb * 2\n    elif region == 'westeurope' and 18121 <= disk_size_gb < 32768: return 1 * disk_size_gb * 3\n    elif region == 'westeurope' and 7213 <= disk_size_gb < 18121: return 2 * disk_size_gb * 3\n    elif region == 'westeurope' and 7073 <= disk_size_gb < 7213: return 3 * disk_size_gb * 3\n    elif region == 'westeurope' and 30 <= disk_size_gb < 7073: return 4 * disk_size_gb * 3\n    elif region == 'northeurope' and 18121 <= disk_size_gb < 32768: return 1 * disk_size_gb * 4\n    elif region == 'northeurope' and 7213 <= disk_size_gb < 18121: return 2 * disk_size_gb * 4\n    elif region == 'northeurope' and 7073 <= disk_size_gb < 7213: return 3 * disk_size_gb * 4\n    elif region == 'northeurope' and 30 <= disk_size_gb < 7073: return 4 * disk_size_gb * 4\n    elif region == 'eastus' and 18121 <= disk_size_gb < 32768: return 1 * disk_size_gb * 5\n    elif region == 'eastus' and 7213 <= disk_size_gb < 18121: return 2 * disk_size_gb * 5\n    elif region == 'eastus' and 7073 <= disk_size_gb < 7213: return 3 * disk_size_gb * 5\n    elif region == 'eastus' and 30 <= disk_size_gb < 7073: return 4 * disk_size_gb * 5\n    elif region == 'westus2' and 18121 <= disk_size_gb < 32768: return 1 * disk_size_gb * 6\n    elif region == 'westus2' and 7213 <= disk_size_gb < 18121: return 2 * disk_size_gb * 6\n    elif region == 'westus2' and 7073 <= disk_size_gb < 7213: return 3 * disk_size_gb * 6\n    elif region == 'westus2' and 30 <= disk_size_gb < 7073: return 4 * disk_size_gb * 6\n    else: raise ValueError(f'region or disk_size_gb is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "disk_size_gb": {"unit": "GB", "description": "Size of each managed disk", "dtype": "int"}}, "synonyms": ["disk charge", "managed storage fee", "block storage cost"], "charge_description": "Charge for managed disks based on type, size, and count."}, "data_egress_fee": {"description": "if data_transfer_out_gb in [21359.3, 100000.0), charge is 1 \u00d7 data_transfer_out_gb; if data_transfer_out_gb in [0.0, 21359.3), charge is 2 \u00d7 data_transfer_out_gb The variable 'data_transfer_out_gb' is measured in GB.", "code": "def compute_charge(data_egress_gb):\n    if 21359.3 <= data_egress_gb < 100000.0: return 1 * data_egress_gb\n    elif 0.0 <= data_egress_gb < 21359.3: return 2 * data_egress_gb\n    else: raise ValueError(f'data_egress_gb is out of expected range')", "variables_used": {"data_egress_gb": {"unit": "GB", "description": "Outbound data transferred from Azure", "dtype": "float"}}, "synonyms": ["egress charge", "outbound data fee", "data transfer out"], "charge_description": "Charge for data leaving Azure regions."}, "data_ingress_fee": {"description": "if data_transfer_in_gb in [97699.5, 100000.0), charge is 1 \u00d7 data_transfer_in_gb; if data_transfer_in_gb in [80476.8, 97699.5), charge is 2 \u00d7 data_transfer_in_gb; if data_transfer_in_gb in [12217.0, 80476.8), charge is 3 \u00d7 data_transfer_in_gb; if data_transfer_in_gb in [0.0, 12217.0), charge is 4 \u00d7 data_transfer_in_gb The variable 'data_transfer_in_gb' is measured in GB.", "code": "def compute_charge(data_ingress_gb):\n    if 97699.5 <= data_ingress_gb < 100000.0: return 1 * data_ingress_gb\n    elif 80476.8 <= data_ingress_gb < 97699.5: return 2 * data_ingress_gb\n    elif 12217.0 <= data_ingress_gb < 80476.8: return 3 * data_ingress_gb\n    elif 0.0 <= data_ingress_gb < 12217.0: return 4 * data_ingress_gb\n    else: raise ValueError(f'data_ingress_gb is out of expected range')", "variables_used": {"data_ingress_gb": {"unit": "GB", "description": "Inbound data transferred to Azure", "dtype": "float"}}, "synonyms": ["ingress charge", "inbound data fee", "data transfer in"], "charge_description": "Charge for data entering Azure regions where applicable."}, "storage_transaction_fee": {"description": "storage_transaction_fee conditions by location and tx_millions:\n\nfor uk_south the following charges apply:\n  - if tx_millions in [0.0, 280.3), charge is 1.0 \u00d7 tx_millions\n  - if tx_millions in [280.3, 491.6), charge is 2.0 \u00d7 tx_millions\n  - if tx_millions in [491.6, 500.0), charge is 3.0 \u00d7 tx_millions\nfor uk_west the following charges apply:\n  - if tx_millions in [0.0, 280.3), charge is 1.1 \u00d7 tx_millions\n  - if tx_millions in [280.3, 491.6), charge is 2.2 \u00d7 tx_millions\n  - if tx_millions in [491.6, 500.0), charge is 3.3 \u00d7 tx_millions\nfor westeurope the following charges apply:\n  - if tx_millions in [0.0, 280.3), charge is 1.2 \u00d7 tx_millions\n  - if tx_millions in [280.3, 491.6), charge is 2.4 \u00d7 tx_millions\n  - if tx_millions in [491.6, 500.0), charge is 3.6 \u00d7 tx_millions\nfor northeurope the following charges apply:\n  - if tx_millions in [0.0, 280.3), charge is 1.3 \u00d7 tx_millions\n  - if tx_millions in [280.3, 491.6), charge is 2.6 \u00d7 tx_millions\n  - if tx_millions in [491.6, 500.0), charge is 3.9 \u00d7 tx_millions\nfor eastus the following charges apply:\n  - if tx_millions in [0.0, 280.3), charge is 1.4 \u00d7 tx_millions\n  - if tx_millions in [280.3, 491.6), charge is 2.8 \u00d7 tx_millions\n  - if tx_millions in [491.6, 500.0), charge is 4.2 \u00d7 tx_millions\nfor westus2 the following charges apply:\n  - if tx_millions in [0.0, 280.3), charge is 1.5 \u00d7 tx_millions\n  - if tx_millions in [280.3, 491.6), charge is 3.0 \u00d7 tx_millions\n  - if tx_millions in [491.6, 500.0), charge is 4.5 \u00d7 tx_millions", "code": "def compute_charge(region, storage_transactions_millions):\n    if region == 'uk_south' and 0.0 <= storage_transactions_millions < 280.3: return 1 * storage_transactions_millions * 1.0\n    elif region == 'uk_south' and 280.3 <= storage_transactions_millions < 491.6: return 2 * storage_transactions_millions * 1.0\n    elif region == 'uk_south' and 491.6 <= storage_transactions_millions < 500.0: return 3 * storage_transactions_millions * 1.0\n    elif region == 'uk_west' and 0.0 <= storage_transactions_millions < 280.3: return 1 * storage_transactions_millions * 1.1\n    elif region == 'uk_west' and 280.3 <= storage_transactions_millions < 491.6: return 2 * storage_transactions_millions * 1.1\n    elif region == 'uk_west' and 491.6 <= storage_transactions_millions < 500.0: return 3 * storage_transactions_millions * 1.1\n    elif region == 'westeurope' and 0.0 <= storage_transactions_millions < 280.3: return 1 * storage_transactions_millions * 1.2\n    elif region == 'westeurope' and 280.3 <= storage_transactions_millions < 491.6: return 2 * storage_transactions_millions * 1.2\n    elif region == 'westeurope' and 491.6 <= storage_transactions_millions < 500.0: return 3 * storage_transactions_millions * 1.2\n    elif region == 'northeurope' and 0.0 <= storage_transactions_millions < 280.3: return 1 * storage_transactions_millions * 1.3\n    elif region == 'northeurope' and 280.3 <= storage_transactions_millions < 491.6: return 2 * storage_transactions_millions * 1.3\n    elif region == 'northeurope' and 491.6 <= storage_transactions_millions < 500.0: return 3 * storage_transactions_millions * 1.3\n    elif region == 'eastus' and 0.0 <= storage_transactions_millions < 280.3: return 1 * storage_transactions_millions * 1.4\n    elif region == 'eastus' and 280.3 <= storage_transactions_millions < 491.6: return 2 * storage_transactions_millions * 1.4\n    elif region == 'eastus' and 491.6 <= storage_transactions_millions < 500.0: return 3 * storage_transactions_millions * 1.4\n    elif region == 'westus2' and 0.0 <= storage_transactions_millions < 280.3: return 1 * storage_transactions_millions * 1.5\n    elif region == 'westus2' and 280.3 <= storage_transactions_millions < 491.6: return 2 * storage_transactions_millions * 1.5\n    elif region == 'westus2' and 491.6 <= storage_transactions_millions < 500.0: return 3 * storage_transactions_millions * 1.5\n    else: raise ValueError(f'region or storage_transactions_millions is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "storage_transactions_millions": {"unit": "million tx", "description": "Number of storage account operations in millions", "dtype": "float"}}, "synonyms": ["storage ops fee", "transaction charge", "storage request cost"], "charge_description": "Charge for storage account transactions and redundancy level."}, "public_ip_fee": {"description": "if public_ips in [0, 46), charge is 1 \u00d7 public_ips; if public_ips in [46, 100), charge is 2 \u00d7 public_ips The variable 'public_ips' is measured in IPs.", "code": "def compute_charge(public_ip_count):\n    if 0 <= public_ip_count < 46: return 1 * public_ip_count\n    elif 46 <= public_ip_count < 100: return 2 * public_ip_count\n    else: raise ValueError(f'public_ip_count is out of expected range')", "variables_used": {"public_ip_count": {"unit": "IPs", "description": "Number of public IP addresses allocated", "dtype": "int"}}, "synonyms": ["ip address charge", "public ip cost", "elastic ip fee"], "charge_description": "Charge for public IP addresses allocated."}, "load_balancer_fee": {"description": "if sku_tier is 'standard', charge is 1; if sku_tier is 'premium', charge is 2; if sku_tier is 'basic', charge is 3; if sku_tier is 'isolated', charge is 4 The variable 'sku_tier' is measured in tier.", "code": "def compute_charge(service_tier):\n    if service_tier == 'standard': return 1\n    elif service_tier == 'premium': return 2\n    elif service_tier == 'basic': return 3\n    elif service_tier == 'isolated': return 4\n    else: raise ValueError(f'Unknown value for service_tier: {service_tier}')", "variables_used": {"service_tier": {"unit": "tier", "description": "Service tier for managed services", "dtype": "str"}}, "synonyms": ["lb fee", "balancer charge", "traffic distribution cost"], "charge_description": "Charge for load balancer rules and tier."}, "aks_cluster_fee": {"description": "aks_cluster_fee conditions by geo_region and aks_nodes:\n\nfor uk_south the following charges apply:\n  - if aks_nodes in [0, 37), charge is 1 \u00d7 aks_nodes\n  - if aks_nodes in [37, 741), charge is 2 \u00d7 aks_nodes\n  - if aks_nodes in [741, 1000), charge is 3 \u00d7 aks_nodes\nfor uk_west the following charges apply:\n  - if aks_nodes in [0, 37), charge is 2 \u00d7 aks_nodes\n  - if aks_nodes in [37, 741), charge is 4 \u00d7 aks_nodes\n  - if aks_nodes in [741, 1000), charge is 6 \u00d7 aks_nodes\nfor westeurope the following charges apply:\n  - if aks_nodes in [0, 37), charge is 3 \u00d7 aks_nodes\n  - if aks_nodes in [37, 741), charge is 6 \u00d7 aks_nodes\n  - if aks_nodes in [741, 1000), charge is 9 \u00d7 aks_nodes\nfor northeurope the following charges apply:\n  - if aks_nodes in [0, 37), charge is 4 \u00d7 aks_nodes\n  - if aks_nodes in [37, 741), charge is 8 \u00d7 aks_nodes\n  - if aks_nodes in [741, 1000), charge is 12 \u00d7 aks_nodes\nfor eastus the following charges apply:\n  - if aks_nodes in [0, 37), charge is 5 \u00d7 aks_nodes\n  - if aks_nodes in [37, 741), charge is 10 \u00d7 aks_nodes\n  - if aks_nodes in [741, 1000), charge is 15 \u00d7 aks_nodes\nfor westus2 the following charges apply:\n  - if aks_nodes in [0, 37), charge is 6 \u00d7 aks_nodes\n  - if aks_nodes in [37, 741), charge is 12 \u00d7 aks_nodes\n  - if aks_nodes in [741, 1000), charge is 18 \u00d7 aks_nodes", "code": "def compute_charge(region, kubernetes_node_count):\n    if region == 'uk_south' and 0 <= kubernetes_node_count < 37: return 1 * kubernetes_node_count * 1\n    elif region == 'uk_south' and 37 <= kubernetes_node_count < 741: return 2 * kubernetes_node_count * 1\n    elif region == 'uk_south' and 741 <= kubernetes_node_count < 1000: return 3 * kubernetes_node_count * 1\n    elif region == 'uk_west' and 0 <= kubernetes_node_count < 37: return 1 * kubernetes_node_count * 2\n    elif region == 'uk_west' and 37 <= kubernetes_node_count < 741: return 2 * kubernetes_node_count * 2\n    elif region == 'uk_west' and 741 <= kubernetes_node_count < 1000: return 3 * kubernetes_node_count * 2\n    elif region == 'westeurope' and 0 <= kubernetes_node_count < 37: return 1 * kubernetes_node_count * 3\n    elif region == 'westeurope' and 37 <= kubernetes_node_count < 741: return 2 * kubernetes_node_count * 3\n    elif region == 'westeurope' and 741 <= kubernetes_node_count < 1000: return 3 * kubernetes_node_count * 3\n    elif region == 'northeurope' and 0 <= kubernetes_node_count < 37: return 1 * kubernetes_node_count * 4\n    elif region == 'northeurope' and 37 <= kubernetes_node_count < 741: return 2 * kubernetes_node_count * 4\n    elif region == 'northeurope' and 741 <= kubernetes_node_count < 1000: return 3 * kubernetes_node_count * 4\n    elif region == 'eastus' and 0 <= kubernetes_node_count < 37: return 1 * kubernetes_node_count * 5\n    elif region == 'eastus' and 37 <= kubernetes_node_count < 741: return 2 * kubernetes_node_count * 5\n    elif region == 'eastus' and 741 <= kubernetes_node_count < 1000: return 3 * kubernetes_node_count * 5\n    elif region == 'westus2' and 0 <= kubernetes_node_count < 37: return 1 * kubernetes_node_count * 6\n    elif region == 'westus2' and 37 <= kubernetes_node_count < 741: return 2 * kubernetes_node_count * 6\n    elif region == 'westus2' and 741 <= kubernetes_node_count < 1000: return 3 * kubernetes_node_count * 6\n    else: raise ValueError(f'region or kubernetes_node_count is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "kubernetes_node_count": {"unit": "nodes", "description": "Number of AKS nodes in the cluster", "dtype": "int"}}, "synonyms": ["kubernetes fee", "aks charge", "container cluster cost"], "charge_description": "Charge for AKS clusters based on node count and type."}, "function_app_fee": {"description": "if function_calls in [612901319, 1000000000), charge is 1 \u00d7 function_calls; if function_calls in [406894427, 612901319), charge is 2 \u00d7 function_calls; if function_calls in [309509409, 406894427), charge is 3 \u00d7 function_calls; if function_calls in [0, 309509409), charge is 4 \u00d7 function_calls The variable 'function_calls' is measured in invocations.", "code": "def compute_charge(function_executions):\n    if 612901319 <= function_executions < 1000000000: return 1 * function_executions\n    elif 406894427 <= function_executions < 612901319: return 2 * function_executions\n    elif 309509409 <= function_executions < 406894427: return 3 * function_executions\n    elif 0 <= function_executions < 309509409: return 4 * function_executions\n    else: raise ValueError(f'function_executions is out of expected range')", "variables_used": {"function_executions": {"unit": "invocations", "description": "Number of serverless function calls", "dtype": "int"}}, "synonyms": ["faas charge", "functions cost", "serverless fee"], "charge_description": "Charge for serverless executions and execution time."}, "sql_database_fee": {"description": "if sql_cores in [0, 35), charge is 1 \u00d7 sql_cores; if sql_cores in [35, 69), charge is 2 \u00d7 sql_cores; if sql_cores in [69, 128), charge is 3 \u00d7 sql_cores The variable 'sql_cores' is measured in vCores.", "code": "def compute_charge(sql_vcores):\n    if 0 <= sql_vcores < 35: return 1 * sql_vcores\n    elif 35 <= sql_vcores < 69: return 2 * sql_vcores\n    elif 69 <= sql_vcores < 128: return 3 * sql_vcores\n    else: raise ValueError(f'sql_vcores is out of expected range')", "variables_used": {"sql_vcores": {"unit": "vCores", "description": "vCore count for Azure SQL", "dtype": "int"}}, "synonyms": ["sql charge", "database fee", "sql managed instance cost"], "charge_description": "Charge for Azure SQL based on vCores, storage, and retention."}, "snapshot_storage_fee": {"description": "if image_snapshot_gb in [70041.4, 100000.0), charge is 1 \u00d7 image_snapshot_gb; if image_snapshot_gb in [60380.5, 70041.4), charge is 2 \u00d7 image_snapshot_gb; if image_snapshot_gb in [0.0, 60380.5), charge is 3 \u00d7 image_snapshot_gb The variable 'image_snapshot_gb' is measured in GB.", "code": "def compute_charge(snapshot_gb):\n    if 70041.4 <= snapshot_gb < 100000.0: return 1 * snapshot_gb\n    elif 60380.5 <= snapshot_gb < 70041.4: return 2 * snapshot_gb\n    elif 0.0 <= snapshot_gb < 60380.5: return 3 * snapshot_gb\n    else: raise ValueError(f'snapshot_gb is out of expected range')", "variables_used": {"snapshot_gb": {"unit": "GB", "description": "Total snapshot storage size", "dtype": "float"}}, "synonyms": ["snapshot fee", "backup snapshot cost", "image snapshot charge"], "charge_description": "Charge for snapshot storage volume and redundancy."}, "app_service_fee": {"description": "if pricing_tier is 'premium', charge is 1; if pricing_tier is 'basic', charge is 2; if pricing_tier is 'isolated', charge is 3; if pricing_tier is 'standard', charge is 4 The variable 'pricing_tier' is measured in tier.", "code": "def compute_charge(service_tier):\n    if service_tier == 'premium': return 1\n    elif service_tier == 'basic': return 2\n    elif service_tier == 'isolated': return 3\n    elif service_tier == 'standard': return 4\n    else: raise ValueError(f'Unknown value for service_tier: {service_tier}')", "variables_used": {"service_tier": {"unit": "tier", "description": "Service tier for managed services", "dtype": "str"}}, "synonyms": ["app service charge", "web app fee", "app hosting cost"], "charge_description": "Charge for App Service instances and tier."}}]
["# Microsoft Azure Cloud Pricing Policy Document\n\nMicrosoft Azure is pleased to provide this official policy document outlining the fee structure and pricing policies for our cloud services in Euros (EUR). This document serves as a comprehensive guide to understanding the costs associated with utilizing Azure's robust suite of cloud-based solutions. By referencing this document, customers can effectively plan and manage their cloud expenditure with clarity and confidence.\n\n## \"Virtual Machine Pricing and Charges\"\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Charge (EUR)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>West US 2</td>\n      <td>1.00</td>\n    </tr>\n    <tr>\n      <td>UK South</td>\n      <td>2.00</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>3.00</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>4.00</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>5.00</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>6.00</td>\n    </tr>\n  </tbody>\n</table>\n\n## GPU Accelerated Virtual Machines and Container Instances Pricing\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Billable Hours (Range)</th>\n      <th>Charge Multiplier</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=\"2\">UK South</td>\n      <td>0.0 \u2013 53.6</td>\n      <td>2.0 \u00d7 billable_hours</td>\n    </tr>\n    <tr>\n      <td>53.6 \u2013 744.0</td>\n      <td>1.0 \u00d7 billable_hours</td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">UK West</td>\n      <td>0.0 \u2013 53.6</td>\n      <td>2.2 \u00d7 billable_hours</td>\n    </tr>\n    <tr>\n      <td>53.6 \u2013 744.0</td>\n      <td>1.1 \u00d7 billable_hours</td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">West Europe</td>\n      <td>0.0 \u2013 53.6</td>\n      <td>2.4 \u00d7 billable_hours</td>\n    </tr>\n    <tr>\n      <td>53.6 \u2013 744.0</td>\n      <td>1.2 \u00d7 billable_hours</td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">North Europe</td>\n      <td>0.0 \u2013 53.6</td>\n      <td>2.6 \u00d7 billable_hours</td>\n    </tr>\n    <tr>\n      <td>53.6 \u2013 744.0</td>\n      <td>1.3 \u00d7 billable_hours</td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">East US</td>\n      <td>0.0 \u2013 53.6</td>\n      <td>2.8 \u00d7 billable_hours</td>\n    </tr>\n    <tr>\n      <td>53.6 \u2013 744.0</td>\n      <td>1.4 \u00d7 billable_hours</td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">West US 2</td>\n      <td>0.0 \u2013 53.6</td>\n      <td>3.0 \u00d7 billable_hours</td>\n    </tr>\n    <tr>\n      <td>53.6 \u2013 744.0</td>\n      <td>1.5 \u00d7 billable_hours</td>\n    </tr>\n  </tbody>\n</table>\n\n## Managed Disk Storage and Snapshot Pricing\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Disk Count</th>\n      <th>Charge (EUR per disk)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 30</td>\n      <td>1 \u00d7 disk count</td>\n    </tr>\n    <tr>\n      <td>31 \u2013 63</td>\n      <td>2 \u00d7 disk count</td>\n    </tr>\n  </tbody>\n</table>\n\n## Data Transfer Pricing - Outbound Data Transfer (Egress) Charges\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Geo Region</th>\n      <th>Charge (EUR per GB) for 0-48494.6 GB</th>\n      <th>Charge (EUR per GB) for 48494.6-100000 GB</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK South</td>\n      <td>1.0</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>1.1</td>\n      <td>2.2</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>1.2</td>\n      <td>2.4</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>1.3</td>\n      <td>2.6</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>1.4</td>\n      <td>2.8</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>1.5</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n\n## Data Ingress Fees: Charges for Inbound Data Transfers into Azure Services\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Ingress Range (GB)</th>\n      <th>Charge Multiplier</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 22996.7</td>\n      <td>4\u00d7</td>\n    </tr>\n    <tr>\n      <td>22996.8 \u2013 24846.2</td>\n      <td>3\u00d7</td>\n    </tr>\n    <tr>\n      <td>24846.3 \u2013 34117.9</td>\n      <td>2\u00d7</td>\n    </tr>\n    <tr>\n      <td>34117.9 \u2013 100000.0</td>\n      <td>1\u00d7</td>\n    </tr>\n  </tbody>\n</table>\n\n## Storage Transaction Fees for Read, Write, and Delete Operations\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Geo Region</th>\n      <th>Storage Ops Million Range</th>\n      <th>UK South</th>\n      <th>UK West</th>\n      <th>West Europe</th>\n      <th>North Europe</th>\n      <th>East US</th>\n      <th>West US 2</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0.0 \u2013 52.0</td>\n      <td>4.0 \u00d7 storage_ops_million</td>\n      <td>4.4 \u00d7 storage_ops_million</td>\n      <td>4.8 \u00d7 storage_ops_million</td>\n      <td>5.2 \u00d7 storage_ops_million</td>\n      <td>5.6 \u00d7 storage_ops_million</td>\n      <td>6.0 \u00d7 storage_ops_million</td>\n    </tr>\n    <tr>\n      <td>52.0 \u2013 179.2</td>\n      <td>3.0 \u00d7 storage_ops_million</td>\n      <td>3.3 \u00d7 storage_ops_million</td>\n      <td>3.6 \u00d7 storage_ops_million</td>\n      <td>3.9 \u00d7 storage_ops_million</td>\n      <td>4.2 \u00d7 storage_ops_million</td>\n      <td>4.5 \u00d7 storage_ops_million</td>\n    </tr>\n    <tr>\n      <td>179.2 \u2013 239.9</td>\n      <td>2.0 \u00d7 storage_ops_million</td>\n      <td>2.2 \u00d7 storage_ops_million</td>\n      <td>2.4 \u00d7 storage_ops_million</td>\n      <td>2.6 \u00d7 storage_ops_million</td>\n      <td>2.8 \u00d7 storage_ops_million</td>\n      <td>3.0 \u00d7 storage_ops_million</td>\n    </tr>\n    <tr>\n      <td>239.9 \u2013 500.0</td>\n      <td>1.0 \u00d7 storage_ops_million</td>\n      <td>1.1 \u00d7 storage_ops_million</td>\n      <td>1.2 \u00d7 storage_ops_million</td>\n      <td>1.3 \u00d7 storage_ops_million</td>\n      <td>1.4 \u00d7 storage_ops_million</td>\n      <td>1.5 \u00d7 storage_ops_million</td>\n    </tr>\n  </tbody>\n</table>\n\n## Public IP Addresses: Allocation and Utilization Charges\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Geo Region</th>\n      <th>Charge (EUR)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK West</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <td>UK South</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n\n## Load Balancer Fee Schedule\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Load Balancer Rules</th>\n      <th>Charge (EUR per rule)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>179 - 200</td>\n      <td>1 \u00d7 number of rules</td>\n    </tr>\n    <tr>\n      <td>147 - 178</td>\n      <td>2 \u00d7 number of rules</td>\n    </tr>\n    <tr>\n      <td>30 - 146</td>\n      <td>3 \u00d7 number of rules</td>\n    </tr>\n    <tr>\n      <td>0 - 29</td>\n      <td>4 \u00d7 number of rules</td>\n    </tr>\n  </tbody>\n</table>\n\n## AKS Cluster Usage Fees and Charges\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Charge (EUR)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>uk_west</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>westus2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>eastus</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <td>westeurope</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <td>northeurope</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <td>uk_south</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n\n## Function App Pricing: Execution Time, Memory Consumption, and Storage Charges\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Duration Range (ms)</th>\n      <th>Charge Multiplier</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>255,533 - 600,000</td>\n      <td>1\u00d7</td>\n    </tr>\n    <tr>\n      <td>40,332 - 255,532</td>\n      <td>2\u00d7</td>\n    </tr>\n    <tr>\n      <td>0.1 - 40,331</td>\n      <td>3\u00d7</td>\n    </tr>\n  </tbody>\n</table>\n\n## \"SQL Database Fees: Compute, Storage, and Data Transfer Charges\"\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>SKU Tier</th>\n      <th>Backup Days (0-119)</th>\n      <th>Backup Days (120-179)</th>\n      <th>Backup Days (180)</th>\n      <th>Backup Days (181-365)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Basic</td>\n      <td>\u20ac1 per day</td>\n      <td>\u20ac2 per day</td>\n      <td>\u20ac3 per day</td>\n      <td>\u20ac4 per day</td>\n    </tr>\n    <tr>\n      <td>Standard</td>\n      <td>\u20ac2 per day</td>\n      <td>\u20ac4 per day</td>\n      <td>\u20ac6 per day</td>\n      <td>\u20ac8 per day</td>\n    </tr>\n    <tr>\n      <td>Premium</td>\n      <td>\u20ac3 per day</td>\n      <td>\u20ac6 per day</td>\n      <td>\u20ac9 per day</td>\n      <td>\u20ac12 per day</td>\n    </tr>\n    <tr>\n      <td>Isolated</td>\n      <td>\u20ac4 per day</td>\n      <td>\u20ac8 per day</td>\n      <td>\u20ac12 per day</td>\n      <td>\u20ac16 per day</td>\n    </tr>\n  </tbody>\n</table>\n\n## Snapshot Storage Fee Policy\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Charge</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK West</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>UK South</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n\n## App Service Fees and Charges for Web Apps, Mobile Apps, and API Apps\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Geo Region</th>\n      <th>App Instances</th>\n      <th>Charge Multiplier</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=\"4\">UK South</td>\n      <td>0-88</td>\n      <td>4 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td>89-157</td>\n      <td>3 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td>158</td>\n      <td>2 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td>159-200</td>\n      <td>1 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">UK West</td>\n      <td>0-88</td>\n      <td>8 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td>89-157</td>\n      <td>6 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td>158</td>\n      <td>4 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td>159-200</td>\n      <td>2 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">West Europe</td>\n      <td>0-88</td>\n      <td>12 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td>89-157</td>\n      <td>9 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td>158</td>\n      <td>6 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td>159-200</td>\n      <td>3 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">North Europe</td>\n      <td>0-88</td>\n      <td>16 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td>89-157</td>\n      <td>12 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td>158</td>\n      <td>8 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td>159-200</td>\n      <td>4 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">East US</td>\n      <td>0-88</td>\n      <td>20 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td>89-157</td>\n      <td>15 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td>158</td>\n      <td>10 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td>159-200</td>\n      <td>5 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">West US 2</td>\n      <td>0-88</td>\n      <td>24 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td>89-157</td>\n      <td>18 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td>158</td>\n      <td>12 \u00d7 App Instances</td>\n    </tr>\n    <tr>\n      <td>159-200</td>\n      <td>6 \u00d7 App Instances</td>\n    </tr>\n  </tbody>\n</table>\n\nThis cloud pricing policy outlines the terms and conditions governing the use of Microsoft Azure cloud services in EUR. All rates and fees are subject to change, and customers are encouraged to regularly review the policy for updates. For any questions or concerns regarding this policy, please contact Microsoft Azure Support through the official support channels.\n\n**Policy Effective Date:** August 21, 2025\n\n", {"compute_vm_fee": {"description": "if location is 'westus2', charge is 1; if location is 'uk_south', charge is 2; if location is 'westeurope', charge is 3; if location is 'northeurope', charge is 4; if location is 'eastus', charge is 5; if location is 'uk_west', charge is 6 The variable 'location' is measured in location.", "code": "def compute_charge(region):\n    if region == 'westus2': return 1\n    elif region == 'uk_south': return 2\n    elif region == 'westeurope': return 3\n    elif region == 'northeurope': return 4\n    elif region == 'eastus': return 5\n    elif region == 'uk_west': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["vm runtime charge", "compute instance fee", "virtual machine cost"], "charge_description": "Charge for running virtual machines based on vCPU, memory, OS, and commitment."}, "gpu_compute_fee": {"description": "gpu_compute_fee conditions by location and billable_hours:\n\nfor uk_south the following charges apply:\n  - if billable_hours in [53.6, 744.0), charge is 1.0 \u00d7 billable_hours\n  - if billable_hours in [0.0, 53.6), charge is 2.0 \u00d7 billable_hours\nfor uk_west the following charges apply:\n  - if billable_hours in [53.6, 744.0), charge is 1.1 \u00d7 billable_hours\n  - if billable_hours in [0.0, 53.6), charge is 2.2 \u00d7 billable_hours\nfor westeurope the following charges apply:\n  - if billable_hours in [53.6, 744.0), charge is 1.2 \u00d7 billable_hours\n  - if billable_hours in [0.0, 53.6), charge is 2.4 \u00d7 billable_hours\nfor northeurope the following charges apply:\n  - if billable_hours in [53.6, 744.0), charge is 1.3 \u00d7 billable_hours\n  - if billable_hours in [0.0, 53.6), charge is 2.6 \u00d7 billable_hours\nfor eastus the following charges apply:\n  - if billable_hours in [53.6, 744.0), charge is 1.4 \u00d7 billable_hours\n  - if billable_hours in [0.0, 53.6), charge is 2.8 \u00d7 billable_hours\nfor westus2 the following charges apply:\n  - if billable_hours in [53.6, 744.0), charge is 1.5 \u00d7 billable_hours\n  - if billable_hours in [0.0, 53.6), charge is 3.0 \u00d7 billable_hours", "code": "def compute_charge(region, usage_hours):\n    if region == 'uk_south' and 53.6 <= usage_hours < 744.0: return 1 * usage_hours * 1.0\n    elif region == 'uk_south' and 0.0 <= usage_hours < 53.6: return 2 * usage_hours * 1.0\n    elif region == 'uk_west' and 53.6 <= usage_hours < 744.0: return 1 * usage_hours * 1.1\n    elif region == 'uk_west' and 0.0 <= usage_hours < 53.6: return 2 * usage_hours * 1.1\n    elif region == 'westeurope' and 53.6 <= usage_hours < 744.0: return 1 * usage_hours * 1.2\n    elif region == 'westeurope' and 0.0 <= usage_hours < 53.6: return 2 * usage_hours * 1.2\n    elif region == 'northeurope' and 53.6 <= usage_hours < 744.0: return 1 * usage_hours * 1.3\n    elif region == 'northeurope' and 0.0 <= usage_hours < 53.6: return 2 * usage_hours * 1.3\n    elif region == 'eastus' and 53.6 <= usage_hours < 744.0: return 1 * usage_hours * 1.4\n    elif region == 'eastus' and 0.0 <= usage_hours < 53.6: return 2 * usage_hours * 1.4\n    elif region == 'westus2' and 53.6 <= usage_hours < 744.0: return 1 * usage_hours * 1.5\n    elif region == 'westus2' and 0.0 <= usage_hours < 53.6: return 2 * usage_hours * 1.5\n    else: raise ValueError(f'region or usage_hours is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "usage_hours": {"unit": "hours", "description": "Total runtime in hours over the billing window", "dtype": "float"}}, "synonyms": ["gpu instance fee", "accelerator charge", "gpu runtime cost"], "charge_description": "Charge for GPU-enabled compute usage."}, "managed_disk_fee": {"description": "if disk_count in [0, 31), charge is 1 \u00d7 disk_count; if disk_count in [31, 64), charge is 2 \u00d7 disk_count The variable 'disk_count' is measured in disks.", "code": "def compute_charge(managed_disk_count):\n    if 0 <= managed_disk_count < 31: return 1 * managed_disk_count\n    elif 31 <= managed_disk_count < 64: return 2 * managed_disk_count\n    else: raise ValueError(f'managed_disk_count is out of expected range')", "variables_used": {"managed_disk_count": {"unit": "disks", "description": "Count of managed disks attached", "dtype": "int"}}, "synonyms": ["disk charge", "managed storage fee", "block storage cost"], "charge_description": "Charge for managed disks based on type, size, and count."}, "data_egress_fee": {"description": "data_egress_fee conditions by geo_region and data_transfer_out_gb:\n\nfor uk_south the following charges apply:\n  - if data_transfer_out_gb in [0.0, 48494.6), charge is 1.0 \u00d7 data_transfer_out_gb\n  - if data_transfer_out_gb in [48494.6, 100000.0), charge is 2.0 \u00d7 data_transfer_out_gb\nfor uk_west the following charges apply:\n  - if data_transfer_out_gb in [0.0, 48494.6), charge is 1.1 \u00d7 data_transfer_out_gb\n  - if data_transfer_out_gb in [48494.6, 100000.0), charge is 2.2 \u00d7 data_transfer_out_gb\nfor westeurope the following charges apply:\n  - if data_transfer_out_gb in [0.0, 48494.6), charge is 1.2 \u00d7 data_transfer_out_gb\n  - if data_transfer_out_gb in [48494.6, 100000.0), charge is 2.4 \u00d7 data_transfer_out_gb\nfor northeurope the following charges apply:\n  - if data_transfer_out_gb in [0.0, 48494.6), charge is 1.3 \u00d7 data_transfer_out_gb\n  - if data_transfer_out_gb in [48494.6, 100000.0), charge is 2.6 \u00d7 data_transfer_out_gb\nfor eastus the following charges apply:\n  - if data_transfer_out_gb in [0.0, 48494.6), charge is 1.4 \u00d7 data_transfer_out_gb\n  - if data_transfer_out_gb in [48494.6, 100000.0), charge is 2.8 \u00d7 data_transfer_out_gb\nfor westus2 the following charges apply:\n  - if data_transfer_out_gb in [0.0, 48494.6), charge is 1.5 \u00d7 data_transfer_out_gb\n  - if data_transfer_out_gb in [48494.6, 100000.0), charge is 3.0 \u00d7 data_transfer_out_gb", "code": "def compute_charge(region, data_egress_gb):\n    if region == 'uk_south' and 0.0 <= data_egress_gb < 48494.6: return 1 * data_egress_gb * 1.0\n    elif region == 'uk_south' and 48494.6 <= data_egress_gb < 100000.0: return 2 * data_egress_gb * 1.0\n    elif region == 'uk_west' and 0.0 <= data_egress_gb < 48494.6: return 1 * data_egress_gb * 1.1\n    elif region == 'uk_west' and 48494.6 <= data_egress_gb < 100000.0: return 2 * data_egress_gb * 1.1\n    elif region == 'westeurope' and 0.0 <= data_egress_gb < 48494.6: return 1 * data_egress_gb * 1.2\n    elif region == 'westeurope' and 48494.6 <= data_egress_gb < 100000.0: return 2 * data_egress_gb * 1.2\n    elif region == 'northeurope' and 0.0 <= data_egress_gb < 48494.6: return 1 * data_egress_gb * 1.3\n    elif region == 'northeurope' and 48494.6 <= data_egress_gb < 100000.0: return 2 * data_egress_gb * 1.3\n    elif region == 'eastus' and 0.0 <= data_egress_gb < 48494.6: return 1 * data_egress_gb * 1.4\n    elif region == 'eastus' and 48494.6 <= data_egress_gb < 100000.0: return 2 * data_egress_gb * 1.4\n    elif region == 'westus2' and 0.0 <= data_egress_gb < 48494.6: return 1 * data_egress_gb * 1.5\n    elif region == 'westus2' and 48494.6 <= data_egress_gb < 100000.0: return 2 * data_egress_gb * 1.5\n    else: raise ValueError(f'region or data_egress_gb is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "data_egress_gb": {"unit": "GB", "description": "Outbound data transferred from Azure", "dtype": "float"}}, "synonyms": ["egress charge", "outbound data fee", "data transfer out"], "charge_description": "Charge for data leaving Azure regions."}, "data_ingress_fee": {"description": "if ingress_gb in [34117.9, 100000.0), charge is 1 \u00d7 ingress_gb; if ingress_gb in [24846.2, 34117.9), charge is 2 \u00d7 ingress_gb; if ingress_gb in [22996.7, 24846.2), charge is 3 \u00d7 ingress_gb; if ingress_gb in [0.0, 22996.7), charge is 4 \u00d7 ingress_gb The variable 'ingress_gb' is measured in GB.", "code": "def compute_charge(data_ingress_gb):\n    if 34117.9 <= data_ingress_gb < 100000.0: return 1 * data_ingress_gb\n    elif 24846.2 <= data_ingress_gb < 34117.9: return 2 * data_ingress_gb\n    elif 22996.7 <= data_ingress_gb < 24846.2: return 3 * data_ingress_gb\n    elif 0.0 <= data_ingress_gb < 22996.7: return 4 * data_ingress_gb\n    else: raise ValueError(f'data_ingress_gb is out of expected range')", "variables_used": {"data_ingress_gb": {"unit": "GB", "description": "Inbound data transferred to Azure", "dtype": "float"}}, "synonyms": ["ingress charge", "inbound data fee", "data transfer in"], "charge_description": "Charge for data entering Azure regions where applicable."}, "storage_transaction_fee": {"description": "storage_transaction_fee conditions by geo_region and storage_ops_million:\n\nfor uk_south the following charges apply:\n  - if storage_ops_million in [239.9, 500.0), charge is 1.0 \u00d7 storage_ops_million\n  - if storage_ops_million in [179.2, 239.9), charge is 2.0 \u00d7 storage_ops_million\n  - if storage_ops_million in [52.0, 179.2), charge is 3.0 \u00d7 storage_ops_million\n  - if storage_ops_million in [0.0, 52.0), charge is 4.0 \u00d7 storage_ops_million\nfor uk_west the following charges apply:\n  - if storage_ops_million in [239.9, 500.0), charge is 1.1 \u00d7 storage_ops_million\n  - if storage_ops_million in [179.2, 239.9), charge is 2.2 \u00d7 storage_ops_million\n  - if storage_ops_million in [52.0, 179.2), charge is 3.3 \u00d7 storage_ops_million\n  - if storage_ops_million in [0.0, 52.0), charge is 4.4 \u00d7 storage_ops_million\nfor westeurope the following charges apply:\n  - if storage_ops_million in [239.9, 500.0), charge is 1.2 \u00d7 storage_ops_million\n  - if storage_ops_million in [179.2, 239.9), charge is 2.4 \u00d7 storage_ops_million\n  - if storage_ops_million in [52.0, 179.2), charge is 3.6 \u00d7 storage_ops_million\n  - if storage_ops_million in [0.0, 52.0), charge is 4.8 \u00d7 storage_ops_million\nfor northeurope the following charges apply:\n  - if storage_ops_million in [239.9, 500.0), charge is 1.3 \u00d7 storage_ops_million\n  - if storage_ops_million in [179.2, 239.9), charge is 2.6 \u00d7 storage_ops_million\n  - if storage_ops_million in [52.0, 179.2), charge is 3.9 \u00d7 storage_ops_million\n  - if storage_ops_million in [0.0, 52.0), charge is 5.2 \u00d7 storage_ops_million\nfor eastus the following charges apply:\n  - if storage_ops_million in [239.9, 500.0), charge is 1.4 \u00d7 storage_ops_million\n  - if storage_ops_million in [179.2, 239.9), charge is 2.8 \u00d7 storage_ops_million\n  - if storage_ops_million in [52.0, 179.2), charge is 4.2 \u00d7 storage_ops_million\n  - if storage_ops_million in [0.0, 52.0), charge is 5.6 \u00d7 storage_ops_million\nfor westus2 the following charges apply:\n  - if storage_ops_million in [239.9, 500.0), charge is 1.5 \u00d7 storage_ops_million\n  - if storage_ops_million in [179.2, 239.9), charge is 3.0 \u00d7 storage_ops_million\n  - if storage_ops_million in [52.0, 179.2), charge is 4.5 \u00d7 storage_ops_million\n  - if storage_ops_million in [0.0, 52.0), charge is 6.0 \u00d7 storage_ops_million", "code": "def compute_charge(region, storage_transactions_millions):\n    if region == 'uk_south' and 239.9 <= storage_transactions_millions < 500.0: return 1 * storage_transactions_millions * 1.0\n    elif region == 'uk_south' and 179.2 <= storage_transactions_millions < 239.9: return 2 * storage_transactions_millions * 1.0\n    elif region == 'uk_south' and 52.0 <= storage_transactions_millions < 179.2: return 3 * storage_transactions_millions * 1.0\n    elif region == 'uk_south' and 0.0 <= storage_transactions_millions < 52.0: return 4 * storage_transactions_millions * 1.0\n    elif region == 'uk_west' and 239.9 <= storage_transactions_millions < 500.0: return 1 * storage_transactions_millions * 1.1\n    elif region == 'uk_west' and 179.2 <= storage_transactions_millions < 239.9: return 2 * storage_transactions_millions * 1.1\n    elif region == 'uk_west' and 52.0 <= storage_transactions_millions < 179.2: return 3 * storage_transactions_millions * 1.1\n    elif region == 'uk_west' and 0.0 <= storage_transactions_millions < 52.0: return 4 * storage_transactions_millions * 1.1\n    elif region == 'westeurope' and 239.9 <= storage_transactions_millions < 500.0: return 1 * storage_transactions_millions * 1.2\n    elif region == 'westeurope' and 179.2 <= storage_transactions_millions < 239.9: return 2 * storage_transactions_millions * 1.2\n    elif region == 'westeurope' and 52.0 <= storage_transactions_millions < 179.2: return 3 * storage_transactions_millions * 1.2\n    elif region == 'westeurope' and 0.0 <= storage_transactions_millions < 52.0: return 4 * storage_transactions_millions * 1.2\n    elif region == 'northeurope' and 239.9 <= storage_transactions_millions < 500.0: return 1 * storage_transactions_millions * 1.3\n    elif region == 'northeurope' and 179.2 <= storage_transactions_millions < 239.9: return 2 * storage_transactions_millions * 1.3\n    elif region == 'northeurope' and 52.0 <= storage_transactions_millions < 179.2: return 3 * storage_transactions_millions * 1.3\n    elif region == 'northeurope' and 0.0 <= storage_transactions_millions < 52.0: return 4 * storage_transactions_millions * 1.3\n    elif region == 'eastus' and 239.9 <= storage_transactions_millions < 500.0: return 1 * storage_transactions_millions * 1.4\n    elif region == 'eastus' and 179.2 <= storage_transactions_millions < 239.9: return 2 * storage_transactions_millions * 1.4\n    elif region == 'eastus' and 52.0 <= storage_transactions_millions < 179.2: return 3 * storage_transactions_millions * 1.4\n    elif region == 'eastus' and 0.0 <= storage_transactions_millions < 52.0: return 4 * storage_transactions_millions * 1.4\n    elif region == 'westus2' and 239.9 <= storage_transactions_millions < 500.0: return 1 * storage_transactions_millions * 1.5\n    elif region == 'westus2' and 179.2 <= storage_transactions_millions < 239.9: return 2 * storage_transactions_millions * 1.5\n    elif region == 'westus2' and 52.0 <= storage_transactions_millions < 179.2: return 3 * storage_transactions_millions * 1.5\n    elif region == 'westus2' and 0.0 <= storage_transactions_millions < 52.0: return 4 * storage_transactions_millions * 1.5\n    else: raise ValueError(f'region or storage_transactions_millions is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "storage_transactions_millions": {"unit": "million tx", "description": "Number of storage account operations in millions", "dtype": "float"}}, "synonyms": ["storage ops fee", "transaction charge", "storage request cost"], "charge_description": "Charge for storage account transactions and redundancy level."}, "public_ip_fee": {"description": "if geo_region is 'uk_west', charge is 1; if geo_region is 'northeurope', charge is 2; if geo_region is 'westeurope', charge is 3; if geo_region is 'uk_south', charge is 4; if geo_region is 'westus2', charge is 5; if geo_region is 'eastus', charge is 6 The variable 'geo_region' is measured in geo_region.", "code": "def compute_charge(region):\n    if region == 'uk_west': return 1\n    elif region == 'northeurope': return 2\n    elif region == 'westeurope': return 3\n    elif region == 'uk_south': return 4\n    elif region == 'westus2': return 5\n    elif region == 'eastus': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["ip address charge", "public ip cost", "elastic ip fee"], "charge_description": "Charge for public IP addresses allocated."}, "load_balancer_fee": {"description": "if lb_rules in [179, 200), charge is 1 \u00d7 lb_rules; if lb_rules in [147, 179), charge is 2 \u00d7 lb_rules; if lb_rules in [30, 147), charge is 3 \u00d7 lb_rules; if lb_rules in [0, 30), charge is 4 \u00d7 lb_rules The variable 'lb_rules' is measured in rules.", "code": "def compute_charge(load_balancer_rules):\n    if 179 <= load_balancer_rules < 200: return 1 * load_balancer_rules\n    elif 147 <= load_balancer_rules < 179: return 2 * load_balancer_rules\n    elif 30 <= load_balancer_rules < 147: return 3 * load_balancer_rules\n    elif 0 <= load_balancer_rules < 30: return 4 * load_balancer_rules\n    else: raise ValueError(f'load_balancer_rules is out of expected range')", "variables_used": {"load_balancer_rules": {"unit": "rules", "description": "Configured load balancer rules", "dtype": "int"}}, "synonyms": ["lb fee", "balancer charge", "traffic distribution cost"], "charge_description": "Charge for load balancer rules and tier."}, "aks_cluster_fee": {"description": "if location is 'uk_west', charge is 1; if location is 'westus2', charge is 2; if location is 'eastus', charge is 3; if location is 'westeurope', charge is 4; if location is 'northeurope', charge is 5; if location is 'uk_south', charge is 6 The variable 'location' is measured in location.", "code": "def compute_charge(region):\n    if region == 'uk_west': return 1\n    elif region == 'westus2': return 2\n    elif region == 'eastus': return 3\n    elif region == 'westeurope': return 4\n    elif region == 'northeurope': return 5\n    elif region == 'uk_south': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["kubernetes fee", "aks charge", "container cluster cost"], "charge_description": "Charge for AKS clusters based on node count and type."}, "function_app_fee": {"description": "if duration_ms in [255532.9, 600000.0), charge is 1 \u00d7 duration_ms; if duration_ms in [40331.7, 255532.9), charge is 2 \u00d7 duration_ms; if duration_ms in [0.1, 40331.7), charge is 3 \u00d7 duration_ms The variable 'duration_ms' is measured in ms.", "code": "def compute_charge(function_exec_ms):\n    if 255532.9 <= function_exec_ms < 600000.0: return 1 * function_exec_ms\n    elif 40331.7 <= function_exec_ms < 255532.9: return 2 * function_exec_ms\n    elif 0.1 <= function_exec_ms < 40331.7: return 3 * function_exec_ms\n    else: raise ValueError(f'function_exec_ms is out of expected range')", "variables_used": {"function_exec_ms": {"unit": "ms", "description": "Average or billed execution time per invocation", "dtype": "float"}}, "synonyms": ["faas charge", "functions cost", "serverless fee"], "charge_description": "Charge for serverless executions and execution time."}, "sql_database_fee": {"description": "sql_database_fee conditions by sku_tier and backup_days:\n\nfor basic the following charges apply:\n  - if backup_days in [0, 119), charge is 1 \u00d7 backup_days\n  - if backup_days in [119, 179), charge is 2 \u00d7 backup_days\n  - if backup_days in [179, 179), charge is 3 \u00d7 backup_days\n  - if backup_days in [179, 365), charge is 4 \u00d7 backup_days\nfor standard the following charges apply:\n  - if backup_days in [0, 119), charge is 2 \u00d7 backup_days\n  - if backup_days in [119, 179), charge is 4 \u00d7 backup_days\n  - if backup_days in [179, 179), charge is 6 \u00d7 backup_days\n  - if backup_days in [179, 365), charge is 8 \u00d7 backup_days\nfor premium the following charges apply:\n  - if backup_days in [0, 119), charge is 3 \u00d7 backup_days\n  - if backup_days in [119, 179), charge is 6 \u00d7 backup_days\n  - if backup_days in [179, 179), charge is 9 \u00d7 backup_days\n  - if backup_days in [179, 365), charge is 12 \u00d7 backup_days\nfor isolated the following charges apply:\n  - if backup_days in [0, 119), charge is 4 \u00d7 backup_days\n  - if backup_days in [119, 179), charge is 8 \u00d7 backup_days\n  - if backup_days in [179, 179), charge is 12 \u00d7 backup_days\n  - if backup_days in [179, 365), charge is 16 \u00d7 backup_days", "code": "def compute_charge(service_tier, backup_retention_days):\n    if service_tier == 'basic' and 0 <= backup_retention_days < 119: return 1 * backup_retention_days * 1\n    elif service_tier == 'basic' and 119 <= backup_retention_days < 179: return 2 * backup_retention_days * 1\n    elif service_tier == 'basic' and 179 <= backup_retention_days < 179: return 3 * backup_retention_days * 1\n    elif service_tier == 'basic' and 179 <= backup_retention_days < 365: return 4 * backup_retention_days * 1\n    elif service_tier == 'standard' and 0 <= backup_retention_days < 119: return 1 * backup_retention_days * 2\n    elif service_tier == 'standard' and 119 <= backup_retention_days < 179: return 2 * backup_retention_days * 2\n    elif service_tier == 'standard' and 179 <= backup_retention_days < 179: return 3 * backup_retention_days * 2\n    elif service_tier == 'standard' and 179 <= backup_retention_days < 365: return 4 * backup_retention_days * 2\n    elif service_tier == 'premium' and 0 <= backup_retention_days < 119: return 1 * backup_retention_days * 3\n    elif service_tier == 'premium' and 119 <= backup_retention_days < 179: return 2 * backup_retention_days * 3\n    elif service_tier == 'premium' and 179 <= backup_retention_days < 179: return 3 * backup_retention_days * 3\n    elif service_tier == 'premium' and 179 <= backup_retention_days < 365: return 4 * backup_retention_days * 3\n    elif service_tier == 'isolated' and 0 <= backup_retention_days < 119: return 1 * backup_retention_days * 4\n    elif service_tier == 'isolated' and 119 <= backup_retention_days < 179: return 2 * backup_retention_days * 4\n    elif service_tier == 'isolated' and 179 <= backup_retention_days < 179: return 3 * backup_retention_days * 4\n    elif service_tier == 'isolated' and 179 <= backup_retention_days < 365: return 4 * backup_retention_days * 4\n    else: raise ValueError(f'service_tier or backup_retention_days is out of expected range')", "variables_used": {"service_tier": {"unit": "tier", "description": "Service tier for managed services", "dtype": "str"}, "backup_retention_days": {"unit": "days", "description": "Backup retention period for databases", "dtype": "int"}}, "synonyms": ["sql charge", "database fee", "sql managed instance cost"], "charge_description": "Charge for Azure SQL based on vCores, storage, and retention."}, "snapshot_storage_fee": {"description": "if location is 'uk_west', charge is 1; if location is 'uk_south', charge is 2; if location is 'eastus', charge is 3; if location is 'westeurope', charge is 4; if location is 'westus2', charge is 5; if location is 'northeurope', charge is 6 The variable 'location' is measured in location.", "code": "def compute_charge(region):\n    if region == 'uk_west': return 1\n    elif region == 'uk_south': return 2\n    elif region == 'eastus': return 3\n    elif region == 'westeurope': return 4\n    elif region == 'westus2': return 5\n    elif region == 'northeurope': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["snapshot fee", "backup snapshot cost", "image snapshot charge"], "charge_description": "Charge for snapshot storage volume and redundancy."}, "app_service_fee": {"description": "app_service_fee conditions by geo_region and app_instances:\n\nfor uk_south the following charges apply:\n  - if app_instances in [158, 200), charge is 1 \u00d7 app_instances\n  - if app_instances in [157, 158), charge is 2 \u00d7 app_instances\n  - if app_instances in [89, 157), charge is 3 \u00d7 app_instances\n  - if app_instances in [0, 89), charge is 4 \u00d7 app_instances\nfor uk_west the following charges apply:\n  - if app_instances in [158, 200), charge is 2 \u00d7 app_instances\n  - if app_instances in [157, 158), charge is 4 \u00d7 app_instances\n  - if app_instances in [89, 157), charge is 6 \u00d7 app_instances\n  - if app_instances in [0, 89), charge is 8 \u00d7 app_instances\nfor westeurope the following charges apply:\n  - if app_instances in [158, 200), charge is 3 \u00d7 app_instances\n  - if app_instances in [157, 158), charge is 6 \u00d7 app_instances\n  - if app_instances in [89, 157), charge is 9 \u00d7 app_instances\n  - if app_instances in [0, 89), charge is 12 \u00d7 app_instances\nfor northeurope the following charges apply:\n  - if app_instances in [158, 200), charge is 4 \u00d7 app_instances\n  - if app_instances in [157, 158), charge is 8 \u00d7 app_instances\n  - if app_instances in [89, 157), charge is 12 \u00d7 app_instances\n  - if app_instances in [0, 89), charge is 16 \u00d7 app_instances\nfor eastus the following charges apply:\n  - if app_instances in [158, 200), charge is 5 \u00d7 app_instances\n  - if app_instances in [157, 158), charge is 10 \u00d7 app_instances\n  - if app_instances in [89, 157), charge is 15 \u00d7 app_instances\n  - if app_instances in [0, 89), charge is 20 \u00d7 app_instances\nfor westus2 the following charges apply:\n  - if app_instances in [158, 200), charge is 6 \u00d7 app_instances\n  - if app_instances in [157, 158), charge is 12 \u00d7 app_instances\n  - if app_instances in [89, 157), charge is 18 \u00d7 app_instances\n  - if app_instances in [0, 89), charge is 24 \u00d7 app_instances", "code": "def compute_charge(region, app_service_instances):\n    if region == 'uk_south' and 158 <= app_service_instances < 200: return 1 * app_service_instances * 1\n    elif region == 'uk_south' and 157 <= app_service_instances < 158: return 2 * app_service_instances * 1\n    elif region == 'uk_south' and 89 <= app_service_instances < 157: return 3 * app_service_instances * 1\n    elif region == 'uk_south' and 0 <= app_service_instances < 89: return 4 * app_service_instances * 1\n    elif region == 'uk_west' and 158 <= app_service_instances < 200: return 1 * app_service_instances * 2\n    elif region == 'uk_west' and 157 <= app_service_instances < 158: return 2 * app_service_instances * 2\n    elif region == 'uk_west' and 89 <= app_service_instances < 157: return 3 * app_service_instances * 2\n    elif region == 'uk_west' and 0 <= app_service_instances < 89: return 4 * app_service_instances * 2\n    elif region == 'westeurope' and 158 <= app_service_instances < 200: return 1 * app_service_instances * 3\n    elif region == 'westeurope' and 157 <= app_service_instances < 158: return 2 * app_service_instances * 3\n    elif region == 'westeurope' and 89 <= app_service_instances < 157: return 3 * app_service_instances * 3\n    elif region == 'westeurope' and 0 <= app_service_instances < 89: return 4 * app_service_instances * 3\n    elif region == 'northeurope' and 158 <= app_service_instances < 200: return 1 * app_service_instances * 4\n    elif region == 'northeurope' and 157 <= app_service_instances < 158: return 2 * app_service_instances * 4\n    elif region == 'northeurope' and 89 <= app_service_instances < 157: return 3 * app_service_instances * 4\n    elif region == 'northeurope' and 0 <= app_service_instances < 89: return 4 * app_service_instances * 4\n    elif region == 'eastus' and 158 <= app_service_instances < 200: return 1 * app_service_instances * 5\n    elif region == 'eastus' and 157 <= app_service_instances < 158: return 2 * app_service_instances * 5\n    elif region == 'eastus' and 89 <= app_service_instances < 157: return 3 * app_service_instances * 5\n    elif region == 'eastus' and 0 <= app_service_instances < 89: return 4 * app_service_instances * 5\n    elif region == 'westus2' and 158 <= app_service_instances < 200: return 1 * app_service_instances * 6\n    elif region == 'westus2' and 157 <= app_service_instances < 158: return 2 * app_service_instances * 6\n    elif region == 'westus2' and 89 <= app_service_instances < 157: return 3 * app_service_instances * 6\n    elif region == 'westus2' and 0 <= app_service_instances < 89: return 4 * app_service_instances * 6\n    else: raise ValueError(f'region or app_service_instances is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "app_service_instances": {"unit": "instances", "description": "Count of App Service instances", "dtype": "int"}}, "synonyms": ["app service charge", "web app fee", "app hosting cost"], "charge_description": "Charge for App Service instances and tier."}}]
["# Microsoft Azure Cloud Pricing Policy Document\n\nMicrosoft Azure is pleased to provide this official Cloud Pricing Policy document, which details the fee structure and pricing guidelines for our comprehensive suite of cloud services. This document serves as a definitive resource, outlining the applicable rates and terms in USD, to ensure transparency and clarity for our valued customers.\n\n## Virtual Machine Pricing and Fees\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Spot Flag</th>\n      <th>Billable Hours Range</th>\n      <th>Charge Multiplier</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>True</td>\n      <td>649.2 - 744.0</td>\n      <td>1.0 \u00d7 Billable Hours</td>\n    </tr>\n    <tr>\n      <td>True</td>\n      <td>93.1 - 649.2</td>\n      <td>2.0 \u00d7 Billable Hours</td>\n    </tr>\n    <tr>\n      <td>True</td>\n      <td>0.0 - 93.1</td>\n      <td>3.0 \u00d7 Billable Hours</td>\n    </tr>\n    <tr>\n      <td>False</td>\n      <td>649.2 - 744.0</td>\n      <td>1.1 \u00d7 Billable Hours</td>\n    </tr>\n    <tr>\n      <td>False</td>\n      <td>93.1 - 649.2</td>\n      <td>2.2 \u00d7 Billable Hours</td>\n    </tr>\n    <tr>\n      <td>False</td>\n      <td>0.0 - 93.1</td>\n      <td>3.3 \u00d7 Billable Hours</td>\n    </tr>\n  </tbody>\n</table>\n\n## GPU Accelerated Virtual Machines and Containers Pricing\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Graphics Processor</th>\n      <th>Accelerator Count</th>\n      <th>Charge (USD per hour)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>T4</td>\n      <td>0</td>\n      <td>$0.00</td>\n    </tr>\n    <tr>\n      <td>T4</td>\n      <td>1</td>\n      <td>$4.00</td>\n    </tr>\n    <tr>\n      <td>T4</td>\n      <td>2-6</td>\n      <td>$3.00 \u00d7 Accelerator Count</td>\n    </tr>\n    <tr>\n      <td>T4</td>\n      <td>7</td>\n      <td>$2.00 \u00d7 Accelerator Count</td>\n    </tr>\n    <tr>\n      <td>A10</td>\n      <td>0</td>\n      <td>$0.00</td>\n    </tr>\n    <tr>\n      <td>A10</td>\n      <td>1</td>\n      <td>$8.00</td>\n    </tr>\n    <tr>\n      <td>A10</td>\n      <td>2-6</td>\n      <td>$6.00 \u00d7 Accelerator Count</td>\n    </tr>\n    <tr>\n      <td>A10</td>\n      <td>7</td>\n      <td>$2.00 \u00d7 Accelerator Count</td>\n    </tr>\n    <tr>\n      <td>A100</td>\n      <td>0</td>\n      <td>$0.00</td>\n    </tr>\n    <tr>\n      <td>A100</td>\n      <td>1</td>\n      <td>$12.00</td>\n    </tr>\n    <tr>\n      <td>A100</td>\n      <td>2-6</td>\n      <td>$9.00 \u00d7 Accelerator Count</td>\n    </tr>\n    <tr>\n      <td>A100</td>\n      <td>7</td>\n      <td>$3.00 \u00d7 Accelerator Count</td>\n    </tr>\n    <tr>\n      <td>MI300X</td>\n      <td>0</td>\n      <td>$0.00</td>\n    </tr>\n    <tr>\n      <td>MI300X</td>\n      <td>1</td>\n      <td>$16.00</td>\n    </tr>\n    <tr>\n      <td>MI300X</td>\n      <td>2-6</td>\n      <td>$12.00 \u00d7 Accelerator Count</td>\n    </tr>\n    <tr>\n      <td>MI300X</td>\n      <td>7</td>\n      <td>$4.00 \u00d7 Accelerator Count</td>\n    </tr>\n  </tbody>\n</table>\n\n## Managed Disk Pricing - Storage and Snapshot Charges\n\nThis charge applies to resources deployed in specific Azure locations. The charge amount varies depending on the selected location. For resources located in 'westus2', the charge is $1.00 USD per unit. For resources in 'uk_south', the charge is $2.00 USD per unit. Resources in 'uk_west' incur a charge of $3.00 USD per unit.\n\nThe charge amounts for other supported locations are as follows: 'northeurope' at $4.00 USD per unit, 'eastus' at $5.00 USD per unit, and 'westeurope' at $6.00 USD per unit. This charge is assessed based on the location where the resource is deployed, as measured by the 'location' variable. The charge is calculated and billed in USD.\n\n## Data Transfer Pricing - Outbound Data Egress from Azure Regions\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Geo Region</th>\n      <th>Egress Range (GB)</th>\n      <th>Charge Multiplier</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>uk_south</td>\n      <td>0 \u2013 78,559</td>\n      <td>1.0\u00d7</td>\n    </tr>\n    <tr>\n      <td>uk_south</td>\n      <td>78,560 \u2013 100,000</td>\n      <td>2.0\u00d7</td>\n    </tr>\n    <tr>\n      <td>uk_west</td>\n      <td>0 \u2013 78,559</td>\n      <td>1.1\u00d7</td>\n    </tr>\n    <tr>\n      <td>uk_west</td>\n      <td>78,560 \u2013 100,000</td>\n      <td>2.2\u00d7</td>\n    </tr>\n    <tr>\n      <td>westeurope</td>\n      <td>0 \u2013 78,559</td>\n      <td>1.2\u00d7</td>\n    </tr>\n    <tr>\n      <td>westeurope</td>\n      <td>78,560 \u2013 100,000</td>\n      <td>2.4\u00d7</td>\n    </tr>\n    <tr>\n      <td>northeurope</td>\n      <td>0 \u2013 78,559</td>\n      <td>1.3\u00d7</td>\n    </tr>\n    <tr>\n      <td>northeurope</td>\n      <td>78,560 \u2013 100,000</td>\n      <td>2.6\u00d7</td>\n    </tr>\n    <tr>\n      <td>eastus</td>\n      <td>0 \u2013 78,559</td>\n      <td>1.4\u00d7</td>\n    </tr>\n    <tr>\n      <td>eastus</td>\n      <td>78,560 \u2013 100,000</td>\n      <td>2.8\u00d7</td>\n    </tr>\n    <tr>\n      <td>westus2</td>\n      <td>0 \u2013 78,559</td>\n      <td>1.5\u00d7</td>\n    </tr>\n    <tr>\n      <td>westus2</td>\n      <td>78,560 \u2013 100,000</td>\n      <td>3.0\u00d7</td>\n    </tr>\n  </tbody>\n</table>\n\n## Data Transfer Ingress Charges\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Geo Region</th>\n      <th>Ingress GB Range</th>\n      <th>Charge Multiplier</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK South</td>\n      <td>0.0 - 20,831.0</td>\n      <td>$1.0</td>\n    </tr>\n    <tr>\n      <td rowspan=\"5\"></td>\n      <td>20,831.0 - 65,694.9</td>\n      <td>$2.0</td>\n    </tr>\n    <tr>\n      <td>65,694.9 - 100,000.0</td>\n      <td>$3.0</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>0.0 - 20,831.0</td>\n      <td>$1.1</td>\n    </tr>\n    <tr>\n      <td>20,831.0 - 65,694.9</td>\n      <td>$2.2</td>\n    </tr>\n    <tr>\n      <td>65,694.9 - 100,000.0</td>\n      <td>$3.3</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>0.0 - 20,831.0</td>\n      <td>$1.2</td>\n    </tr>\n    <tr>\n      <td>20,831.0 - 65,694.9</td>\n      <td>$2.4</td>\n    </tr>\n    <tr>\n      <td>65,694.9 - 100,000.0</td>\n      <td>$3.6</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>0.0 - 20,831.0</td>\n      <td>$1.3</td>\n    </tr>\n    <tr>\n      <td>20,831.0 - 65,694.9</td>\n      <td>$2.6</td>\n    </tr>\n    <tr>\n      <td>65,694.9 - 100,000.0</td>\n      <td>$3.9</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>0.0 - 20,831.0</td>\n      <td>$1.4</td>\n    </tr>\n    <tr>\n      <td>20,831.0 - 65,694.9</td>\n      <td>$2.8</td>\n    </tr>\n    <tr>\n      <td>65,694.9 - 100,000.0</td>\n      <td>$4.2</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>0.0 - 20,831.0</td>\n      <td>$1.5</td>\n    </tr>\n    <tr>\n      <td>20,831.0 - 65,694.9</td>\n      <td>$3.0</td>\n    </tr>\n    <tr>\n      <td>65,694.9 - 100,000.0</td>\n      <td>$4.5</td>\n    </tr>\n  </tbody>\n</table>\n\n## Storage Transaction Fees for Data Operations\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Tier (Tx Millions)</th>\n      <th>LRS (USD per Tx Million)</th>\n      <th>ZRS (USD per Tx Million)</th>\n      <th>GRS (USD per Tx Million)</th>\n      <th>GZRS (USD per Tx Million)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 273.4</td>\n      <td>$1.00</td>\n      <td>$1.10</td>\n      <td>$1.20</td>\n      <td>$1.30</td>\n    </tr>\n    <tr>\n      <td>273.4 \u2013 310.2</td>\n      <td>$2.00</td>\n      <td>$2.20</td>\n      <td>$2.40</td>\n      <td>$2.60</td>\n    </tr>\n    <tr>\n      <td>310.2 \u2013 500.0</td>\n      <td>$3.00</td>\n      <td>$3.30</td>\n      <td>$3.60</td>\n      <td>$3.90</td>\n    </tr>\n  </tbody>\n</table>\n\n## Public IP Addresses Pricing and Charges\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Geo Region</th>\n      <th>IP Count Range</th>\n      <th>Charge (USD per IP)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=\"4\">UK South</td>\n      <td>0 \u2013 23</td>\n      <td>1 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td>24 \u2013 81</td>\n      <td>2 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td>82 \u2013 99</td>\n      <td>3 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td>100</td>\n      <td>4 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">UK West</td>\n      <td>0 \u2013 23</td>\n      <td>2 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td>24 \u2013 81</td>\n      <td>4 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td>82 \u2013 99</td>\n      <td>6 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td>100</td>\n      <td>8 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">West Europe</td>\n      <td>0 \u2013 23</td>\n      <td>3 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td>24 \u2013 81</td>\n      <td>6 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td>82 \u2013 99</td>\n      <td>9 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td>100</td>\n      <td>12 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">North Europe</td>\n      <td>0 \u2013 23</td>\n      <td>4 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td>24 \u2013 81</td>\n      <td>8 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td>82 \u2013 99</td>\n      <td>12 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td>100</td>\n      <td>16 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">East US</td>\n      <td>0 \u2013 23</td>\n      <td>5 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td>24 \u2013 81</td>\n      <td>10 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td>82 \u2013 99</td>\n      <td>15 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td>100</td>\n      <td>20 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td rowspan=\"4\">West US 2</td>\n      <td>0 \u2013 23</td>\n      <td>6 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td>24 \u2013 81</td>\n      <td>12 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td>82 \u2013 99</td>\n      <td>18 \u00d7 ip_count</td>\n    </tr>\n    <tr>\n      <td>100</td>\n      <td>24 \u00d7 ip_count</td>\n    </tr>\n  </tbody>\n</table>\n\n## Load Balancer Pricing: Data Transfer and Hourly Instance Charges\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Pricing Tier</th>\n      <th>Load Balancer Rules</th>\n      <th>Basic (USD per hour)</th>\n      <th>Standard (USD per hour)</th>\n      <th>Premium (USD per hour)</th>\n      <th>Isolated (USD per hour)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0-37 rules</td>\n      <td>1x rules</td>\n      <td>2x rules</td>\n      <td>3x rules</td>\n      <td>4x rules</td>\n    </tr>\n    <tr>\n      <td>38-200 rules</td>\n      <td>2x rules</td>\n      <td>4x rules</td>\n      <td>6x rules</td>\n      <td>8x rules</td>\n    </tr>\n  </tbody>\n</table>\n\n## AKS Cluster Usage Fees and Charges\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>VM Series</th>\n      <th>AKS Nodes</th>\n      <th>Charge (USD per hour)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Dsv5</td>\n      <td>793+</td>\n      <td>$1 \u00d7 aks_nodes</td>\n    </tr>\n    <tr>\n      <td>Dsv5</td>\n      <td>0-792</td>\n      <td>$2 \u00d7 aks_nodes</td>\n    </tr>\n    <tr>\n      <td>Esv5</td>\n      <td>793+</td>\n      <td>$2 \u00d7 aks_nodes</td>\n    </tr>\n    <tr>\n      <td>Esv5</td>\n      <td>0-792</td>\n      <td>$4 \u00d7 aks_nodes</td>\n    </tr>\n    <tr>\n      <td>Fsv2</td>\n      <td>793+</td>\n      <td>$3 \u00d7 aks_nodes</td>\n    </tr>\n    <tr>\n      <td>Fsv2</td>\n      <td>0-792</td>\n      <td>$6 \u00d7 aks_nodes</td>\n    </tr>\n    <tr>\n      <td>Lsv3</td>\n      <td>793+</td>\n      <td>$4 \u00d7 aks_nodes</td>\n    </tr>\n    <tr>\n      <td>Lsv3</td>\n      <td>0-792</td>\n      <td>$8 \u00d7 aks_nodes</td>\n    </tr>\n    <tr>\n      <td>NCasT4_v3</td>\n      <td>793+</td>\n      <td>$5 \u00d7 aks_nodes</td>\n    </tr>\n    <tr>\n      <td>NCasT4_v3</td>\n      <td>0-792</td>\n      <td>$10 \u00d7 aks_nodes</td>\n    </tr>\n  </tbody>\n</table>\n\n## \"Function App Consumption Plan Pricing and Charges\"\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Geo Region</th>\n      <th>Charge</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK West</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <td>UK South</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n\n## \"SQL Database Fees: Compute, Storage, Backup, and Data Transfer Charges\"\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Pricing Tier</th>\n      <th>SQL Capacity (GB)</th>\n      <th>Basic (USD)</th>\n      <th>Standard (USD)</th>\n      <th>Premium (USD)</th>\n      <th>Isolated (USD)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0 \u2013 1321 GB</td>\n      <td>0 \u2013 1321 GB</td>\n      <td>$3 per GB</td>\n      <td>$6 per GB</td>\n      <td>$9 per GB</td>\n      <td>$12 per GB</td>\n    </tr>\n    <tr>\n      <td>1321 \u2013 4607 GB</td>\n      <td>1321 \u2013 4607 GB</td>\n      <td>$2 per GB</td>\n      <td>$4 per GB</td>\n      <td>$6 per GB</td>\n      <td>$8 per GB</td>\n    </tr>\n    <tr>\n      <td>4607 \u2013 8192 GB</td>\n      <td>4607 \u2013 8192 GB</td>\n      <td>$1 per GB</td>\n      <td>$2 per GB</td>\n      <td>$3 per GB</td>\n      <td>$4 per GB</td>\n    </tr>\n  </tbody>\n</table>\n\n## Snapshot Storage Fee\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Redundancy Mode</th>\n      <th>Charge (USD)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>GZRS</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>LRS</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>GRS</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <td>ZRS</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n\n## App Service Fees: Per-Instance Pricing for Web, Mobile, and API Applications\n\nThis charge applies to resources deployed in specific locations within Microsoft Azure. The charge is calculated based on the location where the resource is deployed, with varying rates applied depending on the region.\n\nThe charge rates are as follows: resources deployed in North Europe incur a charge of 1 USD, West US 2 incurs a charge of 2 USD, East US incurs a charge of 3 USD, West Europe incurs a charge of 4 USD, UK West incurs a charge of 5 USD, and UK South incurs a charge of 6 USD. The location is determined by the region where the resource is deployed, and the charge is calculated accordingly.\n\nMicrosoft Azure's cloud pricing policy outlines the terms and conditions governing the use of our cloud services, with all applicable charges billed in United States Dollars (USD). This policy is designed to provide transparency and clarity on our pricing structure, ensuring customers can make informed decisions about their cloud usage. For any questions or concerns regarding this policy, please contact Azure Support through the official Azure website or by submitting a support request through the Azure portal.\n\n**Policy Effective Date:** August 21, 2025\n\n", {"compute_vm_fee": {"description": "compute_vm_fee conditions by spot_flag and billable_hours:\n\nfor true the following charges apply:\n  - if billable_hours in [649.2, 744.0), charge is 1.0 \u00d7 billable_hours\n  - if billable_hours in [93.1, 649.2), charge is 2.0 \u00d7 billable_hours\n  - if billable_hours in [0.0, 93.1), charge is 3.0 \u00d7 billable_hours\nfor false the following charges apply:\n  - if billable_hours in [649.2, 744.0), charge is 1.1 \u00d7 billable_hours\n  - if billable_hours in [93.1, 649.2), charge is 2.2 \u00d7 billable_hours\n  - if billable_hours in [0.0, 93.1), charge is 3.3 \u00d7 billable_hours", "code": "def compute_charge(spot_instance, usage_hours):\n    if spot_instance == 'true' and 649.2 <= usage_hours < 744.0: return 1 * usage_hours * 1.0\n    elif spot_instance == 'true' and 93.1 <= usage_hours < 649.2: return 2 * usage_hours * 1.0\n    elif spot_instance == 'true' and 0.0 <= usage_hours < 93.1: return 3 * usage_hours * 1.0\n    elif spot_instance == 'false' and 649.2 <= usage_hours < 744.0: return 1 * usage_hours * 1.1\n    elif spot_instance == 'false' and 93.1 <= usage_hours < 649.2: return 2 * usage_hours * 1.1\n    elif spot_instance == 'false' and 0.0 <= usage_hours < 93.1: return 3 * usage_hours * 1.1\n    else: raise ValueError(f'spot_instance or usage_hours is out of expected range')", "variables_used": {"spot_instance": {"unit": "flag", "description": "Whether the compute uses spot capacity", "dtype": "str"}, "usage_hours": {"unit": "hours", "description": "Total runtime in hours over the billing window", "dtype": "float"}}, "synonyms": ["vm runtime charge", "compute instance fee", "virtual machine cost"], "charge_description": "Charge for running virtual machines based on vCPU, memory, OS, and commitment."}, "gpu_compute_fee": {"description": "gpu_compute_fee conditions by graphics_processor and accelerator_count:\n\nfor T4 the following charges apply:\n  - if accelerator_count in [7, 8), charge is 1 \u00d7 accelerator_count\n  - if accelerator_count in [7, 7), charge is 2 \u00d7 accelerator_count\n  - if accelerator_count in [1, 7), charge is 3 \u00d7 accelerator_count\n  - if accelerator_count in [0, 1), charge is 4 \u00d7 accelerator_count\nfor A10 the following charges apply:\n  - if accelerator_count in [7, 8), charge is 2 \u00d7 accelerator_count\n  - if accelerator_count in [7, 7), charge is 4 \u00d7 accelerator_count\n  - if accelerator_count in [1, 7), charge is 6 \u00d7 accelerator_count\n  - if accelerator_count in [0, 1), charge is 8 \u00d7 accelerator_count\nfor A100 the following charges apply:\n  - if accelerator_count in [7, 8), charge is 3 \u00d7 accelerator_count\n  - if accelerator_count in [7, 7), charge is 6 \u00d7 accelerator_count\n  - if accelerator_count in [1, 7), charge is 9 \u00d7 accelerator_count\n  - if accelerator_count in [0, 1), charge is 12 \u00d7 accelerator_count\nfor MI300X the following charges apply:\n  - if accelerator_count in [7, 8), charge is 4 \u00d7 accelerator_count\n  - if accelerator_count in [7, 7), charge is 8 \u00d7 accelerator_count\n  - if accelerator_count in [1, 7), charge is 12 \u00d7 accelerator_count\n  - if accelerator_count in [0, 1), charge is 16 \u00d7 accelerator_count", "code": "def compute_charge(gpu_type, gpu_count):\n    if gpu_type == 'T4' and 7 <= gpu_count < 8: return 1 * gpu_count * 1\n    elif gpu_type == 'T4' and 7 <= gpu_count < 7: return 2 * gpu_count * 1\n    elif gpu_type == 'T4' and 1 <= gpu_count < 7: return 3 * gpu_count * 1\n    elif gpu_type == 'T4' and 0 <= gpu_count < 1: return 4 * gpu_count * 1\n    elif gpu_type == 'A10' and 7 <= gpu_count < 8: return 1 * gpu_count * 2\n    elif gpu_type == 'A10' and 7 <= gpu_count < 7: return 2 * gpu_count * 2\n    elif gpu_type == 'A10' and 1 <= gpu_count < 7: return 3 * gpu_count * 2\n    elif gpu_type == 'A10' and 0 <= gpu_count < 1: return 4 * gpu_count * 2\n    elif gpu_type == 'A100' and 7 <= gpu_count < 8: return 1 * gpu_count * 3\n    elif gpu_type == 'A100' and 7 <= gpu_count < 7: return 2 * gpu_count * 3\n    elif gpu_type == 'A100' and 1 <= gpu_count < 7: return 3 * gpu_count * 3\n    elif gpu_type == 'A100' and 0 <= gpu_count < 1: return 4 * gpu_count * 3\n    elif gpu_type == 'MI300X' and 7 <= gpu_count < 8: return 1 * gpu_count * 4\n    elif gpu_type == 'MI300X' and 7 <= gpu_count < 7: return 2 * gpu_count * 4\n    elif gpu_type == 'MI300X' and 1 <= gpu_count < 7: return 3 * gpu_count * 4\n    elif gpu_type == 'MI300X' and 0 <= gpu_count < 1: return 4 * gpu_count * 4\n    else: raise ValueError(f'gpu_type or gpu_count is out of expected range')", "variables_used": {"gpu_type": {"unit": "gpu type", "description": "Type of GPU accelerator", "dtype": "str"}, "gpu_count": {"unit": "GPUs", "description": "Number of GPUs attached to the instance", "dtype": "int"}}, "synonyms": ["gpu instance fee", "accelerator charge", "gpu runtime cost"], "charge_description": "Charge for GPU-enabled compute usage."}, "managed_disk_fee": {"description": "if location is 'westus2', charge is 1; if location is 'uk_south', charge is 2; if location is 'uk_west', charge is 3; if location is 'northeurope', charge is 4; if location is 'eastus', charge is 5; if location is 'westeurope', charge is 6 The variable 'location' is measured in location.", "code": "def compute_charge(region):\n    if region == 'westus2': return 1\n    elif region == 'uk_south': return 2\n    elif region == 'uk_west': return 3\n    elif region == 'northeurope': return 4\n    elif region == 'eastus': return 5\n    elif region == 'westeurope': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["disk charge", "managed storage fee", "block storage cost"], "charge_description": "Charge for managed disks based on type, size, and count."}, "data_egress_fee": {"description": "data_egress_fee conditions by geo_region and egress_gb:\n\nfor uk_south the following charges apply:\n  - if egress_gb in [0.0, 78559.0), charge is 1.0 \u00d7 egress_gb\n  - if egress_gb in [78559.0, 100000.0), charge is 2.0 \u00d7 egress_gb\nfor uk_west the following charges apply:\n  - if egress_gb in [0.0, 78559.0), charge is 1.1 \u00d7 egress_gb\n  - if egress_gb in [78559.0, 100000.0), charge is 2.2 \u00d7 egress_gb\nfor westeurope the following charges apply:\n  - if egress_gb in [0.0, 78559.0), charge is 1.2 \u00d7 egress_gb\n  - if egress_gb in [78559.0, 100000.0), charge is 2.4 \u00d7 egress_gb\nfor northeurope the following charges apply:\n  - if egress_gb in [0.0, 78559.0), charge is 1.3 \u00d7 egress_gb\n  - if egress_gb in [78559.0, 100000.0), charge is 2.6 \u00d7 egress_gb\nfor eastus the following charges apply:\n  - if egress_gb in [0.0, 78559.0), charge is 1.4 \u00d7 egress_gb\n  - if egress_gb in [78559.0, 100000.0), charge is 2.8 \u00d7 egress_gb\nfor westus2 the following charges apply:\n  - if egress_gb in [0.0, 78559.0), charge is 1.5 \u00d7 egress_gb\n  - if egress_gb in [78559.0, 100000.0), charge is 3.0 \u00d7 egress_gb", "code": "def compute_charge(region, data_egress_gb):\n    if region == 'uk_south' and 0.0 <= data_egress_gb < 78559.0: return 1 * data_egress_gb * 1.0\n    elif region == 'uk_south' and 78559.0 <= data_egress_gb < 100000.0: return 2 * data_egress_gb * 1.0\n    elif region == 'uk_west' and 0.0 <= data_egress_gb < 78559.0: return 1 * data_egress_gb * 1.1\n    elif region == 'uk_west' and 78559.0 <= data_egress_gb < 100000.0: return 2 * data_egress_gb * 1.1\n    elif region == 'westeurope' and 0.0 <= data_egress_gb < 78559.0: return 1 * data_egress_gb * 1.2\n    elif region == 'westeurope' and 78559.0 <= data_egress_gb < 100000.0: return 2 * data_egress_gb * 1.2\n    elif region == 'northeurope' and 0.0 <= data_egress_gb < 78559.0: return 1 * data_egress_gb * 1.3\n    elif region == 'northeurope' and 78559.0 <= data_egress_gb < 100000.0: return 2 * data_egress_gb * 1.3\n    elif region == 'eastus' and 0.0 <= data_egress_gb < 78559.0: return 1 * data_egress_gb * 1.4\n    elif region == 'eastus' and 78559.0 <= data_egress_gb < 100000.0: return 2 * data_egress_gb * 1.4\n    elif region == 'westus2' and 0.0 <= data_egress_gb < 78559.0: return 1 * data_egress_gb * 1.5\n    elif region == 'westus2' and 78559.0 <= data_egress_gb < 100000.0: return 2 * data_egress_gb * 1.5\n    else: raise ValueError(f'region or data_egress_gb is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "data_egress_gb": {"unit": "GB", "description": "Outbound data transferred from Azure", "dtype": "float"}}, "synonyms": ["egress charge", "outbound data fee", "data transfer out"], "charge_description": "Charge for data leaving Azure regions."}, "data_ingress_fee": {"description": "data_ingress_fee conditions by geo_region and ingress_gb:\n\nfor uk_south the following charges apply:\n  - if ingress_gb in [0.0, 20831.0), charge is 1.0 \u00d7 ingress_gb\n  - if ingress_gb in [20831.0, 65694.9), charge is 2.0 \u00d7 ingress_gb\n  - if ingress_gb in [65694.9, 100000.0), charge is 3.0 \u00d7 ingress_gb\nfor uk_west the following charges apply:\n  - if ingress_gb in [0.0, 20831.0), charge is 1.1 \u00d7 ingress_gb\n  - if ingress_gb in [20831.0, 65694.9), charge is 2.2 \u00d7 ingress_gb\n  - if ingress_gb in [65694.9, 100000.0), charge is 3.3 \u00d7 ingress_gb\nfor westeurope the following charges apply:\n  - if ingress_gb in [0.0, 20831.0), charge is 1.2 \u00d7 ingress_gb\n  - if ingress_gb in [20831.0, 65694.9), charge is 2.4 \u00d7 ingress_gb\n  - if ingress_gb in [65694.9, 100000.0), charge is 3.6 \u00d7 ingress_gb\nfor northeurope the following charges apply:\n  - if ingress_gb in [0.0, 20831.0), charge is 1.3 \u00d7 ingress_gb\n  - if ingress_gb in [20831.0, 65694.9), charge is 2.6 \u00d7 ingress_gb\n  - if ingress_gb in [65694.9, 100000.0), charge is 3.9 \u00d7 ingress_gb\nfor eastus the following charges apply:\n  - if ingress_gb in [0.0, 20831.0), charge is 1.4 \u00d7 ingress_gb\n  - if ingress_gb in [20831.0, 65694.9), charge is 2.8 \u00d7 ingress_gb\n  - if ingress_gb in [65694.9, 100000.0), charge is 4.2 \u00d7 ingress_gb\nfor westus2 the following charges apply:\n  - if ingress_gb in [0.0, 20831.0), charge is 1.5 \u00d7 ingress_gb\n  - if ingress_gb in [20831.0, 65694.9), charge is 3.0 \u00d7 ingress_gb\n  - if ingress_gb in [65694.9, 100000.0), charge is 4.5 \u00d7 ingress_gb", "code": "def compute_charge(region, data_ingress_gb):\n    if region == 'uk_south' and 0.0 <= data_ingress_gb < 20831.0: return 1 * data_ingress_gb * 1.0\n    elif region == 'uk_south' and 20831.0 <= data_ingress_gb < 65694.9: return 2 * data_ingress_gb * 1.0\n    elif region == 'uk_south' and 65694.9 <= data_ingress_gb < 100000.0: return 3 * data_ingress_gb * 1.0\n    elif region == 'uk_west' and 0.0 <= data_ingress_gb < 20831.0: return 1 * data_ingress_gb * 1.1\n    elif region == 'uk_west' and 20831.0 <= data_ingress_gb < 65694.9: return 2 * data_ingress_gb * 1.1\n    elif region == 'uk_west' and 65694.9 <= data_ingress_gb < 100000.0: return 3 * data_ingress_gb * 1.1\n    elif region == 'westeurope' and 0.0 <= data_ingress_gb < 20831.0: return 1 * data_ingress_gb * 1.2\n    elif region == 'westeurope' and 20831.0 <= data_ingress_gb < 65694.9: return 2 * data_ingress_gb * 1.2\n    elif region == 'westeurope' and 65694.9 <= data_ingress_gb < 100000.0: return 3 * data_ingress_gb * 1.2\n    elif region == 'northeurope' and 0.0 <= data_ingress_gb < 20831.0: return 1 * data_ingress_gb * 1.3\n    elif region == 'northeurope' and 20831.0 <= data_ingress_gb < 65694.9: return 2 * data_ingress_gb * 1.3\n    elif region == 'northeurope' and 65694.9 <= data_ingress_gb < 100000.0: return 3 * data_ingress_gb * 1.3\n    elif region == 'eastus' and 0.0 <= data_ingress_gb < 20831.0: return 1 * data_ingress_gb * 1.4\n    elif region == 'eastus' and 20831.0 <= data_ingress_gb < 65694.9: return 2 * data_ingress_gb * 1.4\n    elif region == 'eastus' and 65694.9 <= data_ingress_gb < 100000.0: return 3 * data_ingress_gb * 1.4\n    elif region == 'westus2' and 0.0 <= data_ingress_gb < 20831.0: return 1 * data_ingress_gb * 1.5\n    elif region == 'westus2' and 20831.0 <= data_ingress_gb < 65694.9: return 2 * data_ingress_gb * 1.5\n    elif region == 'westus2' and 65694.9 <= data_ingress_gb < 100000.0: return 3 * data_ingress_gb * 1.5\n    else: raise ValueError(f'region or data_ingress_gb is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "data_ingress_gb": {"unit": "GB", "description": "Inbound data transferred to Azure", "dtype": "float"}}, "synonyms": ["ingress charge", "inbound data fee", "data transfer in"], "charge_description": "Charge for data entering Azure regions where applicable."}, "storage_transaction_fee": {"description": "storage_transaction_fee conditions by replication and tx_millions:\n\nfor LRS the following charges apply:\n  - if tx_millions in [0.0, 273.4), charge is 1.0 \u00d7 tx_millions\n  - if tx_millions in [273.4, 310.2), charge is 2.0 \u00d7 tx_millions\n  - if tx_millions in [310.2, 500.0), charge is 3.0 \u00d7 tx_millions\nfor ZRS the following charges apply:\n  - if tx_millions in [0.0, 273.4), charge is 1.1 \u00d7 tx_millions\n  - if tx_millions in [273.4, 310.2), charge is 2.2 \u00d7 tx_millions\n  - if tx_millions in [310.2, 500.0), charge is 3.3 \u00d7 tx_millions\nfor GRS the following charges apply:\n  - if tx_millions in [0.0, 273.4), charge is 1.2 \u00d7 tx_millions\n  - if tx_millions in [273.4, 310.2), charge is 2.4 \u00d7 tx_millions\n  - if tx_millions in [310.2, 500.0), charge is 3.6 \u00d7 tx_millions\nfor GZRS the following charges apply:\n  - if tx_millions in [0.0, 273.4), charge is 1.3 \u00d7 tx_millions\n  - if tx_millions in [273.4, 310.2), charge is 2.6 \u00d7 tx_millions\n  - if tx_millions in [310.2, 500.0), charge is 3.9 \u00d7 tx_millions", "code": "def compute_charge(redundancy, storage_transactions_millions):\n    if redundancy == 'LRS' and 0.0 <= storage_transactions_millions < 273.4: return 1 * storage_transactions_millions * 1.0\n    elif redundancy == 'LRS' and 273.4 <= storage_transactions_millions < 310.2: return 2 * storage_transactions_millions * 1.0\n    elif redundancy == 'LRS' and 310.2 <= storage_transactions_millions < 500.0: return 3 * storage_transactions_millions * 1.0\n    elif redundancy == 'ZRS' and 0.0 <= storage_transactions_millions < 273.4: return 1 * storage_transactions_millions * 1.1\n    elif redundancy == 'ZRS' and 273.4 <= storage_transactions_millions < 310.2: return 2 * storage_transactions_millions * 1.1\n    elif redundancy == 'ZRS' and 310.2 <= storage_transactions_millions < 500.0: return 3 * storage_transactions_millions * 1.1\n    elif redundancy == 'GRS' and 0.0 <= storage_transactions_millions < 273.4: return 1 * storage_transactions_millions * 1.2\n    elif redundancy == 'GRS' and 273.4 <= storage_transactions_millions < 310.2: return 2 * storage_transactions_millions * 1.2\n    elif redundancy == 'GRS' and 310.2 <= storage_transactions_millions < 500.0: return 3 * storage_transactions_millions * 1.2\n    elif redundancy == 'GZRS' and 0.0 <= storage_transactions_millions < 273.4: return 1 * storage_transactions_millions * 1.3\n    elif redundancy == 'GZRS' and 273.4 <= storage_transactions_millions < 310.2: return 2 * storage_transactions_millions * 1.3\n    elif redundancy == 'GZRS' and 310.2 <= storage_transactions_millions < 500.0: return 3 * storage_transactions_millions * 1.3\n    else: raise ValueError(f'redundancy or storage_transactions_millions is out of expected range')", "variables_used": {"redundancy": {"unit": "redundancy", "description": "Storage redundancy configuration", "dtype": "str"}, "storage_transactions_millions": {"unit": "million tx", "description": "Number of storage account operations in millions", "dtype": "float"}}, "synonyms": ["storage ops fee", "transaction charge", "storage request cost"], "charge_description": "Charge for storage account transactions and redundancy level."}, "public_ip_fee": {"description": "public_ip_fee conditions by geo_region and ip_count:\n\nfor uk_south the following charges apply:\n  - if ip_count in [0, 24), charge is 1 \u00d7 ip_count\n  - if ip_count in [24, 82), charge is 2 \u00d7 ip_count\n  - if ip_count in [82, 100), charge is 3 \u00d7 ip_count\n  - if ip_count in [100, 100), charge is 4 \u00d7 ip_count\nfor uk_west the following charges apply:\n  - if ip_count in [0, 24), charge is 2 \u00d7 ip_count\n  - if ip_count in [24, 82), charge is 4 \u00d7 ip_count\n  - if ip_count in [82, 100), charge is 6 \u00d7 ip_count\n  - if ip_count in [100, 100), charge is 8 \u00d7 ip_count\nfor westeurope the following charges apply:\n  - if ip_count in [0, 24), charge is 3 \u00d7 ip_count\n  - if ip_count in [24, 82), charge is 6 \u00d7 ip_count\n  - if ip_count in [82, 100), charge is 9 \u00d7 ip_count\n  - if ip_count in [100, 100), charge is 12 \u00d7 ip_count\nfor northeurope the following charges apply:\n  - if ip_count in [0, 24), charge is 4 \u00d7 ip_count\n  - if ip_count in [24, 82), charge is 8 \u00d7 ip_count\n  - if ip_count in [82, 100), charge is 12 \u00d7 ip_count\n  - if ip_count in [100, 100), charge is 16 \u00d7 ip_count\nfor eastus the following charges apply:\n  - if ip_count in [0, 24), charge is 5 \u00d7 ip_count\n  - if ip_count in [24, 82), charge is 10 \u00d7 ip_count\n  - if ip_count in [82, 100), charge is 15 \u00d7 ip_count\n  - if ip_count in [100, 100), charge is 20 \u00d7 ip_count\nfor westus2 the following charges apply:\n  - if ip_count in [0, 24), charge is 6 \u00d7 ip_count\n  - if ip_count in [24, 82), charge is 12 \u00d7 ip_count\n  - if ip_count in [82, 100), charge is 18 \u00d7 ip_count\n  - if ip_count in [100, 100), charge is 24 \u00d7 ip_count", "code": "def compute_charge(region, public_ip_count):\n    if region == 'uk_south' and 0 <= public_ip_count < 24: return 1 * public_ip_count * 1\n    elif region == 'uk_south' and 24 <= public_ip_count < 82: return 2 * public_ip_count * 1\n    elif region == 'uk_south' and 82 <= public_ip_count < 100: return 3 * public_ip_count * 1\n    elif region == 'uk_south' and 100 <= public_ip_count < 100: return 4 * public_ip_count * 1\n    elif region == 'uk_west' and 0 <= public_ip_count < 24: return 1 * public_ip_count * 2\n    elif region == 'uk_west' and 24 <= public_ip_count < 82: return 2 * public_ip_count * 2\n    elif region == 'uk_west' and 82 <= public_ip_count < 100: return 3 * public_ip_count * 2\n    elif region == 'uk_west' and 100 <= public_ip_count < 100: return 4 * public_ip_count * 2\n    elif region == 'westeurope' and 0 <= public_ip_count < 24: return 1 * public_ip_count * 3\n    elif region == 'westeurope' and 24 <= public_ip_count < 82: return 2 * public_ip_count * 3\n    elif region == 'westeurope' and 82 <= public_ip_count < 100: return 3 * public_ip_count * 3\n    elif region == 'westeurope' and 100 <= public_ip_count < 100: return 4 * public_ip_count * 3\n    elif region == 'northeurope' and 0 <= public_ip_count < 24: return 1 * public_ip_count * 4\n    elif region == 'northeurope' and 24 <= public_ip_count < 82: return 2 * public_ip_count * 4\n    elif region == 'northeurope' and 82 <= public_ip_count < 100: return 3 * public_ip_count * 4\n    elif region == 'northeurope' and 100 <= public_ip_count < 100: return 4 * public_ip_count * 4\n    elif region == 'eastus' and 0 <= public_ip_count < 24: return 1 * public_ip_count * 5\n    elif region == 'eastus' and 24 <= public_ip_count < 82: return 2 * public_ip_count * 5\n    elif region == 'eastus' and 82 <= public_ip_count < 100: return 3 * public_ip_count * 5\n    elif region == 'eastus' and 100 <= public_ip_count < 100: return 4 * public_ip_count * 5\n    elif region == 'westus2' and 0 <= public_ip_count < 24: return 1 * public_ip_count * 6\n    elif region == 'westus2' and 24 <= public_ip_count < 82: return 2 * public_ip_count * 6\n    elif region == 'westus2' and 82 <= public_ip_count < 100: return 3 * public_ip_count * 6\n    elif region == 'westus2' and 100 <= public_ip_count < 100: return 4 * public_ip_count * 6\n    else: raise ValueError(f'region or public_ip_count is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "public_ip_count": {"unit": "IPs", "description": "Number of public IP addresses allocated", "dtype": "int"}}, "synonyms": ["ip address charge", "public ip cost", "elastic ip fee"], "charge_description": "Charge for public IP addresses allocated."}, "load_balancer_fee": {"description": "load_balancer_fee conditions by pricing_tier and balancer_rules:\n\nfor basic the following charges apply:\n  - if balancer_rules in [0, 38), charge is 1 \u00d7 balancer_rules\n  - if balancer_rules in [38, 200), charge is 2 \u00d7 balancer_rules\nfor standard the following charges apply:\n  - if balancer_rules in [0, 38), charge is 2 \u00d7 balancer_rules\n  - if balancer_rules in [38, 200), charge is 4 \u00d7 balancer_rules\nfor premium the following charges apply:\n  - if balancer_rules in [0, 38), charge is 3 \u00d7 balancer_rules\n  - if balancer_rules in [38, 200), charge is 6 \u00d7 balancer_rules\nfor isolated the following charges apply:\n  - if balancer_rules in [0, 38), charge is 4 \u00d7 balancer_rules\n  - if balancer_rules in [38, 200), charge is 8 \u00d7 balancer_rules", "code": "def compute_charge(service_tier, load_balancer_rules):\n    if service_tier == 'basic' and 0 <= load_balancer_rules < 38: return 1 * load_balancer_rules * 1\n    elif service_tier == 'basic' and 38 <= load_balancer_rules < 200: return 2 * load_balancer_rules * 1\n    elif service_tier == 'standard' and 0 <= load_balancer_rules < 38: return 1 * load_balancer_rules * 2\n    elif service_tier == 'standard' and 38 <= load_balancer_rules < 200: return 2 * load_balancer_rules * 2\n    elif service_tier == 'premium' and 0 <= load_balancer_rules < 38: return 1 * load_balancer_rules * 3\n    elif service_tier == 'premium' and 38 <= load_balancer_rules < 200: return 2 * load_balancer_rules * 3\n    elif service_tier == 'isolated' and 0 <= load_balancer_rules < 38: return 1 * load_balancer_rules * 4\n    elif service_tier == 'isolated' and 38 <= load_balancer_rules < 200: return 2 * load_balancer_rules * 4\n    else: raise ValueError(f'service_tier or load_balancer_rules is out of expected range')", "variables_used": {"service_tier": {"unit": "tier", "description": "Service tier for managed services", "dtype": "str"}, "load_balancer_rules": {"unit": "rules", "description": "Configured load balancer rules", "dtype": "int"}}, "synonyms": ["lb fee", "balancer charge", "traffic distribution cost"], "charge_description": "Charge for load balancer rules and tier."}, "aks_cluster_fee": {"description": "aks_cluster_fee conditions by vm series and aks_nodes:\n\nfor Dsv5 the following charges apply:\n  - if aks_nodes in [793, 1000), charge is 1 \u00d7 aks_nodes\n  - if aks_nodes in [0, 793), charge is 2 \u00d7 aks_nodes\nfor Esv5 the following charges apply:\n  - if aks_nodes in [793, 1000), charge is 2 \u00d7 aks_nodes\n  - if aks_nodes in [0, 793), charge is 4 \u00d7 aks_nodes\nfor Fsv2 the following charges apply:\n  - if aks_nodes in [793, 1000), charge is 3 \u00d7 aks_nodes\n  - if aks_nodes in [0, 793), charge is 6 \u00d7 aks_nodes\nfor Lsv3 the following charges apply:\n  - if aks_nodes in [793, 1000), charge is 4 \u00d7 aks_nodes\n  - if aks_nodes in [0, 793), charge is 8 \u00d7 aks_nodes\nfor NCasT4_v3 the following charges apply:\n  - if aks_nodes in [793, 1000), charge is 5 \u00d7 aks_nodes\n  - if aks_nodes in [0, 793), charge is 10 \u00d7 aks_nodes", "code": "def compute_charge(vm_family, kubernetes_node_count):\n    if vm_family == 'Dsv5' and 793 <= kubernetes_node_count < 1000: return 1 * kubernetes_node_count * 1\n    elif vm_family == 'Dsv5' and 0 <= kubernetes_node_count < 793: return 2 * kubernetes_node_count * 1\n    elif vm_family == 'Esv5' and 793 <= kubernetes_node_count < 1000: return 1 * kubernetes_node_count * 2\n    elif vm_family == 'Esv5' and 0 <= kubernetes_node_count < 793: return 2 * kubernetes_node_count * 2\n    elif vm_family == 'Fsv2' and 793 <= kubernetes_node_count < 1000: return 1 * kubernetes_node_count * 3\n    elif vm_family == 'Fsv2' and 0 <= kubernetes_node_count < 793: return 2 * kubernetes_node_count * 3\n    elif vm_family == 'Lsv3' and 793 <= kubernetes_node_count < 1000: return 1 * kubernetes_node_count * 4\n    elif vm_family == 'Lsv3' and 0 <= kubernetes_node_count < 793: return 2 * kubernetes_node_count * 4\n    elif vm_family == 'NCasT4_v3' and 793 <= kubernetes_node_count < 1000: return 1 * kubernetes_node_count * 5\n    elif vm_family == 'NCasT4_v3' and 0 <= kubernetes_node_count < 793: return 2 * kubernetes_node_count * 5\n    else: raise ValueError(f'vm_family or kubernetes_node_count is out of expected range')", "variables_used": {"vm_family": {"unit": "family", "description": "Virtual machine family that defines CPU and memory profile", "dtype": "str"}, "kubernetes_node_count": {"unit": "nodes", "description": "Number of AKS nodes in the cluster", "dtype": "int"}}, "synonyms": ["kubernetes fee", "aks charge", "container cluster cost"], "charge_description": "Charge for AKS clusters based on node count and type."}, "function_app_fee": {"description": "if geo_region is 'uk_west', charge is 1; if geo_region is 'westeurope', charge is 2; if geo_region is 'eastus', charge is 3; if geo_region is 'northeurope', charge is 4; if geo_region is 'westus2', charge is 5; if geo_region is 'uk_south', charge is 6 The variable 'geo_region' is measured in geo_region.", "code": "def compute_charge(region):\n    if region == 'uk_west': return 1\n    elif region == 'westeurope': return 2\n    elif region == 'eastus': return 3\n    elif region == 'northeurope': return 4\n    elif region == 'westus2': return 5\n    elif region == 'uk_south': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["faas charge", "functions cost", "serverless fee"], "charge_description": "Charge for serverless executions and execution time."}, "sql_database_fee": {"description": "sql_database_fee conditions by pricing_tier and sql_capacity_gb:\n\nfor basic the following charges apply:\n  - if sql_capacity_gb in [4607, 8192), charge is 1 \u00d7 sql_capacity_gb\n  - if sql_capacity_gb in [1321, 4607), charge is 2 \u00d7 sql_capacity_gb\n  - if sql_capacity_gb in [0, 1321), charge is 3 \u00d7 sql_capacity_gb\nfor standard the following charges apply:\n  - if sql_capacity_gb in [4607, 8192), charge is 2 \u00d7 sql_capacity_gb\n  - if sql_capacity_gb in [1321, 4607), charge is 4 \u00d7 sql_capacity_gb\n  - if sql_capacity_gb in [0, 1321), charge is 6 \u00d7 sql_capacity_gb\nfor premium the following charges apply:\n  - if sql_capacity_gb in [4607, 8192), charge is 3 \u00d7 sql_capacity_gb\n  - if sql_capacity_gb in [1321, 4607), charge is 6 \u00d7 sql_capacity_gb\n  - if sql_capacity_gb in [0, 1321), charge is 9 \u00d7 sql_capacity_gb\nfor isolated the following charges apply:\n  - if sql_capacity_gb in [4607, 8192), charge is 4 \u00d7 sql_capacity_gb\n  - if sql_capacity_gb in [1321, 4607), charge is 8 \u00d7 sql_capacity_gb\n  - if sql_capacity_gb in [0, 1321), charge is 12 \u00d7 sql_capacity_gb", "code": "def compute_charge(service_tier, sql_storage_gb):\n    if service_tier == 'basic' and 4607 <= sql_storage_gb < 8192: return 1 * sql_storage_gb * 1\n    elif service_tier == 'basic' and 1321 <= sql_storage_gb < 4607: return 2 * sql_storage_gb * 1\n    elif service_tier == 'basic' and 0 <= sql_storage_gb < 1321: return 3 * sql_storage_gb * 1\n    elif service_tier == 'standard' and 4607 <= sql_storage_gb < 8192: return 1 * sql_storage_gb * 2\n    elif service_tier == 'standard' and 1321 <= sql_storage_gb < 4607: return 2 * sql_storage_gb * 2\n    elif service_tier == 'standard' and 0 <= sql_storage_gb < 1321: return 3 * sql_storage_gb * 2\n    elif service_tier == 'premium' and 4607 <= sql_storage_gb < 8192: return 1 * sql_storage_gb * 3\n    elif service_tier == 'premium' and 1321 <= sql_storage_gb < 4607: return 2 * sql_storage_gb * 3\n    elif service_tier == 'premium' and 0 <= sql_storage_gb < 1321: return 3 * sql_storage_gb * 3\n    elif service_tier == 'isolated' and 4607 <= sql_storage_gb < 8192: return 1 * sql_storage_gb * 4\n    elif service_tier == 'isolated' and 1321 <= sql_storage_gb < 4607: return 2 * sql_storage_gb * 4\n    elif service_tier == 'isolated' and 0 <= sql_storage_gb < 1321: return 3 * sql_storage_gb * 4\n    else: raise ValueError(f'service_tier or sql_storage_gb is out of expected range')", "variables_used": {"service_tier": {"unit": "tier", "description": "Service tier for managed services", "dtype": "str"}, "sql_storage_gb": {"unit": "GB", "description": "Allocated storage for Azure SQL", "dtype": "int"}}, "synonyms": ["sql charge", "database fee", "sql managed instance cost"], "charge_description": "Charge for Azure SQL based on vCores, storage, and retention."}, "snapshot_storage_fee": {"description": "if redundancy_mode is 'GZRS', charge is 1; if redundancy_mode is 'LRS', charge is 2; if redundancy_mode is 'GRS', charge is 3; if redundancy_mode is 'ZRS', charge is 4 The variable 'redundancy_mode' is measured in redundancy_mode.", "code": "def compute_charge(redundancy):\n    if redundancy == 'GZRS': return 1\n    elif redundancy == 'LRS': return 2\n    elif redundancy == 'GRS': return 3\n    elif redundancy == 'ZRS': return 4\n    else: raise ValueError(f'Unknown value for redundancy: {redundancy}')", "variables_used": {"redundancy": {"unit": "redundancy", "description": "Storage redundancy configuration", "dtype": "str"}}, "synonyms": ["snapshot fee", "backup snapshot cost", "image snapshot charge"], "charge_description": "Charge for snapshot storage volume and redundancy."}, "app_service_fee": {"description": "if location is 'northeurope', charge is 1; if location is 'westus2', charge is 2; if location is 'eastus', charge is 3; if location is 'westeurope', charge is 4; if location is 'uk_west', charge is 5; if location is 'uk_south', charge is 6 The variable 'location' is measured in location.", "code": "def compute_charge(region):\n    if region == 'northeurope': return 1\n    elif region == 'westus2': return 2\n    elif region == 'eastus': return 3\n    elif region == 'westeurope': return 4\n    elif region == 'uk_west': return 5\n    elif region == 'uk_south': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["app service charge", "web app fee", "app hosting cost"], "charge_description": "Charge for App Service instances and tier."}}]
["# Microsoft Azure Cloud Pricing Policy Document\n\nMicrosoft Azure is pleased to present its official Cloud Pricing Policy document, which provides a comprehensive outline of our fee structure and pricing policies for cloud services in British Pounds (GBP). This document serves as a definitive guide for customers, partners, and stakeholders, ensuring transparency and clarity on our pricing practices. By referring to this policy, users can make informed decisions about their cloud service usage and associated costs.\n\n## \"Virtual Machine Pricing: Compute Fees by Instance Type and Region\"\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Billable Hours Range</th>\n      <th>Charge Multiplier</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0.0 \u2013 443.2</td>\n      <td>2 \u00d7 billable hours</td>\n    </tr>\n    <tr>\n      <td>443.2 \u2013 744.0</td>\n      <td>1 \u00d7 billable hours</td>\n    </tr>\n  </tbody>\n</table>\n\n## GPU Accelerated Virtual Machine Usage Fees\n\nThis charge category applies to compute resources utilized within a specified timeframe, measured in hours. The charge is calculated based on the number of runtime hours consumed, with tiered pricing applied to the total usage. For usage up to 218.9 hours, the charge is calculated as 1 times the number of runtime hours. For usage between 218.9 and 601.7 hours, the charge is calculated as 2 times the number of runtime hours. For usage between 601.7 and 744.0 hours, the charge is calculated as 3 times the number of runtime hours.\n\nAll charges are denominated in British Pounds (GBP). This charge category is designed to provide a cost-effective way for customers to utilize compute resources, while also incentivizing efficient usage patterns. By understanding their runtime hour consumption, customers can accurately calculate their charges and optimize their resource utilization to minimize costs.\n\n## Managed Disk Storage and Snapshot Charges\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Disk Tier</th>\n      <th>Disk Count 0-24</th>\n      <th>Disk Count 25-49</th>\n      <th>Disk Count 50-64</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Standard HDD</td>\n      <td>\u00a31.00 per unit</td>\n      <td>\u00a32.00 per unit</td>\n      <td>\u00a33.00 per unit</td>\n    </tr>\n    <tr>\n      <td>Standard SSD</td>\n      <td>\u00a32.00 per unit</td>\n      <td>\u00a34.00 per unit</td>\n      <td>\u00a36.00 per unit</td>\n    </tr>\n    <tr>\n      <td>Premium SSD</td>\n      <td>\u00a33.00 per unit</td>\n      <td>\u00a36.00 per unit</td>\n      <td>\u00a39.00 per unit</td>\n    </tr>\n    <tr>\n      <td>Ultra SSD</td>\n      <td>\u00a34.00 per unit</td>\n      <td>\u00a38.00 per unit</td>\n      <td>\u00a312.00 per unit</td>\n    </tr>\n  </tbody>\n</table>\n\n## Data Transfer Pricing: Outbound Data Transfers (Egress) from Azure Services\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>0 GB \u2013 40,877.5 GB</th>\n      <th>40,877.5 GB \u2013 54,871.3 GB</th>\n      <th>54,871.3 GB \u2013 84,276.3 GB</th>\n      <th>84,276.3 GB \u2013 100,000 GB</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK South (GBP)</td>\n      <td>\u00a30.004 per GB</td>\n      <td>\u00a30.003 per GB</td>\n      <td>\u00a30.002 per GB</td>\n      <td>\u00a30.001 per GB</td>\n    </tr>\n    <tr>\n      <td>UK West (GBP)</td>\n      <td>\u00a30.0044 per GB</td>\n      <td>\u00a30.0033 per GB</td>\n      <td>\u00a30.0022 per GB</td>\n      <td>\u00a30.0011 per GB</td>\n    </tr>\n    <tr>\n      <td>West Europe (GBP)</td>\n      <td>\u00a30.0048 per GB</td>\n      <td>\u00a30.0036 per GB</td>\n      <td>\u00a30.0024 per GB</td>\n      <td>\u00a30.0012 per GB</td>\n    </tr>\n    <tr>\n      <td>North Europe (GBP)</td>\n      <td>\u00a30.0052 per GB</td>\n      <td>\u00a30.0039 per GB</td>\n      <td>\u00a30.0026 per GB</td>\n      <td>\u00a30.0013 per GB</td>\n    </tr>\n    <tr>\n      <td>East US (GBP)</td>\n      <td>\u00a30.0056 per GB</td>\n      <td>\u00a30.0042 per GB</td>\n      <td>\u00a30.0028 per GB</td>\n      <td>\u00a30.0014 per GB</td>\n    </tr>\n    <tr>\n      <td>West US 2 (GBP)</td>\n      <td>\u00a30.006 per GB</td>\n      <td>\u00a30.0045 per GB</td>\n      <td>\u00a30.003 per GB</td>\n      <td>\u00a30.0015 per GB</td>\n    </tr>\n  </tbody>\n</table>\n\n## Data Ingress Charges - Inbound Data Transfer Fees\n\n**Data Ingress Charge**\n\nThis charge applies to data ingress into Azure services, measured in gigabytes (GB). The charge is calculated based on the total amount of data ingested during a billing period. The rate varies depending on the volume of data ingested, with four tiered rates applying to different ranges of data volumes.\n\nFor data ingress volumes between 0.0 GB and 18,385.6 GB, the charge is \u00a31 per GB. For volumes between 18,385.6 GB and 43,039.8 GB, the charge is \u00a32 per GB. Volumes between 43,039.8 GB and 65,195.4 GB incur a charge of \u00a33 per GB, while volumes between 65,195.4 GB and 100,000.0 GB incur a charge of \u00a34 per GB. The applicable rate will be multiplied by the total data ingress volume to determine the total charge in GBP.\n\n## Storage Transactions: Pricing and Charges for Data Operations\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Replication Type</th>\n      <th>Charge (GBP)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>GZRS</td>\n      <td>\u00a31</td>\n    </tr>\n    <tr>\n      <td>GRS</td>\n      <td>\u00a32</td>\n    </tr>\n    <tr>\n      <td>ZRS</td>\n      <td>\u00a33</td>\n    </tr>\n    <tr>\n      <td>LRS</td>\n      <td>\u00a34</td>\n    </tr>\n  </tbody>\n</table>\n\n## Public IP Addresses: Usage and Allocation Fees\n\nThis charge applies to resources deployed in specific geographic regions within Microsoft Azure. The charge is calculated based on the location of the resource, as determined by the 'geo_region' variable. The applicable regions and corresponding charges are as follows: East US (\u00a31), UK South (\u00a32), North Europe (\u00a33), West Europe (\u00a34), UK West (\u00a35), and West US 2 (\u00a36).\n\nThe purpose of this charge is to reflect the varying costs associated with providing services in different geographic locations. By applying a region-specific charge, customers are only billed for the resources they consume in each respective region. This charge is denominated in British Pounds (GBP) and will be calculated based on the 'geo_region' measurement.\n\n## Load Balancer Pricing\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Pricing Tier</th>\n      <th>Load Balancer Rules (190-199)</th>\n      <th>Load Balancer Rules (0-189)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Basic</td>\n      <td>\u00a31 per rule / hour</td>\n      <td>\u00a32 per rule / hour</td>\n    </tr>\n    <tr>\n      <td>Standard</td>\n      <td>\u00a32 per rule / hour</td>\n      <td>\u00a34 per rule / hour</td>\n    </tr>\n    <tr>\n      <td>Premium</td>\n      <td>\u00a33 per rule / hour</td>\n      <td>\u00a36 per rule / hour</td>\n    </tr>\n    <tr>\n      <td>Isolated</td>\n      <td>\u00a34 per rule / hour</td>\n      <td>\u00a38 per rule / hour</td>\n    </tr>\n  </tbody>\n</table>\n\n## Azure Kubernetes Service (AKS) Cluster Management Fees and Charges\n\nThis charge applies to Azure Kubernetes Service (AKS) nodes and is calculated based on the number of nodes used. The charge is tiered, with different multipliers applied depending on the number of nodes. For 635-999 nodes, the charge is 1 times the number of nodes. For 250-634 nodes, the charge is 2 times the number of nodes. For 218-249 nodes, the charge is 3 times the number of nodes. For 0-217 nodes, the charge is 4 times the number of nodes.\n\nThe charge is measured in nodes and billed in GBP. To calculate the exact charge, customers can multiply the number of AKS nodes used by the corresponding multiplier based on the tier. This charge helps customers scale their Kubernetes deployments while providing cost transparency and flexibility. By understanding the tiered pricing structure, customers can better plan and manage their AKS costs.\n\n## Function App Execution and Storage Pricing\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Charge</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>North Europe</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>UK South</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n\n## SQL Database Fees: Single Database and Elastic Pool Consumption Charges\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Pricing Tier</th>\n      <th>Charge</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Standard</td>\n      <td>\u00a31</td>\n    </tr>\n    <tr>\n      <td>Basic</td>\n      <td>\u00a32</td>\n    </tr>\n    <tr>\n      <td>Premium</td>\n      <td>\u00a33</td>\n    </tr>\n    <tr>\n      <td>Isolated</td>\n      <td>\u00a34</td>\n    </tr>\n  </tbody>\n</table>\n\n## Snapshot Storage Fee - Charges for Stored Snapshots of Managed Disks and Unmanaged Disks\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Charge (GBP)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>West Europe</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <td>UK South</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n\n## App Service Fees: Charges for Deployment, Scaling, and Runtime Operations\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Web App Instances</th>\n      <th>Charge Multiplier</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=\"2\">uk_south</td>\n      <td>0-169</td>\n      <td>1\u00d7</td>\n    </tr>\n    <tr>\n      <td>170-200</td>\n      <td>2\u00d7</td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">uk_west</td>\n      <td>0-169</td>\n      <td>2\u00d7</td>\n    </tr>\n    <tr>\n      <td>170-200</td>\n      <td>4\u00d7</td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">westeurope</td>\n      <td>0-169</td>\n      <td>3\u00d7</td>\n    </tr>\n    <tr>\n      <td>170-200</td>\n      <td>6\u00d7</td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">northeurope</td>\n      <td>0-169</td>\n      <td>4\u00d7</td>\n    </tr>\n    <tr>\n      <td>170-200</td>\n      <td>8\u00d7</td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">eastus</td>\n      <td>0-169</td>\n      <td>5\u00d7</td>\n    </tr>\n    <tr>\n      <td>170-200</td>\n      <td>10\u00d7</td>\n    </tr>\n    <tr>\n      <td rowspan=\"2\">westus2</td>\n      <td>0-169</td>\n      <td>6\u00d7</td>\n    </tr>\n    <tr>\n      <td>170-200</td>\n      <td>12\u00d7</td>\n    </tr>\n  </tbody>\n</table>\n\nMicrosoft Azure's cloud pricing policy provides transparent and competitive pricing for our suite of cloud services, ensuring customers in the United Kingdom can easily understand and manage their costs in GBP. This policy outlines the terms and conditions governing the pricing of our services, enabling customers to make informed decisions about their cloud investments. For any questions or concerns regarding this policy, please contact Microsoft Azure Support for assistance.\n\n**Policy Effective Date:** August 21, 2025\n\n", {"compute_vm_fee": {"description": "if billable_hours in [443.2, 744.0), charge is 1 \u00d7 billable_hours; if billable_hours in [0.0, 443.2), charge is 2 \u00d7 billable_hours The variable 'billable_hours' is measured in hours.", "code": "def compute_charge(usage_hours):\n    if 443.2 <= usage_hours < 744.0: return 1 * usage_hours\n    elif 0.0 <= usage_hours < 443.2: return 2 * usage_hours\n    else: raise ValueError(f'usage_hours is out of expected range')", "variables_used": {"usage_hours": {"unit": "hours", "description": "Total runtime in hours over the billing window", "dtype": "float"}}, "synonyms": ["vm runtime charge", "compute instance fee", "virtual machine cost"], "charge_description": "Charge for running virtual machines based on vCPU, memory, OS, and commitment."}, "gpu_compute_fee": {"description": "if runtime_hours in [0.0, 218.9), charge is 1 \u00d7 runtime_hours; if runtime_hours in [218.9, 601.7), charge is 2 \u00d7 runtime_hours; if runtime_hours in [601.7, 744.0), charge is 3 \u00d7 runtime_hours The variable 'runtime_hours' is measured in hours.", "code": "def compute_charge(usage_hours):\n    if 0.0 <= usage_hours < 218.9: return 1 * usage_hours\n    elif 218.9 <= usage_hours < 601.7: return 2 * usage_hours\n    elif 601.7 <= usage_hours < 744.0: return 3 * usage_hours\n    else: raise ValueError(f'usage_hours is out of expected range')", "variables_used": {"usage_hours": {"unit": "hours", "description": "Total runtime in hours over the billing window", "dtype": "float"}}, "synonyms": ["gpu instance fee", "accelerator charge", "gpu runtime cost"], "charge_description": "Charge for GPU-enabled compute usage."}, "managed_disk_fee": {"description": "managed_disk_fee conditions by disk_tier and disk_count:\n\nfor standard_hdd the following charges apply:\n  - if disk_count in [0, 25), charge is 1 \u00d7 disk_count\n  - if disk_count in [25, 50), charge is 2 \u00d7 disk_count\n  - if disk_count in [50, 64), charge is 3 \u00d7 disk_count\nfor standard_ssd the following charges apply:\n  - if disk_count in [0, 25), charge is 2 \u00d7 disk_count\n  - if disk_count in [25, 50), charge is 4 \u00d7 disk_count\n  - if disk_count in [50, 64), charge is 6 \u00d7 disk_count\nfor premium_ssd the following charges apply:\n  - if disk_count in [0, 25), charge is 3 \u00d7 disk_count\n  - if disk_count in [25, 50), charge is 6 \u00d7 disk_count\n  - if disk_count in [50, 64), charge is 9 \u00d7 disk_count\nfor ultra_ssd the following charges apply:\n  - if disk_count in [0, 25), charge is 4 \u00d7 disk_count\n  - if disk_count in [25, 50), charge is 8 \u00d7 disk_count\n  - if disk_count in [50, 64), charge is 12 \u00d7 disk_count", "code": "def compute_charge(disk_type, managed_disk_count):\n    if disk_type == 'standard_hdd' and 0 <= managed_disk_count < 25: return 1 * managed_disk_count * 1\n    elif disk_type == 'standard_hdd' and 25 <= managed_disk_count < 50: return 2 * managed_disk_count * 1\n    elif disk_type == 'standard_hdd' and 50 <= managed_disk_count < 64: return 3 * managed_disk_count * 1\n    elif disk_type == 'standard_ssd' and 0 <= managed_disk_count < 25: return 1 * managed_disk_count * 2\n    elif disk_type == 'standard_ssd' and 25 <= managed_disk_count < 50: return 2 * managed_disk_count * 2\n    elif disk_type == 'standard_ssd' and 50 <= managed_disk_count < 64: return 3 * managed_disk_count * 2\n    elif disk_type == 'premium_ssd' and 0 <= managed_disk_count < 25: return 1 * managed_disk_count * 3\n    elif disk_type == 'premium_ssd' and 25 <= managed_disk_count < 50: return 2 * managed_disk_count * 3\n    elif disk_type == 'premium_ssd' and 50 <= managed_disk_count < 64: return 3 * managed_disk_count * 3\n    elif disk_type == 'ultra_ssd' and 0 <= managed_disk_count < 25: return 1 * managed_disk_count * 4\n    elif disk_type == 'ultra_ssd' and 25 <= managed_disk_count < 50: return 2 * managed_disk_count * 4\n    elif disk_type == 'ultra_ssd' and 50 <= managed_disk_count < 64: return 3 * managed_disk_count * 4\n    else: raise ValueError(f'disk_type or managed_disk_count is out of expected range')", "variables_used": {"disk_type": {"unit": "disk type", "description": "Managed disk performance tier", "dtype": "str"}, "managed_disk_count": {"unit": "disks", "description": "Count of managed disks attached", "dtype": "int"}}, "synonyms": ["disk charge", "managed storage fee", "block storage cost"], "charge_description": "Charge for managed disks based on type, size, and count."}, "data_egress_fee": {"description": "data_egress_fee conditions by location and egress_gb:\n\nfor uk_south the following charges apply:\n  - if egress_gb in [84276.3, 100000.0), charge is 1.0 \u00d7 egress_gb\n  - if egress_gb in [54871.3, 84276.3), charge is 2.0 \u00d7 egress_gb\n  - if egress_gb in [40877.5, 54871.3), charge is 3.0 \u00d7 egress_gb\n  - if egress_gb in [0.0, 40877.5), charge is 4.0 \u00d7 egress_gb\nfor uk_west the following charges apply:\n  - if egress_gb in [84276.3, 100000.0), charge is 1.1 \u00d7 egress_gb\n  - if egress_gb in [54871.3, 84276.3), charge is 2.2 \u00d7 egress_gb\n  - if egress_gb in [40877.5, 54871.3), charge is 3.3 \u00d7 egress_gb\n  - if egress_gb in [0.0, 40877.5), charge is 4.4 \u00d7 egress_gb\nfor westeurope the following charges apply:\n  - if egress_gb in [84276.3, 100000.0), charge is 1.2 \u00d7 egress_gb\n  - if egress_gb in [54871.3, 84276.3), charge is 2.4 \u00d7 egress_gb\n  - if egress_gb in [40877.5, 54871.3), charge is 3.6 \u00d7 egress_gb\n  - if egress_gb in [0.0, 40877.5), charge is 4.8 \u00d7 egress_gb\nfor northeurope the following charges apply:\n  - if egress_gb in [84276.3, 100000.0), charge is 1.3 \u00d7 egress_gb\n  - if egress_gb in [54871.3, 84276.3), charge is 2.6 \u00d7 egress_gb\n  - if egress_gb in [40877.5, 54871.3), charge is 3.9 \u00d7 egress_gb\n  - if egress_gb in [0.0, 40877.5), charge is 5.2 \u00d7 egress_gb\nfor eastus the following charges apply:\n  - if egress_gb in [84276.3, 100000.0), charge is 1.4 \u00d7 egress_gb\n  - if egress_gb in [54871.3, 84276.3), charge is 2.8 \u00d7 egress_gb\n  - if egress_gb in [40877.5, 54871.3), charge is 4.2 \u00d7 egress_gb\n  - if egress_gb in [0.0, 40877.5), charge is 5.6 \u00d7 egress_gb\nfor westus2 the following charges apply:\n  - if egress_gb in [84276.3, 100000.0), charge is 1.5 \u00d7 egress_gb\n  - if egress_gb in [54871.3, 84276.3), charge is 3.0 \u00d7 egress_gb\n  - if egress_gb in [40877.5, 54871.3), charge is 4.5 \u00d7 egress_gb\n  - if egress_gb in [0.0, 40877.5), charge is 6.0 \u00d7 egress_gb", "code": "def compute_charge(region, data_egress_gb):\n    if region == 'uk_south' and 84276.3 <= data_egress_gb < 100000.0: return 1 * data_egress_gb * 1.0\n    elif region == 'uk_south' and 54871.3 <= data_egress_gb < 84276.3: return 2 * data_egress_gb * 1.0\n    elif region == 'uk_south' and 40877.5 <= data_egress_gb < 54871.3: return 3 * data_egress_gb * 1.0\n    elif region == 'uk_south' and 0.0 <= data_egress_gb < 40877.5: return 4 * data_egress_gb * 1.0\n    elif region == 'uk_west' and 84276.3 <= data_egress_gb < 100000.0: return 1 * data_egress_gb * 1.1\n    elif region == 'uk_west' and 54871.3 <= data_egress_gb < 84276.3: return 2 * data_egress_gb * 1.1\n    elif region == 'uk_west' and 40877.5 <= data_egress_gb < 54871.3: return 3 * data_egress_gb * 1.1\n    elif region == 'uk_west' and 0.0 <= data_egress_gb < 40877.5: return 4 * data_egress_gb * 1.1\n    elif region == 'westeurope' and 84276.3 <= data_egress_gb < 100000.0: return 1 * data_egress_gb * 1.2\n    elif region == 'westeurope' and 54871.3 <= data_egress_gb < 84276.3: return 2 * data_egress_gb * 1.2\n    elif region == 'westeurope' and 40877.5 <= data_egress_gb < 54871.3: return 3 * data_egress_gb * 1.2\n    elif region == 'westeurope' and 0.0 <= data_egress_gb < 40877.5: return 4 * data_egress_gb * 1.2\n    elif region == 'northeurope' and 84276.3 <= data_egress_gb < 100000.0: return 1 * data_egress_gb * 1.3\n    elif region == 'northeurope' and 54871.3 <= data_egress_gb < 84276.3: return 2 * data_egress_gb * 1.3\n    elif region == 'northeurope' and 40877.5 <= data_egress_gb < 54871.3: return 3 * data_egress_gb * 1.3\n    elif region == 'northeurope' and 0.0 <= data_egress_gb < 40877.5: return 4 * data_egress_gb * 1.3\n    elif region == 'eastus' and 84276.3 <= data_egress_gb < 100000.0: return 1 * data_egress_gb * 1.4\n    elif region == 'eastus' and 54871.3 <= data_egress_gb < 84276.3: return 2 * data_egress_gb * 1.4\n    elif region == 'eastus' and 40877.5 <= data_egress_gb < 54871.3: return 3 * data_egress_gb * 1.4\n    elif region == 'eastus' and 0.0 <= data_egress_gb < 40877.5: return 4 * data_egress_gb * 1.4\n    elif region == 'westus2' and 84276.3 <= data_egress_gb < 100000.0: return 1 * data_egress_gb * 1.5\n    elif region == 'westus2' and 54871.3 <= data_egress_gb < 84276.3: return 2 * data_egress_gb * 1.5\n    elif region == 'westus2' and 40877.5 <= data_egress_gb < 54871.3: return 3 * data_egress_gb * 1.5\n    elif region == 'westus2' and 0.0 <= data_egress_gb < 40877.5: return 4 * data_egress_gb * 1.5\n    else: raise ValueError(f'region or data_egress_gb is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "data_egress_gb": {"unit": "GB", "description": "Outbound data transferred from Azure", "dtype": "float"}}, "synonyms": ["egress charge", "outbound data fee", "data transfer out"], "charge_description": "Charge for data leaving Azure regions."}, "data_ingress_fee": {"description": "if ingress_gb in [0.0, 18385.6), charge is 1 \u00d7 ingress_gb; if ingress_gb in [18385.6, 43039.8), charge is 2 \u00d7 ingress_gb; if ingress_gb in [43039.8, 65195.4), charge is 3 \u00d7 ingress_gb; if ingress_gb in [65195.4, 100000.0), charge is 4 \u00d7 ingress_gb The variable 'ingress_gb' is measured in GB.", "code": "def compute_charge(data_ingress_gb):\n    if 0.0 <= data_ingress_gb < 18385.6: return 1 * data_ingress_gb\n    elif 18385.6 <= data_ingress_gb < 43039.8: return 2 * data_ingress_gb\n    elif 43039.8 <= data_ingress_gb < 65195.4: return 3 * data_ingress_gb\n    elif 65195.4 <= data_ingress_gb < 100000.0: return 4 * data_ingress_gb\n    else: raise ValueError(f'data_ingress_gb is out of expected range')", "variables_used": {"data_ingress_gb": {"unit": "GB", "description": "Inbound data transferred to Azure", "dtype": "float"}}, "synonyms": ["ingress charge", "inbound data fee", "data transfer in"], "charge_description": "Charge for data entering Azure regions where applicable."}, "storage_transaction_fee": {"description": "if replication is 'GZRS', charge is 1; if replication is 'GRS', charge is 2; if replication is 'ZRS', charge is 3; if replication is 'LRS', charge is 4 The variable 'replication' is measured in replication.", "code": "def compute_charge(redundancy):\n    if redundancy == 'GZRS': return 1\n    elif redundancy == 'GRS': return 2\n    elif redundancy == 'ZRS': return 3\n    elif redundancy == 'LRS': return 4\n    else: raise ValueError(f'Unknown value for redundancy: {redundancy}')", "variables_used": {"redundancy": {"unit": "redundancy", "description": "Storage redundancy configuration", "dtype": "str"}}, "synonyms": ["storage ops fee", "transaction charge", "storage request cost"], "charge_description": "Charge for storage account transactions and redundancy level."}, "public_ip_fee": {"description": "if geo_region is 'eastus', charge is 1; if geo_region is 'uk_south', charge is 2; if geo_region is 'northeurope', charge is 3; if geo_region is 'westeurope', charge is 4; if geo_region is 'uk_west', charge is 5; if geo_region is 'westus2', charge is 6 The variable 'geo_region' is measured in geo_region.", "code": "def compute_charge(region):\n    if region == 'eastus': return 1\n    elif region == 'uk_south': return 2\n    elif region == 'northeurope': return 3\n    elif region == 'westeurope': return 4\n    elif region == 'uk_west': return 5\n    elif region == 'westus2': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["ip address charge", "public ip cost", "elastic ip fee"], "charge_description": "Charge for public IP addresses allocated."}, "load_balancer_fee": {"description": "load_balancer_fee conditions by pricing_tier and lb_rules:\n\nfor basic the following charges apply:\n  - if lb_rules in [190, 200), charge is 1 \u00d7 lb_rules\n  - if lb_rules in [0, 190), charge is 2 \u00d7 lb_rules\nfor standard the following charges apply:\n  - if lb_rules in [190, 200), charge is 2 \u00d7 lb_rules\n  - if lb_rules in [0, 190), charge is 4 \u00d7 lb_rules\nfor premium the following charges apply:\n  - if lb_rules in [190, 200), charge is 3 \u00d7 lb_rules\n  - if lb_rules in [0, 190), charge is 6 \u00d7 lb_rules\nfor isolated the following charges apply:\n  - if lb_rules in [190, 200), charge is 4 \u00d7 lb_rules\n  - if lb_rules in [0, 190), charge is 8 \u00d7 lb_rules", "code": "def compute_charge(service_tier, load_balancer_rules):\n    if service_tier == 'basic' and 190 <= load_balancer_rules < 200: return 1 * load_balancer_rules * 1\n    elif service_tier == 'basic' and 0 <= load_balancer_rules < 190: return 2 * load_balancer_rules * 1\n    elif service_tier == 'standard' and 190 <= load_balancer_rules < 200: return 1 * load_balancer_rules * 2\n    elif service_tier == 'standard' and 0 <= load_balancer_rules < 190: return 2 * load_balancer_rules * 2\n    elif service_tier == 'premium' and 190 <= load_balancer_rules < 200: return 1 * load_balancer_rules * 3\n    elif service_tier == 'premium' and 0 <= load_balancer_rules < 190: return 2 * load_balancer_rules * 3\n    elif service_tier == 'isolated' and 190 <= load_balancer_rules < 200: return 1 * load_balancer_rules * 4\n    elif service_tier == 'isolated' and 0 <= load_balancer_rules < 190: return 2 * load_balancer_rules * 4\n    else: raise ValueError(f'service_tier or load_balancer_rules is out of expected range')", "variables_used": {"service_tier": {"unit": "tier", "description": "Service tier for managed services", "dtype": "str"}, "load_balancer_rules": {"unit": "rules", "description": "Configured load balancer rules", "dtype": "int"}}, "synonyms": ["lb fee", "balancer charge", "traffic distribution cost"], "charge_description": "Charge for load balancer rules and tier."}, "aks_cluster_fee": {"description": "if aks_nodes in [635, 1000), charge is 1 \u00d7 aks_nodes; if aks_nodes in [250, 635), charge is 2 \u00d7 aks_nodes; if aks_nodes in [218, 250), charge is 3 \u00d7 aks_nodes; if aks_nodes in [0, 218), charge is 4 \u00d7 aks_nodes The variable 'aks_nodes' is measured in nodes.", "code": "def compute_charge(kubernetes_node_count):\n    if 635 <= kubernetes_node_count < 1000: return 1 * kubernetes_node_count\n    elif 250 <= kubernetes_node_count < 635: return 2 * kubernetes_node_count\n    elif 218 <= kubernetes_node_count < 250: return 3 * kubernetes_node_count\n    elif 0 <= kubernetes_node_count < 218: return 4 * kubernetes_node_count\n    else: raise ValueError(f'kubernetes_node_count is out of expected range')", "variables_used": {"kubernetes_node_count": {"unit": "nodes", "description": "Number of AKS nodes in the cluster", "dtype": "int"}}, "synonyms": ["kubernetes fee", "aks charge", "container cluster cost"], "charge_description": "Charge for AKS clusters based on node count and type."}, "function_app_fee": {"description": "if location is 'northeurope', charge is 1; if location is 'uk_south', charge is 2; if location is 'westeurope', charge is 3; if location is 'uk_west', charge is 4; if location is 'eastus', charge is 5; if location is 'westus2', charge is 6 The variable 'location' is measured in location.", "code": "def compute_charge(region):\n    if region == 'northeurope': return 1\n    elif region == 'uk_south': return 2\n    elif region == 'westeurope': return 3\n    elif region == 'uk_west': return 4\n    elif region == 'eastus': return 5\n    elif region == 'westus2': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["faas charge", "functions cost", "serverless fee"], "charge_description": "Charge for serverless executions and execution time."}, "sql_database_fee": {"description": "if pricing_tier is 'standard', charge is 1; if pricing_tier is 'basic', charge is 2; if pricing_tier is 'premium', charge is 3; if pricing_tier is 'isolated', charge is 4 The variable 'pricing_tier' is measured in tier.", "code": "def compute_charge(service_tier):\n    if service_tier == 'standard': return 1\n    elif service_tier == 'basic': return 2\n    elif service_tier == 'premium': return 3\n    elif service_tier == 'isolated': return 4\n    else: raise ValueError(f'Unknown value for service_tier: {service_tier}')", "variables_used": {"service_tier": {"unit": "tier", "description": "Service tier for managed services", "dtype": "str"}}, "synonyms": ["sql charge", "database fee", "sql managed instance cost"], "charge_description": "Charge for Azure SQL based on vCores, storage, and retention."}, "snapshot_storage_fee": {"description": "if location is 'westeurope', charge is 1; if location is 'northeurope', charge is 2; if location is 'uk_west', charge is 3; if location is 'eastus', charge is 4; if location is 'westus2', charge is 5; if location is 'uk_south', charge is 6 The variable 'location' is measured in location.", "code": "def compute_charge(region):\n    if region == 'westeurope': return 1\n    elif region == 'northeurope': return 2\n    elif region == 'uk_west': return 3\n    elif region == 'eastus': return 4\n    elif region == 'westus2': return 5\n    elif region == 'uk_south': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["snapshot fee", "backup snapshot cost", "image snapshot charge"], "charge_description": "Charge for snapshot storage volume and redundancy."}, "app_service_fee": {"description": "app_service_fee conditions by location and webapp_instances:\n\nfor uk_south the following charges apply:\n  - if webapp_instances in [0, 170), charge is 1 \u00d7 webapp_instances\n  - if webapp_instances in [170, 200), charge is 2 \u00d7 webapp_instances\nfor uk_west the following charges apply:\n  - if webapp_instances in [0, 170), charge is 2 \u00d7 webapp_instances\n  - if webapp_instances in [170, 200), charge is 4 \u00d7 webapp_instances\nfor westeurope the following charges apply:\n  - if webapp_instances in [0, 170), charge is 3 \u00d7 webapp_instances\n  - if webapp_instances in [170, 200), charge is 6 \u00d7 webapp_instances\nfor northeurope the following charges apply:\n  - if webapp_instances in [0, 170), charge is 4 \u00d7 webapp_instances\n  - if webapp_instances in [170, 200), charge is 8 \u00d7 webapp_instances\nfor eastus the following charges apply:\n  - if webapp_instances in [0, 170), charge is 5 \u00d7 webapp_instances\n  - if webapp_instances in [170, 200), charge is 10 \u00d7 webapp_instances\nfor westus2 the following charges apply:\n  - if webapp_instances in [0, 170), charge is 6 \u00d7 webapp_instances\n  - if webapp_instances in [170, 200), charge is 12 \u00d7 webapp_instances", "code": "def compute_charge(region, app_service_instances):\n    if region == 'uk_south' and 0 <= app_service_instances < 170: return 1 * app_service_instances * 1\n    elif region == 'uk_south' and 170 <= app_service_instances < 200: return 2 * app_service_instances * 1\n    elif region == 'uk_west' and 0 <= app_service_instances < 170: return 1 * app_service_instances * 2\n    elif region == 'uk_west' and 170 <= app_service_instances < 200: return 2 * app_service_instances * 2\n    elif region == 'westeurope' and 0 <= app_service_instances < 170: return 1 * app_service_instances * 3\n    elif region == 'westeurope' and 170 <= app_service_instances < 200: return 2 * app_service_instances * 3\n    elif region == 'northeurope' and 0 <= app_service_instances < 170: return 1 * app_service_instances * 4\n    elif region == 'northeurope' and 170 <= app_service_instances < 200: return 2 * app_service_instances * 4\n    elif region == 'eastus' and 0 <= app_service_instances < 170: return 1 * app_service_instances * 5\n    elif region == 'eastus' and 170 <= app_service_instances < 200: return 2 * app_service_instances * 5\n    elif region == 'westus2' and 0 <= app_service_instances < 170: return 1 * app_service_instances * 6\n    elif region == 'westus2' and 170 <= app_service_instances < 200: return 2 * app_service_instances * 6\n    else: raise ValueError(f'region or app_service_instances is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "app_service_instances": {"unit": "instances", "description": "Count of App Service instances", "dtype": "int"}}, "synonyms": ["app service charge", "web app fee", "app hosting cost"], "charge_description": "Charge for App Service instances and tier."}}]
["# Microsoft Azure Cloud Pricing Policy Document\n\nMicrosoft Azure is pleased to provide this official cloud pricing policy document, outlining the fee structure and pricing policies for our comprehensive suite of cloud services. This document serves as a definitive guide to understanding the costs associated with utilizing Microsoft Azure's cloud offerings in GBP (British Pounds). By providing transparent and up-to-date pricing information, we aim to support informed decision-making and effective resource planning for our valued customers.\n\n## Virtual Machine Usage Fees by Instance Type and Region\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Virtual Cores</th>\n      <th>Linux (\u00a3 per core-hour)</th>\n      <th>Windows (\u00a3 per core-hour)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1-34</td>\n      <td>\u00a31 per core</td>\n      <td>\u00a32 per core</td>\n    </tr>\n    <tr>\n      <td>35-67</td>\n      <td>\u00a32 per core</td>\n      <td>\u00a34 per core</td>\n    </tr>\n    <tr>\n      <td>68-128</td>\n      <td>\u00a33 per core</td>\n      <td>\u00a36 per core</td>\n    </tr>\n  </tbody>\n</table>\n\n## GPU Accelerated Virtual Machine Usage and Pricing\n\n**Operating System Charge**\n\nThis charge applies to virtual machine usage and varies based on the operating system deployed. For Windows operating systems, a flat rate of 1 GBP is applied. In contrast, Linux operating systems incur a charge of 2 GBP.\n\nThe Operating System Charge is calculated based on the type of operating system used, as measured in operating system units (os). This charge is applied in addition to other applicable usage charges, such as compute and storage costs. By multiplying the number of os units by the corresponding charge rate (1 GBP for Windows or 2 GBP for Linux), customers can determine their total Operating System Charge.\n\n## Managed Disk Pricing and Charges\n\nThis charge applies to disk storage usage in Microsoft Azure, with costs varying based on the selected storage type. The charge is incurred per unit of disk type, with the following rates applicable: Premium SSD storage is charged at 1 unit, Ultra SSD storage at 2 units, Standard HDD storage at 3 units, and Standard SSD storage at 4 units.\n\nThe charge is calculated based on the total amount of disk storage used, measured by the'storage_type' variable. The total charge is determined by multiplying the number of units of each storage type used by the corresponding rate, and then summing these values. All charges are billed in British Pounds (GBP).\n\n## Data Transfer Pricing - Outbound Data Transfers (Data Egress)\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>0 GB - 13,242.6 GB</th>\n      <th>13,242.7 GB - 13,323.7 GB</th>\n      <th>13,323.8 GB - 76,757.1 GB</th>\n      <th>76,757.2 GB - 100,000.0 GB</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK South (GBP)</td>\n      <td>\u00a34.0 \u00d7 egress_GB</td>\n      <td>\u00a33.0 \u00d7 egress_GB</td>\n      <td>\u00a32.0 \u00d7 egress_GB</td>\n      <td>\u00a31.0 \u00d7 egress_GB</td>\n    </tr>\n    <tr>\n      <td>UK West (GBP)</td>\n      <td>\u00a34.4 \u00d7 egress_GB</td>\n      <td>\u00a33.3 \u00d7 egress_GB</td>\n      <td>\u00a32.2 \u00d7 egress_GB</td>\n      <td>\u00a31.1 \u00d7 egress_GB</td>\n    </tr>\n    <tr>\n      <td>West Europe (GBP)</td>\n      <td>\u00a34.8 \u00d7 egress_GB</td>\n      <td>\u00a33.6 \u00d7 egress_GB</td>\n      <td>\u00a32.4 \u00d7 egress_GB</td>\n      <td>\u00a31.2 \u00d7 egress_GB</td>\n    </tr>\n    <tr>\n      <td>North Europe (GBP)</td>\n      <td>\u00a35.2 \u00d7 egress_GB</td>\n      <td>\u00a33.9 \u00d7 egress_GB</td>\n      <td>\u00a32.6 \u00d7 egress_GB</td>\n      <td>\u00a31.3 \u00d7 egress_GB</td>\n    </tr>\n    <tr>\n      <td>East US (GBP)</td>\n      <td>\u00a35.6 \u00d7 egress_GB</td>\n      <td>\u00a34.2 \u00d7 egress_GB</td>\n      <td>\u00a32.8 \u00d7 egress_GB</td>\n      <td>\u00a31.4 \u00d7 egress_GB</td>\n    </tr>\n    <tr>\n      <td>West US 2 (GBP)</td>\n      <td>\u00a36.0 \u00d7 egress_GB</td>\n      <td>\u00a34.5 \u00d7 egress_GB</td>\n      <td>\u00a33.0 \u00d7 egress_GB</td>\n      <td>\u00a31.5 \u00d7 egress_GB</td>\n    </tr>\n  </tbody>\n</table>\n\n## Data Ingress Fees for Incoming Data Transfers into Azure Services\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Tier 1 (0 \u2013 59,548.3 GB)</th>\n      <th>Tier 2 (59,548.3 \u2013 75,501.5 GB)</th>\n      <th>Tier 3 (75,501.5 \u2013 86,933.3 GB)</th>\n      <th>Tier 4 (86,933.3 \u2013 100,000 GB)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK South</td>\n      <td>1.0 \u00d7 data transfer in GB</td>\n      <td>2.0 \u00d7 data transfer in GB</td>\n      <td>3.0 \u00d7 data transfer in GB</td>\n      <td>4.0 \u00d7 data transfer in GB</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>1.1 \u00d7 data transfer in GB</td>\n      <td>2.2 \u00d7 data transfer in GB</td>\n      <td>3.3 \u00d7 data transfer in GB</td>\n      <td>4.4 \u00d7 data transfer in GB</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>1.2 \u00d7 data transfer in GB</td>\n      <td>2.4 \u00d7 data transfer in GB</td>\n      <td>3.6 \u00d7 data transfer in GB</td>\n      <td>4.8 \u00d7 data transfer in GB</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>1.3 \u00d7 data transfer in GB</td>\n      <td>2.6 \u00d7 data transfer in GB</td>\n      <td>3.9 \u00d7 data transfer in GB</td>\n      <td>5.2 \u00d7 data transfer in GB</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>1.4 \u00d7 data transfer in GB</td>\n      <td>2.8 \u00d7 data transfer in GB</td>\n      <td>4.2 \u00d7 data transfer in GB</td>\n      <td>5.6 \u00d7 data transfer in GB</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>1.5 \u00d7 data transfer in GB</td>\n      <td>3.0 \u00d7 data transfer in GB</td>\n      <td>4.5 \u00d7 data transfer in GB</td>\n      <td>6.0 \u00d7 data transfer in GB</td>\n    </tr>\n  </tbody>\n</table>\n\n## Storage Transaction Fees\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Storage Ops (Million Tx)</th>\n      <th>Charge Multiplier</th>\n      <th>Charge (\u00a3GBP per Million Tx)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>> 485.0</td>\n      <td>1\u00d7</td>\n      <td>\u00a31.00 per Million Tx</td>\n    </tr>\n    <tr>\n      <td>> 477.2 - 485.0</td>\n      <td>2\u00d7</td>\n      <td>\u00a32.00 per Million Tx</td>\n    </tr>\n    <tr>\n      <td>> 230.1 - 477.2</td>\n      <td>3\u00d7</td>\n      <td>\u00a33.00 per Million Tx</td>\n    </tr>\n    <tr>\n      <td>> 0.0 - 230.1</td>\n      <td>4\u00d7</td>\n      <td>\u00a34.00 per Million Tx</td>\n    </tr>\n  </tbody>\n</table>\n\n## Public IP Addresses Pricing\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>IP Count Range</th>\n      <th>Charge Multiplier</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK South</td>\n      <td>0-45</td>\n      <td>2 \u00d7 IP Count (\u00a30.0004 per hour)</td>\n    </tr>\n    <tr>\n      <td>UK South</td>\n      <td>46-100</td>\n      <td>1 \u00d7 IP Count (\u00a30.0002 per hour)</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>0-45</td>\n      <td>4 \u00d7 IP Count (\u00a30.0008 per hour)</td>\n    </tr>\n    <tr>\n      <td>UK West</td>\n      <td>46-100</td>\n      <td>2 \u00d7 IP Count (\u00a30.0004 per hour)</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>0-45</td>\n      <td>6 \u00d7 IP Count (\u00a30.0012 per hour)</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>46-100</td>\n      <td>3 \u00d7 IP Count (\u00a30.0006 per hour)</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>0-45</td>\n      <td>8 \u00d7 IP Count (\u00a30.0016 per hour)</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>46-100</td>\n      <td>4 \u00d7 IP Count (\u00a30.0008 per hour)</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>0-45</td>\n      <td>10 \u00d7 IP Count (\u00a30.002 per hour)</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>46-100</td>\n      <td>5 \u00d7 IP Count (\u00a30.001 per hour)</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>0-45</td>\n      <td>12 \u00d7 IP Count (\u00a30.0024 per hour)</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>46-100</td>\n      <td>6 \u00d7 IP Count (\u00a30.0012 per hour)</td>\n    </tr>\n  </tbody>\n</table>\n\n## Load Balancer Pricing: Data Transfer and Hourly Instance Fees\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Pricing Tier</th>\n      <th>Load Balancer Rules</th>\n      <th>Basic (\u00a3GBP/hour)</th>\n      <th>Standard (\u00a3GBP/hour)</th>\n      <th>Premium (\u00a3GBP/hour)</th>\n      <th>Isolated (\u00a3GBP/hour)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>0-11 rules</td>\n      <td>1 rule</td>\n      <td>\u00a30.01 x rules</td>\n      <td>\u00a30.02 x rules</td>\n      <td>\u00a30.03 x rules</td>\n      <td>\u00a30.04 x rules</td>\n    </tr>\n    <tr>\n      <td>12-72 rules</td>\n      <td>2 rules</td>\n      <td>\u00a30.02 x rules</td>\n      <td>\u00a30.04 x rules</td>\n      <td>\u00a30.06 x rules</td>\n      <td>\u00a30.08 x rules</td>\n    </tr>\n    <tr>\n      <td>73-146 rules</td>\n      <td>3 rules</td>\n      <td>\u00a30.03 x rules</td>\n      <td>\u00a30.06 x rules</td>\n      <td>\u00a30.09 x rules</td>\n      <td>\u00a30.12 x rules</td>\n    </tr>\n    <tr>\n      <td>147-200 rules</td>\n      <td>4 rules</td>\n      <td>\u00a30.04 x rules</td>\n      <td>\u00a30.08 x rules</td>\n      <td>\u00a30.12 x rules</td>\n      <td>\u00a30.16 x rules</td>\n    </tr>\n  </tbody>\n</table>\n\n## \"AKS Cluster Usage Fees: Control Plane and Node Costs\"\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Location</th>\n      <th>Charge</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>UK West</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>North Europe</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>East US</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <td>UK South</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <td>West Europe</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <td>West US 2</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n\n## Function App Pricing: Consumption Plan and Premium Plan Charges\n\nThis charge category applies to execution time measured in milliseconds (ms). The charge is calculated based on the duration of execution time, with tiered rates applied to different ranges of execution time. For execution times between 583,023.8 ms and 600,000.0 ms, the charge is calculated as 1 times the execution time in milliseconds.\n\nFor execution times between 17,435.4 ms and 583,023.8 ms, the charge is calculated as 2 times the execution time in milliseconds. Execution times between 0.1 ms and 17,435.4 ms incur a charge of 3 times the execution time in milliseconds. All charges are billed in British Pounds (GBP) and are calculated based on the actual execution time incurred.\n\n## \"SQL Database Fees: Compute, Storage, and I/O Operations Pricing\"\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>SKU Tier</th>\n      <th>SQL Cores Range</th>\n      <th>Basic</th>\n      <th>Standard</th>\n      <th>Premium</th>\n      <th>Isolated</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td></td>\n      <td>1 \u2013 30</td>\n      <td>\u00a31 per core</td>\n      <td>\u00a32 per core</td>\n      <td>\u00a33 per core</td>\n      <td>\u00a34 per core</td>\n    </tr>\n    <tr>\n      <td></td>\n      <td>31 \u2013 128</td>\n      <td>\u00a32 per core</td>\n      <td>\u00a34 per core</td>\n      <td>\u00a36 per core</td>\n      <td>\u00a38 per core</td>\n    </tr>\n  </tbody>\n</table>\n\n## Snapshot Storage Fee Policy\n\n<table border=\"1\" cellspacing=\"0\" cellpadding=\"6\">\n  <thead>\n    <tr>\n      <th>Geo Region</th>\n      <th>Snapshot Size Range (GB)</th>\n      <th>Charge Multiplier (GBP per GB)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td rowspan=\"3\">uk_south</td>\n      <td>0 \u2013 53,340</td>\n      <td>1.00</td>\n    </tr>\n    <tr>\n      <td>53,341 \u2013 59,116</td>\n      <td>2.00</td>\n    </tr>\n    <tr>\n      <td>59,117 \u2013 100,000</td>\n      <td>3.00</td>\n    </tr>\n    <tr>\n      <td rowspan=\"3\">uk_west</td>\n      <td>0 \u2013 53,340</td>\n      <td>1.10</td>\n    </tr>\n    <tr>\n      <td>53,341 \u2013 59,116</td>\n      <td>2.20</td>\n    </tr>\n    <tr>\n      <td>59,117 \u2013 100,000</td>\n      <td>3.30</td>\n    </tr>\n    <tr>\n      <td rowspan=\"3\">westeurope</td>\n      <td>0 \u2013 53,340</td>\n      <td>1.20</td>\n    </tr>\n    <tr>\n      <td>53,341 \u2013 59,116</td>\n      <td>2.40</td>\n    </tr>\n    <tr>\n      <td>59,117 \u2013 100,000</td>\n      <td>3.60</td>\n    </tr>\n    <tr>\n      <td rowspan=\"3\">northeurope</td>\n      <td>0 \u2013 53,340</td>\n      <td>1.30</td>\n    </tr>\n    <tr>\n      <td>53,341 \u2013 59,116</td>\n      <td>2.60</td>\n    </tr>\n    <tr>\n      <td>59,117 \u2013 100,000</td>\n      <td>3.90</td>\n    </tr>\n    <tr>\n      <td rowspan=\"3\">eastus</td>\n      <td>0 \u2013 53,340</td>\n      <td>1.40</td>\n    </tr>\n    <tr>\n      <td>53,341 \u2013 59,116</td>\n      <td>2.80</td>\n    </tr>\n    <tr>\n      <td>59,117 \u2013 100,000</td>\n      <td>4.20</td>\n    </tr>\n    <tr>\n      <td rowspan=\"3\">westus2</td>\n      <td>0 \u2013 53,340</td>\n      <td>1.50</td>\n    </tr>\n    <tr>\n      <td>53,341 \u2013 59,116</td>\n      <td>3.00</td>\n    </tr>\n    <tr>\n      <td>59,117 \u2013 100,000</td>\n      <td>4.50</td>\n    </tr>\n  </tbody>\n</table>\n\n## \"App Service Fees: Pricing for Web Apps, Mobile Apps, and API Apps\"\n\nThis charge applies to data transfer services in specific geographic regions. The rate varies based on the location of the data transfer, as measured by the 'geo_region' variable. \n\nThe applicable charges are as follows: 1 GBP when the data transfer occurs in the 'uk_west' region, 2 GBP in the 'westeurope' region, 3 GBP in the 'uk_south' region, 4 GBP in the 'westus2' region, 5 GBP in the 'eastus' region, and 6 GBP in the 'northeurope' region.\n\nThis document outlines the current pricing policy for Microsoft Azure cloud services in GBP, providing transparency into the cost structure of our offerings. Customers are encouraged to review this policy carefully to ensure understanding of the charges associated with their Azure usage. For any questions or concerns regarding Azure pricing, please contact Microsoft Support through the Azure portal or visit our support website for further assistance.\n\n**Policy Effective Date:** August 21, 2025\n\n", {"compute_vm_fee": {"description": "compute_vm_fee conditions by operating_system and virtual_cores:\n\nfor linux the following charges apply:\n  - if virtual_cores in [1, 35), charge is 1 \u00d7 virtual_cores\n  - if virtual_cores in [35, 68), charge is 2 \u00d7 virtual_cores\n  - if virtual_cores in [68, 128), charge is 3 \u00d7 virtual_cores\nfor windows the following charges apply:\n  - if virtual_cores in [1, 35), charge is 2 \u00d7 virtual_cores\n  - if virtual_cores in [35, 68), charge is 4 \u00d7 virtual_cores\n  - if virtual_cores in [68, 128), charge is 6 \u00d7 virtual_cores", "code": "def compute_charge(os_type, vcpu_count):\n    if os_type == 'linux' and 1 <= vcpu_count < 35: return 1 * vcpu_count * 1\n    elif os_type == 'linux' and 35 <= vcpu_count < 68: return 2 * vcpu_count * 1\n    elif os_type == 'linux' and 68 <= vcpu_count < 128: return 3 * vcpu_count * 1\n    elif os_type == 'windows' and 1 <= vcpu_count < 35: return 1 * vcpu_count * 2\n    elif os_type == 'windows' and 35 <= vcpu_count < 68: return 2 * vcpu_count * 2\n    elif os_type == 'windows' and 68 <= vcpu_count < 128: return 3 * vcpu_count * 2\n    else: raise ValueError(f'os_type or vcpu_count is out of expected range')", "variables_used": {"os_type": {"unit": "os", "description": "Operating system for the compute workload", "dtype": "str"}, "vcpu_count": {"unit": "vCPUs", "description": "Number of virtual CPUs allocated", "dtype": "int"}}, "synonyms": ["vm runtime charge", "compute instance fee", "virtual machine cost"], "charge_description": "Charge for running virtual machines based on vCPU, memory, OS, and commitment."}, "gpu_compute_fee": {"description": "if operating_system is 'windows', charge is 1; if operating_system is 'linux', charge is 2 The variable 'operating_system' is measured in os.", "code": "def compute_charge(os_type):\n    if os_type == 'windows': return 1\n    elif os_type == 'linux': return 2\n    else: raise ValueError(f'Unknown value for os_type: {os_type}')", "variables_used": {"os_type": {"unit": "os", "description": "Operating system for the compute workload", "dtype": "str"}}, "synonyms": ["gpu instance fee", "accelerator charge", "gpu runtime cost"], "charge_description": "Charge for GPU-enabled compute usage."}, "managed_disk_fee": {"description": "if storage_type is 'premium_ssd', charge is 1; if storage_type is 'ultra_ssd', charge is 2; if storage_type is 'standard_hdd', charge is 3; if storage_type is 'standard_ssd', charge is 4 The variable 'storage_type' is measured in disk type.", "code": "def compute_charge(disk_type):\n    if disk_type == 'premium_ssd': return 1\n    elif disk_type == 'ultra_ssd': return 2\n    elif disk_type == 'standard_hdd': return 3\n    elif disk_type == 'standard_ssd': return 4\n    else: raise ValueError(f'Unknown value for disk_type: {disk_type}')", "variables_used": {"disk_type": {"unit": "disk type", "description": "Managed disk performance tier", "dtype": "str"}}, "synonyms": ["disk charge", "managed storage fee", "block storage cost"], "charge_description": "Charge for managed disks based on type, size, and count."}, "data_egress_fee": {"description": "data_egress_fee conditions by location and egress_gb:\n\nfor uk_south the following charges apply:\n  - if egress_gb in [76757.1, 100000.0), charge is 1.0 \u00d7 egress_gb\n  - if egress_gb in [13323.7, 76757.1), charge is 2.0 \u00d7 egress_gb\n  - if egress_gb in [13242.6, 13323.7), charge is 3.0 \u00d7 egress_gb\n  - if egress_gb in [0.0, 13242.6), charge is 4.0 \u00d7 egress_gb\nfor uk_west the following charges apply:\n  - if egress_gb in [76757.1, 100000.0), charge is 1.1 \u00d7 egress_gb\n  - if egress_gb in [13323.7, 76757.1), charge is 2.2 \u00d7 egress_gb\n  - if egress_gb in [13242.6, 13323.7), charge is 3.3 \u00d7 egress_gb\n  - if egress_gb in [0.0, 13242.6), charge is 4.4 \u00d7 egress_gb\nfor westeurope the following charges apply:\n  - if egress_gb in [76757.1, 100000.0), charge is 1.2 \u00d7 egress_gb\n  - if egress_gb in [13323.7, 76757.1), charge is 2.4 \u00d7 egress_gb\n  - if egress_gb in [13242.6, 13323.7), charge is 3.6 \u00d7 egress_gb\n  - if egress_gb in [0.0, 13242.6), charge is 4.8 \u00d7 egress_gb\nfor northeurope the following charges apply:\n  - if egress_gb in [76757.1, 100000.0), charge is 1.3 \u00d7 egress_gb\n  - if egress_gb in [13323.7, 76757.1), charge is 2.6 \u00d7 egress_gb\n  - if egress_gb in [13242.6, 13323.7), charge is 3.9 \u00d7 egress_gb\n  - if egress_gb in [0.0, 13242.6), charge is 5.2 \u00d7 egress_gb\nfor eastus the following charges apply:\n  - if egress_gb in [76757.1, 100000.0), charge is 1.4 \u00d7 egress_gb\n  - if egress_gb in [13323.7, 76757.1), charge is 2.8 \u00d7 egress_gb\n  - if egress_gb in [13242.6, 13323.7), charge is 4.2 \u00d7 egress_gb\n  - if egress_gb in [0.0, 13242.6), charge is 5.6 \u00d7 egress_gb\nfor westus2 the following charges apply:\n  - if egress_gb in [76757.1, 100000.0), charge is 1.5 \u00d7 egress_gb\n  - if egress_gb in [13323.7, 76757.1), charge is 3.0 \u00d7 egress_gb\n  - if egress_gb in [13242.6, 13323.7), charge is 4.5 \u00d7 egress_gb\n  - if egress_gb in [0.0, 13242.6), charge is 6.0 \u00d7 egress_gb", "code": "def compute_charge(region, data_egress_gb):\n    if region == 'uk_south' and 76757.1 <= data_egress_gb < 100000.0: return 1 * data_egress_gb * 1.0\n    elif region == 'uk_south' and 13323.7 <= data_egress_gb < 76757.1: return 2 * data_egress_gb * 1.0\n    elif region == 'uk_south' and 13242.6 <= data_egress_gb < 13323.7: return 3 * data_egress_gb * 1.0\n    elif region == 'uk_south' and 0.0 <= data_egress_gb < 13242.6: return 4 * data_egress_gb * 1.0\n    elif region == 'uk_west' and 76757.1 <= data_egress_gb < 100000.0: return 1 * data_egress_gb * 1.1\n    elif region == 'uk_west' and 13323.7 <= data_egress_gb < 76757.1: return 2 * data_egress_gb * 1.1\n    elif region == 'uk_west' and 13242.6 <= data_egress_gb < 13323.7: return 3 * data_egress_gb * 1.1\n    elif region == 'uk_west' and 0.0 <= data_egress_gb < 13242.6: return 4 * data_egress_gb * 1.1\n    elif region == 'westeurope' and 76757.1 <= data_egress_gb < 100000.0: return 1 * data_egress_gb * 1.2\n    elif region == 'westeurope' and 13323.7 <= data_egress_gb < 76757.1: return 2 * data_egress_gb * 1.2\n    elif region == 'westeurope' and 13242.6 <= data_egress_gb < 13323.7: return 3 * data_egress_gb * 1.2\n    elif region == 'westeurope' and 0.0 <= data_egress_gb < 13242.6: return 4 * data_egress_gb * 1.2\n    elif region == 'northeurope' and 76757.1 <= data_egress_gb < 100000.0: return 1 * data_egress_gb * 1.3\n    elif region == 'northeurope' and 13323.7 <= data_egress_gb < 76757.1: return 2 * data_egress_gb * 1.3\n    elif region == 'northeurope' and 13242.6 <= data_egress_gb < 13323.7: return 3 * data_egress_gb * 1.3\n    elif region == 'northeurope' and 0.0 <= data_egress_gb < 13242.6: return 4 * data_egress_gb * 1.3\n    elif region == 'eastus' and 76757.1 <= data_egress_gb < 100000.0: return 1 * data_egress_gb * 1.4\n    elif region == 'eastus' and 13323.7 <= data_egress_gb < 76757.1: return 2 * data_egress_gb * 1.4\n    elif region == 'eastus' and 13242.6 <= data_egress_gb < 13323.7: return 3 * data_egress_gb * 1.4\n    elif region == 'eastus' and 0.0 <= data_egress_gb < 13242.6: return 4 * data_egress_gb * 1.4\n    elif region == 'westus2' and 76757.1 <= data_egress_gb < 100000.0: return 1 * data_egress_gb * 1.5\n    elif region == 'westus2' and 13323.7 <= data_egress_gb < 76757.1: return 2 * data_egress_gb * 1.5\n    elif region == 'westus2' and 13242.6 <= data_egress_gb < 13323.7: return 3 * data_egress_gb * 1.5\n    elif region == 'westus2' and 0.0 <= data_egress_gb < 13242.6: return 4 * data_egress_gb * 1.5\n    else: raise ValueError(f'region or data_egress_gb is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "data_egress_gb": {"unit": "GB", "description": "Outbound data transferred from Azure", "dtype": "float"}}, "synonyms": ["egress charge", "outbound data fee", "data transfer out"], "charge_description": "Charge for data leaving Azure regions."}, "data_ingress_fee": {"description": "data_ingress_fee conditions by location and data_transfer_in_gb:\n\nfor uk_south the following charges apply:\n  - if data_transfer_in_gb in [0.0, 59548.3), charge is 1.0 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [59548.3, 75501.5), charge is 2.0 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [75501.5, 86933.3), charge is 3.0 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [86933.3, 100000.0), charge is 4.0 \u00d7 data_transfer_in_gb\nfor uk_west the following charges apply:\n  - if data_transfer_in_gb in [0.0, 59548.3), charge is 1.1 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [59548.3, 75501.5), charge is 2.2 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [75501.5, 86933.3), charge is 3.3 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [86933.3, 100000.0), charge is 4.4 \u00d7 data_transfer_in_gb\nfor westeurope the following charges apply:\n  - if data_transfer_in_gb in [0.0, 59548.3), charge is 1.2 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [59548.3, 75501.5), charge is 2.4 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [75501.5, 86933.3), charge is 3.6 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [86933.3, 100000.0), charge is 4.8 \u00d7 data_transfer_in_gb\nfor northeurope the following charges apply:\n  - if data_transfer_in_gb in [0.0, 59548.3), charge is 1.3 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [59548.3, 75501.5), charge is 2.6 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [75501.5, 86933.3), charge is 3.9 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [86933.3, 100000.0), charge is 5.2 \u00d7 data_transfer_in_gb\nfor eastus the following charges apply:\n  - if data_transfer_in_gb in [0.0, 59548.3), charge is 1.4 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [59548.3, 75501.5), charge is 2.8 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [75501.5, 86933.3), charge is 4.2 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [86933.3, 100000.0), charge is 5.6 \u00d7 data_transfer_in_gb\nfor westus2 the following charges apply:\n  - if data_transfer_in_gb in [0.0, 59548.3), charge is 1.5 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [59548.3, 75501.5), charge is 3.0 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [75501.5, 86933.3), charge is 4.5 \u00d7 data_transfer_in_gb\n  - if data_transfer_in_gb in [86933.3, 100000.0), charge is 6.0 \u00d7 data_transfer_in_gb", "code": "def compute_charge(region, data_ingress_gb):\n    if region == 'uk_south' and 0.0 <= data_ingress_gb < 59548.3: return 1 * data_ingress_gb * 1.0\n    elif region == 'uk_south' and 59548.3 <= data_ingress_gb < 75501.5: return 2 * data_ingress_gb * 1.0\n    elif region == 'uk_south' and 75501.5 <= data_ingress_gb < 86933.3: return 3 * data_ingress_gb * 1.0\n    elif region == 'uk_south' and 86933.3 <= data_ingress_gb < 100000.0: return 4 * data_ingress_gb * 1.0\n    elif region == 'uk_west' and 0.0 <= data_ingress_gb < 59548.3: return 1 * data_ingress_gb * 1.1\n    elif region == 'uk_west' and 59548.3 <= data_ingress_gb < 75501.5: return 2 * data_ingress_gb * 1.1\n    elif region == 'uk_west' and 75501.5 <= data_ingress_gb < 86933.3: return 3 * data_ingress_gb * 1.1\n    elif region == 'uk_west' and 86933.3 <= data_ingress_gb < 100000.0: return 4 * data_ingress_gb * 1.1\n    elif region == 'westeurope' and 0.0 <= data_ingress_gb < 59548.3: return 1 * data_ingress_gb * 1.2\n    elif region == 'westeurope' and 59548.3 <= data_ingress_gb < 75501.5: return 2 * data_ingress_gb * 1.2\n    elif region == 'westeurope' and 75501.5 <= data_ingress_gb < 86933.3: return 3 * data_ingress_gb * 1.2\n    elif region == 'westeurope' and 86933.3 <= data_ingress_gb < 100000.0: return 4 * data_ingress_gb * 1.2\n    elif region == 'northeurope' and 0.0 <= data_ingress_gb < 59548.3: return 1 * data_ingress_gb * 1.3\n    elif region == 'northeurope' and 59548.3 <= data_ingress_gb < 75501.5: return 2 * data_ingress_gb * 1.3\n    elif region == 'northeurope' and 75501.5 <= data_ingress_gb < 86933.3: return 3 * data_ingress_gb * 1.3\n    elif region == 'northeurope' and 86933.3 <= data_ingress_gb < 100000.0: return 4 * data_ingress_gb * 1.3\n    elif region == 'eastus' and 0.0 <= data_ingress_gb < 59548.3: return 1 * data_ingress_gb * 1.4\n    elif region == 'eastus' and 59548.3 <= data_ingress_gb < 75501.5: return 2 * data_ingress_gb * 1.4\n    elif region == 'eastus' and 75501.5 <= data_ingress_gb < 86933.3: return 3 * data_ingress_gb * 1.4\n    elif region == 'eastus' and 86933.3 <= data_ingress_gb < 100000.0: return 4 * data_ingress_gb * 1.4\n    elif region == 'westus2' and 0.0 <= data_ingress_gb < 59548.3: return 1 * data_ingress_gb * 1.5\n    elif region == 'westus2' and 59548.3 <= data_ingress_gb < 75501.5: return 2 * data_ingress_gb * 1.5\n    elif region == 'westus2' and 75501.5 <= data_ingress_gb < 86933.3: return 3 * data_ingress_gb * 1.5\n    elif region == 'westus2' and 86933.3 <= data_ingress_gb < 100000.0: return 4 * data_ingress_gb * 1.5\n    else: raise ValueError(f'region or data_ingress_gb is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "data_ingress_gb": {"unit": "GB", "description": "Inbound data transferred to Azure", "dtype": "float"}}, "synonyms": ["ingress charge", "inbound data fee", "data transfer in"], "charge_description": "Charge for data entering Azure regions where applicable."}, "storage_transaction_fee": {"description": "if storage_ops_million in [485.0, 500.0), charge is 1 \u00d7 storage_ops_million; if storage_ops_million in [477.2, 485.0), charge is 2 \u00d7 storage_ops_million; if storage_ops_million in [230.1, 477.2), charge is 3 \u00d7 storage_ops_million; if storage_ops_million in [0.0, 230.1), charge is 4 \u00d7 storage_ops_million The variable 'storage_ops_million' is measured in million tx.", "code": "def compute_charge(storage_transactions_millions):\n    if 485.0 <= storage_transactions_millions < 500.0: return 1 * storage_transactions_millions\n    elif 477.2 <= storage_transactions_millions < 485.0: return 2 * storage_transactions_millions\n    elif 230.1 <= storage_transactions_millions < 477.2: return 3 * storage_transactions_millions\n    elif 0.0 <= storage_transactions_millions < 230.1: return 4 * storage_transactions_millions\n    else: raise ValueError(f'storage_transactions_millions is out of expected range')", "variables_used": {"storage_transactions_millions": {"unit": "million tx", "description": "Number of storage account operations in millions", "dtype": "float"}}, "synonyms": ["storage ops fee", "transaction charge", "storage request cost"], "charge_description": "Charge for storage account transactions and redundancy level."}, "public_ip_fee": {"description": "public_ip_fee conditions by location and ip_count:\n\nfor uk_south the following charges apply:\n  - if ip_count in [46, 100), charge is 1 \u00d7 ip_count\n  - if ip_count in [0, 46), charge is 2 \u00d7 ip_count\nfor uk_west the following charges apply:\n  - if ip_count in [46, 100), charge is 2 \u00d7 ip_count\n  - if ip_count in [0, 46), charge is 4 \u00d7 ip_count\nfor westeurope the following charges apply:\n  - if ip_count in [46, 100), charge is 3 \u00d7 ip_count\n  - if ip_count in [0, 46), charge is 6 \u00d7 ip_count\nfor northeurope the following charges apply:\n  - if ip_count in [46, 100), charge is 4 \u00d7 ip_count\n  - if ip_count in [0, 46), charge is 8 \u00d7 ip_count\nfor eastus the following charges apply:\n  - if ip_count in [46, 100), charge is 5 \u00d7 ip_count\n  - if ip_count in [0, 46), charge is 10 \u00d7 ip_count\nfor westus2 the following charges apply:\n  - if ip_count in [46, 100), charge is 6 \u00d7 ip_count\n  - if ip_count in [0, 46), charge is 12 \u00d7 ip_count", "code": "def compute_charge(region, public_ip_count):\n    if region == 'uk_south' and 46 <= public_ip_count < 100: return 1 * public_ip_count * 1\n    elif region == 'uk_south' and 0 <= public_ip_count < 46: return 2 * public_ip_count * 1\n    elif region == 'uk_west' and 46 <= public_ip_count < 100: return 1 * public_ip_count * 2\n    elif region == 'uk_west' and 0 <= public_ip_count < 46: return 2 * public_ip_count * 2\n    elif region == 'westeurope' and 46 <= public_ip_count < 100: return 1 * public_ip_count * 3\n    elif region == 'westeurope' and 0 <= public_ip_count < 46: return 2 * public_ip_count * 3\n    elif region == 'northeurope' and 46 <= public_ip_count < 100: return 1 * public_ip_count * 4\n    elif region == 'northeurope' and 0 <= public_ip_count < 46: return 2 * public_ip_count * 4\n    elif region == 'eastus' and 46 <= public_ip_count < 100: return 1 * public_ip_count * 5\n    elif region == 'eastus' and 0 <= public_ip_count < 46: return 2 * public_ip_count * 5\n    elif region == 'westus2' and 46 <= public_ip_count < 100: return 1 * public_ip_count * 6\n    elif region == 'westus2' and 0 <= public_ip_count < 46: return 2 * public_ip_count * 6\n    else: raise ValueError(f'region or public_ip_count is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "public_ip_count": {"unit": "IPs", "description": "Number of public IP addresses allocated", "dtype": "int"}}, "synonyms": ["ip address charge", "public ip cost", "elastic ip fee"], "charge_description": "Charge for public IP addresses allocated."}, "load_balancer_fee": {"description": "load_balancer_fee conditions by pricing_tier and balancer_rules:\n\nfor basic the following charges apply:\n  - if balancer_rules in [0, 12), charge is 1 \u00d7 balancer_rules\n  - if balancer_rules in [12, 73), charge is 2 \u00d7 balancer_rules\n  - if balancer_rules in [73, 147), charge is 3 \u00d7 balancer_rules\n  - if balancer_rules in [147, 200), charge is 4 \u00d7 balancer_rules\nfor standard the following charges apply:\n  - if balancer_rules in [0, 12), charge is 2 \u00d7 balancer_rules\n  - if balancer_rules in [12, 73), charge is 4 \u00d7 balancer_rules\n  - if balancer_rules in [73, 147), charge is 6 \u00d7 balancer_rules\n  - if balancer_rules in [147, 200), charge is 8 \u00d7 balancer_rules\nfor premium the following charges apply:\n  - if balancer_rules in [0, 12), charge is 3 \u00d7 balancer_rules\n  - if balancer_rules in [12, 73), charge is 6 \u00d7 balancer_rules\n  - if balancer_rules in [73, 147), charge is 9 \u00d7 balancer_rules\n  - if balancer_rules in [147, 200), charge is 12 \u00d7 balancer_rules\nfor isolated the following charges apply:\n  - if balancer_rules in [0, 12), charge is 4 \u00d7 balancer_rules\n  - if balancer_rules in [12, 73), charge is 8 \u00d7 balancer_rules\n  - if balancer_rules in [73, 147), charge is 12 \u00d7 balancer_rules\n  - if balancer_rules in [147, 200), charge is 16 \u00d7 balancer_rules", "code": "def compute_charge(service_tier, load_balancer_rules):\n    if service_tier == 'basic' and 0 <= load_balancer_rules < 12: return 1 * load_balancer_rules * 1\n    elif service_tier == 'basic' and 12 <= load_balancer_rules < 73: return 2 * load_balancer_rules * 1\n    elif service_tier == 'basic' and 73 <= load_balancer_rules < 147: return 3 * load_balancer_rules * 1\n    elif service_tier == 'basic' and 147 <= load_balancer_rules < 200: return 4 * load_balancer_rules * 1\n    elif service_tier == 'standard' and 0 <= load_balancer_rules < 12: return 1 * load_balancer_rules * 2\n    elif service_tier == 'standard' and 12 <= load_balancer_rules < 73: return 2 * load_balancer_rules * 2\n    elif service_tier == 'standard' and 73 <= load_balancer_rules < 147: return 3 * load_balancer_rules * 2\n    elif service_tier == 'standard' and 147 <= load_balancer_rules < 200: return 4 * load_balancer_rules * 2\n    elif service_tier == 'premium' and 0 <= load_balancer_rules < 12: return 1 * load_balancer_rules * 3\n    elif service_tier == 'premium' and 12 <= load_balancer_rules < 73: return 2 * load_balancer_rules * 3\n    elif service_tier == 'premium' and 73 <= load_balancer_rules < 147: return 3 * load_balancer_rules * 3\n    elif service_tier == 'premium' and 147 <= load_balancer_rules < 200: return 4 * load_balancer_rules * 3\n    elif service_tier == 'isolated' and 0 <= load_balancer_rules < 12: return 1 * load_balancer_rules * 4\n    elif service_tier == 'isolated' and 12 <= load_balancer_rules < 73: return 2 * load_balancer_rules * 4\n    elif service_tier == 'isolated' and 73 <= load_balancer_rules < 147: return 3 * load_balancer_rules * 4\n    elif service_tier == 'isolated' and 147 <= load_balancer_rules < 200: return 4 * load_balancer_rules * 4\n    else: raise ValueError(f'service_tier or load_balancer_rules is out of expected range')", "variables_used": {"service_tier": {"unit": "tier", "description": "Service tier for managed services", "dtype": "str"}, "load_balancer_rules": {"unit": "rules", "description": "Configured load balancer rules", "dtype": "int"}}, "synonyms": ["lb fee", "balancer charge", "traffic distribution cost"], "charge_description": "Charge for load balancer rules and tier."}, "aks_cluster_fee": {"description": "if location is 'uk_west', charge is 1; if location is 'northeurope', charge is 2; if location is 'eastus', charge is 3; if location is 'uk_south', charge is 4; if location is 'westeurope', charge is 5; if location is 'westus2', charge is 6 The variable 'location' is measured in location.", "code": "def compute_charge(region):\n    if region == 'uk_west': return 1\n    elif region == 'northeurope': return 2\n    elif region == 'eastus': return 3\n    elif region == 'uk_south': return 4\n    elif region == 'westeurope': return 5\n    elif region == 'westus2': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["kubernetes fee", "aks charge", "container cluster cost"], "charge_description": "Charge for AKS clusters based on node count and type."}, "function_app_fee": {"description": "if exec_time_ms in [583023.8, 600000.0), charge is 1 \u00d7 exec_time_ms; if exec_time_ms in [17435.4, 583023.8), charge is 2 \u00d7 exec_time_ms; if exec_time_ms in [0.1, 17435.4), charge is 3 \u00d7 exec_time_ms The variable 'exec_time_ms' is measured in ms.", "code": "def compute_charge(function_exec_ms):\n    if 583023.8 <= function_exec_ms < 600000.0: return 1 * function_exec_ms\n    elif 17435.4 <= function_exec_ms < 583023.8: return 2 * function_exec_ms\n    elif 0.1 <= function_exec_ms < 17435.4: return 3 * function_exec_ms\n    else: raise ValueError(f'function_exec_ms is out of expected range')", "variables_used": {"function_exec_ms": {"unit": "ms", "description": "Average or billed execution time per invocation", "dtype": "float"}}, "synonyms": ["faas charge", "functions cost", "serverless fee"], "charge_description": "Charge for serverless executions and execution time."}, "sql_database_fee": {"description": "sql_database_fee conditions by sku_tier and sql_cores:\n\nfor basic the following charges apply:\n  - if sql_cores in [0, 30), charge is 1 \u00d7 sql_cores\n  - if sql_cores in [30, 128), charge is 2 \u00d7 sql_cores\nfor standard the following charges apply:\n  - if sql_cores in [0, 30), charge is 2 \u00d7 sql_cores\n  - if sql_cores in [30, 128), charge is 4 \u00d7 sql_cores\nfor premium the following charges apply:\n  - if sql_cores in [0, 30), charge is 3 \u00d7 sql_cores\n  - if sql_cores in [30, 128), charge is 6 \u00d7 sql_cores\nfor isolated the following charges apply:\n  - if sql_cores in [0, 30), charge is 4 \u00d7 sql_cores\n  - if sql_cores in [30, 128), charge is 8 \u00d7 sql_cores", "code": "def compute_charge(service_tier, sql_vcores):\n    if service_tier == 'basic' and 0 <= sql_vcores < 30: return 1 * sql_vcores * 1\n    elif service_tier == 'basic' and 30 <= sql_vcores < 128: return 2 * sql_vcores * 1\n    elif service_tier == 'standard' and 0 <= sql_vcores < 30: return 1 * sql_vcores * 2\n    elif service_tier == 'standard' and 30 <= sql_vcores < 128: return 2 * sql_vcores * 2\n    elif service_tier == 'premium' and 0 <= sql_vcores < 30: return 1 * sql_vcores * 3\n    elif service_tier == 'premium' and 30 <= sql_vcores < 128: return 2 * sql_vcores * 3\n    elif service_tier == 'isolated' and 0 <= sql_vcores < 30: return 1 * sql_vcores * 4\n    elif service_tier == 'isolated' and 30 <= sql_vcores < 128: return 2 * sql_vcores * 4\n    else: raise ValueError(f'service_tier or sql_vcores is out of expected range')", "variables_used": {"service_tier": {"unit": "tier", "description": "Service tier for managed services", "dtype": "str"}, "sql_vcores": {"unit": "vCores", "description": "vCore count for Azure SQL", "dtype": "int"}}, "synonyms": ["sql charge", "database fee", "sql managed instance cost"], "charge_description": "Charge for Azure SQL based on vCores, storage, and retention."}, "snapshot_storage_fee": {"description": "snapshot_storage_fee conditions by geo_region and snapshot_size_gb:\n\nfor uk_south the following charges apply:\n  - if snapshot_size_gb in [0.0, 53340.5), charge is 1.0 \u00d7 snapshot_size_gb\n  - if snapshot_size_gb in [53340.5, 59116.5), charge is 2.0 \u00d7 snapshot_size_gb\n  - if snapshot_size_gb in [59116.5, 100000.0), charge is 3.0 \u00d7 snapshot_size_gb\nfor uk_west the following charges apply:\n  - if snapshot_size_gb in [0.0, 53340.5), charge is 1.1 \u00d7 snapshot_size_gb\n  - if snapshot_size_gb in [53340.5, 59116.5), charge is 2.2 \u00d7 snapshot_size_gb\n  - if snapshot_size_gb in [59116.5, 100000.0), charge is 3.3 \u00d7 snapshot_size_gb\nfor westeurope the following charges apply:\n  - if snapshot_size_gb in [0.0, 53340.5), charge is 1.2 \u00d7 snapshot_size_gb\n  - if snapshot_size_gb in [53340.5, 59116.5), charge is 2.4 \u00d7 snapshot_size_gb\n  - if snapshot_size_gb in [59116.5, 100000.0), charge is 3.6 \u00d7 snapshot_size_gb\nfor northeurope the following charges apply:\n  - if snapshot_size_gb in [0.0, 53340.5), charge is 1.3 \u00d7 snapshot_size_gb\n  - if snapshot_size_gb in [53340.5, 59116.5), charge is 2.6 \u00d7 snapshot_size_gb\n  - if snapshot_size_gb in [59116.5, 100000.0), charge is 3.9 \u00d7 snapshot_size_gb\nfor eastus the following charges apply:\n  - if snapshot_size_gb in [0.0, 53340.5), charge is 1.4 \u00d7 snapshot_size_gb\n  - if snapshot_size_gb in [53340.5, 59116.5), charge is 2.8 \u00d7 snapshot_size_gb\n  - if snapshot_size_gb in [59116.5, 100000.0), charge is 4.2 \u00d7 snapshot_size_gb\nfor westus2 the following charges apply:\n  - if snapshot_size_gb in [0.0, 53340.5), charge is 1.5 \u00d7 snapshot_size_gb\n  - if snapshot_size_gb in [53340.5, 59116.5), charge is 3.0 \u00d7 snapshot_size_gb\n  - if snapshot_size_gb in [59116.5, 100000.0), charge is 4.5 \u00d7 snapshot_size_gb", "code": "def compute_charge(region, snapshot_gb):\n    if region == 'uk_south' and 0.0 <= snapshot_gb < 53340.5: return 1 * snapshot_gb * 1.0\n    elif region == 'uk_south' and 53340.5 <= snapshot_gb < 59116.5: return 2 * snapshot_gb * 1.0\n    elif region == 'uk_south' and 59116.5 <= snapshot_gb < 100000.0: return 3 * snapshot_gb * 1.0\n    elif region == 'uk_west' and 0.0 <= snapshot_gb < 53340.5: return 1 * snapshot_gb * 1.1\n    elif region == 'uk_west' and 53340.5 <= snapshot_gb < 59116.5: return 2 * snapshot_gb * 1.1\n    elif region == 'uk_west' and 59116.5 <= snapshot_gb < 100000.0: return 3 * snapshot_gb * 1.1\n    elif region == 'westeurope' and 0.0 <= snapshot_gb < 53340.5: return 1 * snapshot_gb * 1.2\n    elif region == 'westeurope' and 53340.5 <= snapshot_gb < 59116.5: return 2 * snapshot_gb * 1.2\n    elif region == 'westeurope' and 59116.5 <= snapshot_gb < 100000.0: return 3 * snapshot_gb * 1.2\n    elif region == 'northeurope' and 0.0 <= snapshot_gb < 53340.5: return 1 * snapshot_gb * 1.3\n    elif region == 'northeurope' and 53340.5 <= snapshot_gb < 59116.5: return 2 * snapshot_gb * 1.3\n    elif region == 'northeurope' and 59116.5 <= snapshot_gb < 100000.0: return 3 * snapshot_gb * 1.3\n    elif region == 'eastus' and 0.0 <= snapshot_gb < 53340.5: return 1 * snapshot_gb * 1.4\n    elif region == 'eastus' and 53340.5 <= snapshot_gb < 59116.5: return 2 * snapshot_gb * 1.4\n    elif region == 'eastus' and 59116.5 <= snapshot_gb < 100000.0: return 3 * snapshot_gb * 1.4\n    elif region == 'westus2' and 0.0 <= snapshot_gb < 53340.5: return 1 * snapshot_gb * 1.5\n    elif region == 'westus2' and 53340.5 <= snapshot_gb < 59116.5: return 2 * snapshot_gb * 1.5\n    elif region == 'westus2' and 59116.5 <= snapshot_gb < 100000.0: return 3 * snapshot_gb * 1.5\n    else: raise ValueError(f'region or snapshot_gb is out of expected range')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}, "snapshot_gb": {"unit": "GB", "description": "Total snapshot storage size", "dtype": "float"}}, "synonyms": ["snapshot fee", "backup snapshot cost", "image snapshot charge"], "charge_description": "Charge for snapshot storage volume and redundancy."}, "app_service_fee": {"description": "if geo_region is 'uk_west', charge is 1; if geo_region is 'westeurope', charge is 2; if geo_region is 'uk_south', charge is 3; if geo_region is 'westus2', charge is 4; if geo_region is 'eastus', charge is 5; if geo_region is 'northeurope', charge is 6 The variable 'geo_region' is measured in geo_region.", "code": "def compute_charge(region):\n    if region == 'uk_west': return 1\n    elif region == 'westeurope': return 2\n    elif region == 'uk_south': return 3\n    elif region == 'westus2': return 4\n    elif region == 'eastus': return 5\n    elif region == 'northeurope': return 6\n    else: raise ValueError(f'Unknown value for region: {region}')", "variables_used": {"region": {"unit": "region", "description": "Azure region where resources are deployed", "dtype": "str"}}, "synonyms": ["app service charge", "web app fee", "app hosting cost"], "charge_description": "Charge for App Service instances and tier."}}]
