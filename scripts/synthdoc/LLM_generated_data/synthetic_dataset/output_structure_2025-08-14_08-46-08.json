{
  "security_fee": {
    "description": "if luggage weight in [27.4, 50.0), charge is 0 \u00d7 luggage weight; if luggage weight in [5.0, 27.4), charge is 1 \u00d7 luggage weight The variable 'luggage weight' is measured in kg.",
    "code": "def compute_charge(baggage_weight):\n    if 27.4 <= baggage_weight < 50.0: return 0 * baggage_weight\n    elif 5.0 <= baggage_weight < 27.4: return 1 * baggage_weight\n    else: raise ValueError(f'baggage_weight is out of expected range')",
    "variables_used": [
      "baggage_weight"
    ],
    "synonyms": [
      "security charge",
      "safety fee"
    ],
    "charge_description": "A fee charged for security measures at the airport."
  },
  "landing_fee": {
    "description": "landing_fee conditions by plane type and aircraft mass:\n\nfor passenger the following charges apply:\n  - if aircraft mass in [5000.0, 350285.8), charge is 0.0 \u00d7 aircraft mass\n  - if aircraft mass in [350285.8, 353072.0), charge is 1.0 \u00d7 aircraft mass\n  - if aircraft mass in [353072.0, 385755.4), charge is 2.0 \u00d7 aircraft mass\n  - if aircraft mass in [385755.4, 400000.0), charge is 3.0 \u00d7 aircraft mass\nfor cargo the following charges apply:\n  - if aircraft mass in [5000.0, 350285.8), charge is 0.0 \u00d7 aircraft mass\n  - if aircraft mass in [350285.8, 353072.0), charge is 1.1 \u00d7 aircraft mass\n  - if aircraft mass in [353072.0, 385755.4), charge is 2.2 \u00d7 aircraft mass\n  - if aircraft mass in [385755.4, 400000.0), charge is 3.3 \u00d7 aircraft mass\nfor private the following charges apply:\n  - if aircraft mass in [5000.0, 350285.8), charge is 0.0 \u00d7 aircraft mass\n  - if aircraft mass in [350285.8, 353072.0), charge is 1.2 \u00d7 aircraft mass\n  - if aircraft mass in [353072.0, 385755.4), charge is 2.4 \u00d7 aircraft mass\n  - if aircraft mass in [385755.4, 400000.0), charge is 3.6 \u00d7 aircraft mass\nfor military the following charges apply:\n  - if aircraft mass in [5000.0, 350285.8), charge is 0.0 \u00d7 aircraft mass\n  - if aircraft mass in [350285.8, 353072.0), charge is 1.3 \u00d7 aircraft mass\n  - if aircraft mass in [353072.0, 385755.4), charge is 2.6 \u00d7 aircraft mass\n  - if aircraft mass in [385755.4, 400000.0), charge is 3.9 \u00d7 aircraft mass",
    "code": "def compute_charge(aircraft_type, aircraft_weight):\n    if aircraft_type == 'passenger' and 5000.0 <= aircraft_weight < 350285.8: return 0 * aircraft_weight * 1.0\n    elif aircraft_type == 'passenger' and 350285.8 <= aircraft_weight < 353072.0: return 1 * aircraft_weight * 1.0\n    elif aircraft_type == 'passenger' and 353072.0 <= aircraft_weight < 385755.4: return 2 * aircraft_weight * 1.0\n    elif aircraft_type == 'passenger' and 385755.4 <= aircraft_weight < 400000.0: return 3 * aircraft_weight * 1.0\n    elif aircraft_type == 'cargo' and 5000.0 <= aircraft_weight < 350285.8: return 0 * aircraft_weight * 1.1\n    elif aircraft_type == 'cargo' and 350285.8 <= aircraft_weight < 353072.0: return 1 * aircraft_weight * 1.1\n    elif aircraft_type == 'cargo' and 353072.0 <= aircraft_weight < 385755.4: return 2 * aircraft_weight * 1.1\n    elif aircraft_type == 'cargo' and 385755.4 <= aircraft_weight < 400000.0: return 3 * aircraft_weight * 1.1\n    elif aircraft_type == 'private' and 5000.0 <= aircraft_weight < 350285.8: return 0 * aircraft_weight * 1.2\n    elif aircraft_type == 'private' and 350285.8 <= aircraft_weight < 353072.0: return 1 * aircraft_weight * 1.2\n    elif aircraft_type == 'private' and 353072.0 <= aircraft_weight < 385755.4: return 2 * aircraft_weight * 1.2\n    elif aircraft_type == 'private' and 385755.4 <= aircraft_weight < 400000.0: return 3 * aircraft_weight * 1.2\n    elif aircraft_type == 'military' and 5000.0 <= aircraft_weight < 350285.8: return 0 * aircraft_weight * 1.3\n    elif aircraft_type == 'military' and 350285.8 <= aircraft_weight < 353072.0: return 1 * aircraft_weight * 1.3\n    elif aircraft_type == 'military' and 353072.0 <= aircraft_weight < 385755.4: return 2 * aircraft_weight * 1.3\n    elif aircraft_type == 'military' and 385755.4 <= aircraft_weight < 400000.0: return 3 * aircraft_weight * 1.3\n    else: raise ValueError(f'aircraft_type or aircraft_weight is out of expected range')",
    "variables_used": [
      "aircraft_type",
      "aircraft_weight"
    ],
    "synonyms": [
      "landing charge",
      "arrival fee"
    ],
    "charge_description": "A fee charged for landing the aircraft at the airport."
  },
  "fuel_tax": {
    "description": "fuel_tax conditions by flight class and fuel burn:\n\nfor domestic the following charges apply:\n  - if fuel burn in [500.0, 1130.6), charge is 0.0 \u00d7 fuel burn\n  - if fuel burn in [1130.6, 2237.2), charge is 1.0 \u00d7 fuel burn\n  - if fuel burn in [2237.2, 5000.0), charge is 2.0 \u00d7 fuel burn\nfor international the following charges apply:\n  - if fuel burn in [500.0, 1130.6), charge is 0.0 \u00d7 fuel burn\n  - if fuel burn in [1130.6, 2237.2), charge is 1.1 \u00d7 fuel burn\n  - if fuel burn in [2237.2, 5000.0), charge is 2.2 \u00d7 fuel burn\nfor charter the following charges apply:\n  - if fuel burn in [500.0, 1130.6), charge is 0.0 \u00d7 fuel burn\n  - if fuel burn in [1130.6, 2237.2), charge is 1.2 \u00d7 fuel burn\n  - if fuel burn in [2237.2, 5000.0), charge is 2.4 \u00d7 fuel burn",
    "code": "def compute_charge(flight_type, fuel_consumption):\n    if flight_type == 'domestic' and 500.0 <= fuel_consumption < 1130.6: return 0 * fuel_consumption * 1.0\n    elif flight_type == 'domestic' and 1130.6 <= fuel_consumption < 2237.2: return 1 * fuel_consumption * 1.0\n    elif flight_type == 'domestic' and 2237.2 <= fuel_consumption < 5000.0: return 2 * fuel_consumption * 1.0\n    elif flight_type == 'international' and 500.0 <= fuel_consumption < 1130.6: return 0 * fuel_consumption * 1.1\n    elif flight_type == 'international' and 1130.6 <= fuel_consumption < 2237.2: return 1 * fuel_consumption * 1.1\n    elif flight_type == 'international' and 2237.2 <= fuel_consumption < 5000.0: return 2 * fuel_consumption * 1.1\n    elif flight_type == 'charter' and 500.0 <= fuel_consumption < 1130.6: return 0 * fuel_consumption * 1.2\n    elif flight_type == 'charter' and 1130.6 <= fuel_consumption < 2237.2: return 1 * fuel_consumption * 1.2\n    elif flight_type == 'charter' and 2237.2 <= fuel_consumption < 5000.0: return 2 * fuel_consumption * 1.2\n    else: raise ValueError(f'flight_type or fuel_consumption is out of expected range')",
    "variables_used": [
      "flight_type",
      "fuel_consumption"
    ],
    "synonyms": [
      "fuel charge",
      "fuel levy"
    ],
    "charge_description": "A tax applied to the fuel consumed by the aircraft."
  },
  "baggage_fee": {
    "description": "baggage_fee conditions by aircraft category and baggage mass:\n\nfor passenger the following charges apply:\n  - if baggage mass in [44.8, 50.0), charge is 0.0 \u00d7 baggage mass\n  - if baggage mass in [42.3, 44.8), charge is 1.0 \u00d7 baggage mass\n  - if baggage mass in [24.5, 42.3), charge is 2.0 \u00d7 baggage mass\n  - if baggage mass in [5.0, 24.5), charge is 3.0 \u00d7 baggage mass\nfor cargo the following charges apply:\n  - if baggage mass in [44.8, 50.0), charge is 0.0 \u00d7 baggage mass\n  - if baggage mass in [42.3, 44.8), charge is 1.1 \u00d7 baggage mass\n  - if baggage mass in [24.5, 42.3), charge is 2.2 \u00d7 baggage mass\n  - if baggage mass in [5.0, 24.5), charge is 3.3 \u00d7 baggage mass\nfor private the following charges apply:\n  - if baggage mass in [44.8, 50.0), charge is 0.0 \u00d7 baggage mass\n  - if baggage mass in [42.3, 44.8), charge is 1.2 \u00d7 baggage mass\n  - if baggage mass in [24.5, 42.3), charge is 2.4 \u00d7 baggage mass\n  - if baggage mass in [5.0, 24.5), charge is 3.6 \u00d7 baggage mass\nfor military the following charges apply:\n  - if baggage mass in [44.8, 50.0), charge is 0.0 \u00d7 baggage mass\n  - if baggage mass in [42.3, 44.8), charge is 1.3 \u00d7 baggage mass\n  - if baggage mass in [24.5, 42.3), charge is 2.6 \u00d7 baggage mass\n  - if baggage mass in [5.0, 24.5), charge is 3.9 \u00d7 baggage mass",
    "code": "def compute_charge(aircraft_type, baggage_weight):\n    if aircraft_type == 'passenger' and 44.8 <= baggage_weight < 50.0: return 0 * baggage_weight * 1.0\n    elif aircraft_type == 'passenger' and 42.3 <= baggage_weight < 44.8: return 1 * baggage_weight * 1.0\n    elif aircraft_type == 'passenger' and 24.5 <= baggage_weight < 42.3: return 2 * baggage_weight * 1.0\n    elif aircraft_type == 'passenger' and 5.0 <= baggage_weight < 24.5: return 3 * baggage_weight * 1.0\n    elif aircraft_type == 'cargo' and 44.8 <= baggage_weight < 50.0: return 0 * baggage_weight * 1.1\n    elif aircraft_type == 'cargo' and 42.3 <= baggage_weight < 44.8: return 1 * baggage_weight * 1.1\n    elif aircraft_type == 'cargo' and 24.5 <= baggage_weight < 42.3: return 2 * baggage_weight * 1.1\n    elif aircraft_type == 'cargo' and 5.0 <= baggage_weight < 24.5: return 3 * baggage_weight * 1.1\n    elif aircraft_type == 'private' and 44.8 <= baggage_weight < 50.0: return 0 * baggage_weight * 1.2\n    elif aircraft_type == 'private' and 42.3 <= baggage_weight < 44.8: return 1 * baggage_weight * 1.2\n    elif aircraft_type == 'private' and 24.5 <= baggage_weight < 42.3: return 2 * baggage_weight * 1.2\n    elif aircraft_type == 'private' and 5.0 <= baggage_weight < 24.5: return 3 * baggage_weight * 1.2\n    elif aircraft_type == 'military' and 44.8 <= baggage_weight < 50.0: return 0 * baggage_weight * 1.3\n    elif aircraft_type == 'military' and 42.3 <= baggage_weight < 44.8: return 1 * baggage_weight * 1.3\n    elif aircraft_type == 'military' and 24.5 <= baggage_weight < 42.3: return 2 * baggage_weight * 1.3\n    elif aircraft_type == 'military' and 5.0 <= baggage_weight < 24.5: return 3 * baggage_weight * 1.3\n    else: raise ValueError(f'aircraft_type or baggage_weight is out of expected range')",
    "variables_used": [
      "aircraft_type",
      "baggage_weight"
    ],
    "synonyms": [
      "luggage charge",
      "baggage levy"
    ],
    "charge_description": "A fee charged for the baggage carried by passengers."
  },
  "passenger_service_fee": {
    "description": "passenger_service_fee conditions by flight category and traveler count:\n\nfor domestic the following charges apply:\n  - if traveler count in [378, 500), charge is 0 \u00d7 traveler count\n  - if traveler count in [359, 378), charge is 1 \u00d7 traveler count\n  - if traveler count in [11, 359), charge is 2 \u00d7 traveler count\n  - if traveler count in [10, 11), charge is 3 \u00d7 traveler count\nfor international the following charges apply:\n  - if traveler count in [378, 500), charge is 0 \u00d7 traveler count\n  - if traveler count in [359, 378), charge is 2 \u00d7 traveler count\n  - if traveler count in [11, 359), charge is 4 \u00d7 traveler count\n  - if traveler count in [10, 11), charge is 6 \u00d7 traveler count\nfor charter the following charges apply:\n  - if traveler count in [378, 500), charge is 0 \u00d7 traveler count\n  - if traveler count in [359, 378), charge is 3 \u00d7 traveler count\n  - if traveler count in [11, 359), charge is 6 \u00d7 traveler count\n  - if traveler count in [10, 11), charge is 9 \u00d7 traveler count",
    "code": "def compute_charge(flight_type, passenger_count):\n    if flight_type == 'domestic' and 378 <= passenger_count < 500: return 0 * passenger_count * 1\n    elif flight_type == 'domestic' and 359 <= passenger_count < 378: return 1 * passenger_count * 1\n    elif flight_type == 'domestic' and 11 <= passenger_count < 359: return 2 * passenger_count * 1\n    elif flight_type == 'domestic' and 10 <= passenger_count < 11: return 3 * passenger_count * 1\n    elif flight_type == 'international' and 378 <= passenger_count < 500: return 0 * passenger_count * 2\n    elif flight_type == 'international' and 359 <= passenger_count < 378: return 1 * passenger_count * 2\n    elif flight_type == 'international' and 11 <= passenger_count < 359: return 2 * passenger_count * 2\n    elif flight_type == 'international' and 10 <= passenger_count < 11: return 3 * passenger_count * 2\n    elif flight_type == 'charter' and 378 <= passenger_count < 500: return 0 * passenger_count * 3\n    elif flight_type == 'charter' and 359 <= passenger_count < 378: return 1 * passenger_count * 3\n    elif flight_type == 'charter' and 11 <= passenger_count < 359: return 2 * passenger_count * 3\n    elif flight_type == 'charter' and 10 <= passenger_count < 11: return 3 * passenger_count * 3\n    else: raise ValueError(f'flight_type or passenger_count is out of expected range')",
    "variables_used": [
      "flight_type",
      "passenger_count"
    ],
    "synonyms": [
      "passenger charge",
      "service fee"
    ],
    "charge_description": "A fee charged for services provided to passengers at the airport."
  },
  "airport_facility_fee": {
    "description": "if flight category is 'international', charge is 0; if flight category is 'charter', charge is 1; if flight category is 'domestic', charge is 2",
    "code": "def compute_charge(flight_type):\n    if flight_type == 'international': return 0\n    elif flight_type == 'charter': return 1\n    elif flight_type == 'domestic': return 2\n    else: raise ValueError(f'Unknown value for flight_type: {flight_type}')",
    "variables_used": [
      "flight_type"
    ],
    "synonyms": [
      "facility charge",
      "airport usage fee"
    ],
    "charge_description": "A fee charged for the use of airport facilities."
  },
  "run_id": "2025-08-14_08-46-08"
}